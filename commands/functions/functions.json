[
    {
        "function": "$addColorStop",
        "description": "Add a color stop to gradient.",
        "usage": "$addColorStop[canvas;gradient;offset;color]",
        "parameters": [],
        "example": null,
        "tip": null,
        "documentation": "https://aoi.js.org/extensions/aoijs/aoicanvas/functions/addcolorstop",
        "source": "https://github.com/aoijs/aoi.canvas",
        "type": "Aoi.Canvas"
    },
    {
        "function": "$attachCanvas",
        "description": "Attaches canvas.",
        "usage": "$attachCanvas[canvas;name?]",
        "parameters": [],
        "example": "### This will create new 300x320 canvas with house and add an attachment house.png.\n\n```\n$attachCanvas[mycanvas;house.png]\n$drawLines[mycanvas;draw;#03a9f4;10;50;140;150:60;250:140]\n$fillRect[mycanvas;#03a9f4;130;190;40;60]\n$strokeRect[mycanvas;#03a9f4;75;140;150;110]\n$createCanvas[mycanvas;300;320]\n```\n\n![Preview](../../../../../../images/showcases/house-custom-name.png)\n\n### This will create new 300x320 canvas with house and add an attachment with name of your canvas. (mycanvas.png)\n\n```\n$attachCanvas[mycanvas]\n$drawLines[mycanvas;draw;#03a9f4;10;50;140;150:60;250:140]\n$fillRect[mycanvas;#03a9f4;130;190;40;60]\n$strokeRect[mycanvas;#03a9f4;75;140;150;110]\n$createCanvas[mycanvas;300;320]\n```\n\n![Preview](../../../../../../images/showcases/house-canvas-name.png)",
        "tip": null,
        "documentation": "https://aoi.js.org/extensions/aoijs/aoicanvas/functions/attachcanvas",
        "source": "https://github.com/aoijs/aoi.canvas",
        "type": "Aoi.Canvas"
    },
    {
        "function": "$canvasSize",
        "description": "Returns canvas size.",
        "usage": "$canvasSize[canvas;property]",
        "parameters": [],
        "example": "### This will create a redsquare canvas and then send it with the old and after trimming size.\n\n```\n$attachCanvas[redsquare;ball.png]\nNew: $canvasSize[redsquare;width]x$canvasSize[redsquare;height] $canvasTrim[redsquare]$fillRect[redsquare;#FF0000;50;50;150;150]\nOld: $canvasSize[redsquare;width]x$canvasSize[redsquare;height]\n$createCanvas[redsquare;250;250]\n```\n\n![Preview](../../../../../../images/showcases/trim-only.png)",
        "tip": null,
        "documentation": "https://aoi.js.org/extensions/aoijs/aoicanvas/functions/canvassize",
        "source": "https://github.com/aoijs/aoi.canvas",
        "type": "Aoi.Canvas"
    },
    {
        "function": "$canvasTrim",
        "description": "Trims the canvas.",
        "usage": "$canvasTrim[canvas]",
        "parameters": [],
        "example": "### This will draw a red square and then trim the canvas\n\n```\n$attachCanvas[redsquare;ball.png]\nNew: $canvasSize[redsquare;width]x$canvasSize[redsquare;height] $canvasTrim[redsquare]$fillRect[redsquare;#FF0000;50;50;150;150]\nOld: $canvasSize[redsquare;width]x$canvasSize[redsquare;height]\n$createCanvas[redsquare;250;250]\n```\n\n![Preview](../../../../../../images/showcases/trim.png)",
        "tip": null,
        "documentation": "https://aoi.js.org/extensions/aoijs/aoicanvas/functions/canvastrim",
        "source": "https://github.com/aoijs/aoi.canvas",
        "type": "Aoi.Canvas"
    },
    {
        "function": "$clearRect",
        "description": "Erases pixels in a rect area.",
        "usage": "$clearRect[canvas;x;y;width;height;radius?]",
        "parameters": [],
        "example": null,
        "tip": null,
        "documentation": "https://aoi.js.org/extensions/aoijs/aoicanvas/functions/clearrect",
        "source": "https://github.com/aoijs/aoi.canvas",
        "type": "Aoi.Canvas"
    },
    {
        "function": "$createCanvas",
        "description": "Creates a new canvas.",
        "usage": "$createCanvas[canvas;width?;height?]",
        "parameters": [],
        "example": null,
        "tip": null,
        "documentation": "https://aoi.js.org/extensions/aoijs/aoicanvas/functions/createcanvas",
        "source": "https://github.com/aoijs/aoi.canvas",
        "type": "Aoi.Canvas"
    },
    {
        "function": "$createGradient",
        "description": "Creates a gradient.",
        "usage": "$createGradient[canvas;gradient;type;...options]",
        "parameters": [],
        "example": null,
        "tip": null,
        "documentation": "https://aoi.js.org/extensions/aoijs/aoicanvas/functions/creategradient",
        "source": "https://github.com/aoijs/aoi.canvas",
        "type": "Aoi.Canvas"
    },
    {
        "function": "$downloadCanvas",
        "description": "Downloads the canvas.",
        "usage": "$downloadCanvas[canvas;path]",
        "parameters": [],
        "example": "### This will create a house canvas and then download it into a directory.\n\n```\n$downloadCanvas[mycanvas;./some-canvas-folder/uwu.png]\n$drawLines[mycanvas;draw;#03a9f4;10;50;140;150:60;250:140]\n$fillRect[mycanvas;#03a9f4;130;190;40;60]\n$strokeRect[mycanvas;#03a9f4;75;140;150;110]\n$createCanvas[mycanvas;300;320]\n```\n\n![Preview](../../../../../../images/showcases/download-house.png)",
        "tip": null,
        "documentation": "https://aoi.js.org/extensions/aoijs/aoicanvas/functions/downloadcanvas",
        "source": "https://github.com/aoijs/aoi.canvas",
        "type": "Aoi.Canvas"
    },
    {
        "function": "$drawImage",
        "description": "Draw an image.",
        "usage": "$drawImage[canvas;src;x;y;width;height;radius?]",
        "parameters": [],
        "example": "### This will create a canvas with your avatar.\n\n```\n$attachCanvas[avatar]\n$drawImage[avatar;$nonEscape[$authorAvatar];0;0;1024;1024]\n$createCanvas[avatar;1024;1024]\n```\n\n![Preview](../../../../../../images/showcases/avatar.png)",
        "tip": null,
        "documentation": "https://aoi.js.org/extensions/aoijs/aoicanvas/functions/drawimage",
        "source": "https://github.com/aoijs/aoi.canvas",
        "type": "Aoi.Canvas"
    },
    {
        "function": "$drawLines",
        "description": "Draws lines.",
        "usage": "$drawLines[canvas;type;color;strokeWidth?;x?;y?;...lines]",
        "parameters": [],
        "example": "### This will create new 300x320 canvas with house and add an attachment house.png.\n\n```\n$attachCanvas[mycanvas;house.png]\n$drawLines[mycanvas;draw;#03a9f4;10;50;140;150:60;250:140]\n$fillRect[mycanvas;#03a9f4;130;190;40;60]\n$strokeRect[mycanvas;#03a9f4;75;140;150;110]\n$createCanvas[mycanvas;300;320]\n```\n\n![Preview](../../../../../../images/showcases/house-custom-name.png)\n\n### This will create new 150x150 canvas with name heart and draw heart on it using bezier curve/lines\n\n```\n$attachCanvas[heart]\n$drawLines[heart;0;#FF0000;10;75;40;\nbezier: 75: 37: 70: 25: 50: 25;\nbezier: 20: 25: 20: 62.5: 20: 62.5;\nbezier: 20: 80: 40: 102: 75: 120;\nbezier: 110: 102: 130: 80: 130: 62.5;\nbezier: 130: 62.5: 130: 25: 100 : 25;\nbezier: 85: 25: 75: 37: 75: 40]\n$createCanvas[heart;150;150]\n```\n\n![Preview](../../../../../../images/showcases/heart.png)",
        "tip": null,
        "documentation": "https://aoi.js.org/extensions/aoijs/aoicanvas/functions/drawlines",
        "source": "https://github.com/aoijs/aoi.canvas",
        "type": "Aoi.Canvas"
    },
    {
        "function": "$fillRect",
        "description": "Draws a new rect.",
        "usage": "$fillRect[canvas;style;x?;y?;width?;height?;radius?]",
        "parameters": [],
        "example": "### This will draw a 250x250 red square\n\n```\n$attachCanvas[redsquare;ball.png]\n$fillRect[redsquare;#FF0000;0;0;250;250]\n$createCanvas[redsquare;250;250]\n```\n\n![Preview](../../../../../../images/showcases/redsquare.png)\n\n### This will draw a 250x250 red circle\n\n```\n$attachCanvas[redball;ball.png]\n$fillRect[redball;#FF0000;0;0;250;250;125]\n$createCanvas[redball;250;250]\n```\n\n![Preview](../../../../../../images/showcases/redball.png)",
        "tip": null,
        "documentation": "https://aoi.js.org/extensions/aoijs/aoicanvas/functions/fillrect",
        "source": "https://github.com/aoijs/aoi.canvas",
        "type": "Aoi.Canvas"
    },
    {
        "function": "$fillText",
        "description": "Draw text.",
        "usage": "$fillText[canvas;text;style?;font;x;y;maxWidth?;align?;baseline?]",
        "parameters": [],
        "example": null,
        "tip": null,
        "documentation": "https://aoi.js.org/extensions/aoijs/aoicanvas/functions/filltext",
        "source": "https://github.com/aoijs/aoi.canvas",
        "type": "Aoi.Canvas"
    },
    {
        "function": "$filter",
        "description": "Use filters in your canvas.",
        "usage": "$filter[canvas;method;name?;value?]",
        "parameters": [],
        "example": "Soon ™",
        "tip": null,
        "documentation": "https://aoi.js.org/extensions/aoijs/aoicanvas/functions/filter",
        "source": "https://github.com/aoijs/aoi.canvas",
        "type": "Aoi.Canvas"
    },
    {
        "function": "$fontFamilies",
        "description": "Returns all font families you can use.",
        "usage": "$fontFamilies[separator?]",
        "parameters": [],
        "example": "### This will send all font families.\n\n```\n$fontFamilies\n```\n\n![Preview](../../../../../../images/showcases/fontfamilies.png)",
        "tip": null,
        "documentation": "https://aoi.js.org/extensions/aoijs/aoicanvas/functions/fontfamilies",
        "source": "https://github.com/aoijs/aoi.canvas",
        "type": "Aoi.Canvas"
    },
    {
        "function": "$measureText",
        "description": "Measure some text.",
        "usage": "$measureText[canvas;text;font?;property?]",
        "parameters": [],
        "example": null,
        "tip": null,
        "documentation": "https://aoi.js.org/extensions/aoijs/aoicanvas/functions/measuretext",
        "source": "https://github.com/aoijs/aoi.canvas",
        "type": "Aoi.Canvas"
    },
    {
        "function": "$registerFont",
        "description": "Register a font.",
        "usage": "$registerFont[src;name?]",
        "parameters": [],
        "example": null,
        "tip": null,
        "documentation": "https://aoi.js.org/extensions/aoijs/aoicanvas/functions/registerfont",
        "source": "https://github.com/aoijs/aoi.canvas",
        "type": "Aoi.Canvas"
    },
    {
        "function": "$rotation",
        "description": "Sets canvas rotation.",
        "usage": "$rotation[canvas;angle]",
        "parameters": [],
        "example": null,
        "tip": null,
        "documentation": "https://aoi.js.org/extensions/aoijs/aoicanvas/functions/rotation",
        "source": "https://github.com/aoijs/aoi.canvas",
        "type": "Aoi.Canvas"
    },
    {
        "function": "$setShadow",
        "description": "Sets shadow in a canvas.",
        "usage": "$setShadow[canvas;blur;color;offset?]",
        "parameters": [],
        "example": null,
        "tip": null,
        "documentation": "https://aoi.js.org/extensions/aoijs/aoicanvas/functions/setshadow",
        "source": "https://github.com/aoijs/aoi.canvas",
        "type": "Aoi.Canvas"
    },
    {
        "function": "$strokeRect",
        "description": "Draws a new stroke rect.",
        "usage": "$strokeRect[canvas;color;x?;y?;width?;height?;strokeWidth?;radius?]",
        "parameters": [],
        "example": null,
        "tip": null,
        "documentation": "https://aoi.js.org/extensions/aoijs/aoicanvas/functions/strokerect",
        "source": "https://github.com/aoijs/aoi.canvas",
        "type": "Aoi.Canvas"
    },
    {
        "function": "$strokeText",
        "description": "Draw stroke text.",
        "usage": "$strokeText[canvas;text;color?;font?;x;y;strokeWidth?;maxWidth?;align?;baseline?]",
        "parameters": [],
        "example": null,
        "tip": null,
        "documentation": "https://aoi.js.org/extensions/aoijs/aoicanvas/functions/stroketext",
        "source": "https://github.com/aoijs/aoi.canvas",
        "type": "Aoi.Canvas"
    },
    {
        "function": "$translate",
        "description": "Adds a translation transformation.",
        "usage": "$translate[canvas;x?;y?]",
        "parameters": [],
        "example": null,
        "tip": null,
        "documentation": "https://aoi.js.org/extensions/aoijs/aoicanvas/functions/translate",
        "source": "https://github.com/aoijs/aoi.canvas",
        "type": "Aoi.Canvas"
    },
    {
        "function": "$abbreviate",
        "description": "$abbreviate will allow you to abbreviate large numbers.",
        "usage": "$abbreviate[num;dec?]",
        "parameters": [
            {
                "field": "num",
                "type": "number",
                "description": "Number to abbreviate.",
                "required": true
            },
            {
                "field": "dec",
                "type": "number",
                "description": "Decimal between the abbreviate.",
                "required": false
            }
        ],
        "example": "This returns: `20k`\n\n```javascript\nclient.command({\n    name: \"abbreviate\",\n    code: `\n  $abbreviate[20000]\n  `\n});\n```\n\nThis returns: `20.0k`\n\n```javascript\nclient.command({\n    name: \"abbreviate\",\n    code: `\n  $abbreviate[20000;1]\n  `\n});\n```",
        "tip": null,
        "documentation": "https://aoi.js.org/functions/abbreviate",
        "source": "https://github.com/aoijs/aoi.js/tree/v6/src/functions/misc/abbreviate.js",
        "type": "Aoi.Js"
    },
    {
        "function": "$abs",
        "description": "$abs returns the absolute value of the number.",
        "usage": "$abs[number]",
        "parameters": [
            {
                "field": "number",
                "type": "number",
                "description": "The number.",
                "required": true
            }
        ],
        "example": "This will return the absolute value of `-151.5`, which is `151.5`:\n\n```javascript\nclient.command({\n    name: \"abs\",\n    code: `$abs[-151.5]`\n});\n```",
        "tip": null,
        "documentation": "https://aoi.js.org/functions/abs",
        "source": "https://github.com/aoijs/aoi.js/tree/v6/src/functions/math/abs.js",
        "type": "Aoi.Js"
    },
    {
        "function": "$addButton",
        "description": "$addButton will add a button to the bot's message.",
        "usage": "$addButton[index;label;style;customID;disabled?;emoji?]",
        "parameters": [
            {
                "field": "index",
                "type": "number",
                "description": "In which (action)row the button appears.",
                "required": true
            },
            {
                "field": "label",
                "type": "string",
                "description": "The text that will be displayed on the button as label.",
                "required": true
            },
            {
                "field": "style",
                "type": "string",
                "description": "The button **[style](https://discord.com/developers/docs/interactions/message-components#button-object-button-styles)**.",
                "required": true
            },
            {
                "field": "customID",
                "type": "string",
                "description": "The component custom ID used to identify the button.",
                "required": true
            },
            {
                "field": "disabled",
                "type": "boolean",
                "description": "Make the button unusable/disabled? \n1. **true** \n2. **false** (default)",
                "required": false
            },
            {
                "field": "emoji",
                "type": "string",
                "description": "The emoji displayed in the button.",
                "required": false
            }
        ],
        "example": "This adds a primary and link button to the bot's message:\n\n```javascript\nclient.command({\n    name: \"addButton\",\n    code: `\n    Hello!\n    $addButton[1;Example Button!;primary;exampleButton;false;💔]\n    $addButton[1;Example Button!;link;https://discord.gg;false]\n  `\n});\n```\n\n```javascript\nclient.interactionCommand({\n    name: \"exampleButton\",\n    prototype: \"button\",\n    code: `\n    $interactionReply[Awesome Button Interaction!]\n  `\n});\n```",
        "tip": null,
        "documentation": "https://aoi.js.org/functions/addbutton",
        "source": "https://github.com/aoijs/aoi.js/tree/v6/src/functions/components/addButton.js",
        "type": "Aoi.Js"
    },
    {
        "function": "$addButtonTo",
        "description": "$addButtonTo will add a button to a specific message.",
        "usage": "$addButtonTo[channelId;messageId;index;label;style;customID;disabled?;emoji?]",
        "parameters": [
            {
                "field": "channelId",
                "type": "number",
                "description": "The channel id.",
                "required": true
            },
            {
                "field": "messageId",
                "type": "number",
                "description": "The message id.",
                "required": true
            },
            {
                "field": "index",
                "type": "number",
                "description": "In which (action)row the button appears.",
                "required": true
            },
            {
                "field": "label",
                "type": "string",
                "description": "The text that will be displayed on the button as label.",
                "required": true
            },
            {
                "field": "style",
                "type": "string",
                "description": "The button **[style](https://discord.com/developers/docs/interactions/message-components#button-object-button-styles)**.",
                "required": true
            },
            {
                "field": "customID",
                "type": "string",
                "description": "The component custom ID used to identify the button.",
                "required": true
            },
            {
                "field": "disabled",
                "type": "boolean",
                "description": "Make the button unusable/disabled? \n1. **true** \n2. **false** (default)",
                "required": false
            },
            {
                "field": "emoji",
                "type": "string",
                "description": "The emoji displayed in the button.",
                "required": false
            }
        ],
        "example": "This adds a primary and link button to the bot's message:\n\n```javascript\nclient.command({\n    name: \"addButtonTo\",\n    code: `\n    Hello!\n    $addButtonTo[$channelId;$messageId;1;Example Button!;primary;exampleButton;false;💔]\n    $addButtonTo[$channelId;$messageId;1;Example Button!;link;https://discord.gg;false]\n  `\n});\n```\n\n```javascript\nclient.interactionCommand({\n    name: \"exampleButton\",\n    prototype: \"button\",\n    code: `\n    $interactionReply[Awesome Button Interaction!]\n  `\n});\n```",
        "tip": null,
        "documentation": "https://aoi.js.org/functions/addbuttonto",
        "source": "https://github.com/aoijs/aoi.js/tree/v6/src/functions/components/addButtonTo.js",
        "type": "Aoi.Js"
    },
    {
        "function": "$addClientReactions",
        "description": "$addClientReactions will add a reaction to the bot's message.",
        "usage": "$addClientReactions[...reactions]",
        "parameters": [
            {
                "field": "reactions",
                "type": "string",
                "description": "Reactions to add.",
                "required": true
            }
        ],
        "example": "This will add the given emojis to the bot's response (\"Hello!\"):\n\n```javascript\nclient.command({\n    name: \"addClientReactions\",\n    code: `\n    Hello!\n    $addClientReactions[🧡;❤️]\n  `\n});\n```",
        "tip": null,
        "documentation": "https://aoi.js.org/functions/addclientreactions",
        "source": "https://github.com/aoijs/aoi.js/tree/v6/src/functions/components/addClientReactions.js",
        "type": "Aoi.Js"
    },
    {
        "function": "$addCmdReactions",
        "description": "$addCmdReactions will react with given emojis to the author's message.",
        "usage": "$addCmdReactions[...reactions]",
        "parameters": [
            {
                "field": "reactions",
                "type": "string",
                "description": "Reactions to add.",
                "required": true
            }
        ],
        "example": "This will add the given emojis to the author's response (\"Hello!\"):\n\n```javascript\nclient.command({\n    name: \"addCmdReactions\",\n    code: `\nHello!\n$addCmdReactions[🧡;❤]\n  `\n});\n```",
        "tip": null,
        "documentation": "https://aoi.js.org/functions/addcmdreactions",
        "source": "https://github.com/aoijs/aoi.js/tree/v6/src/functions/components/addCmdReactions.js",
        "type": "Aoi.Js"
    },
    {
        "function": "$addEmoji",
        "description": "$addEmoji will add an emoji to the given guild. If role IDs are given, the emoji will only be usable by users with one of the provided role IDs.",
        "usage": "$addEmoji[guildID;URL;name;returnEmoji?;reason?;...roles?]",
        "parameters": [
            {
                "field": "guildID",
                "type": "number",
                "description": "guild ID",
                "required": true
            },
            {
                "field": "URL",
                "type": "string",
                "description": "valid image URL",
                "required": true
            },
            {
                "field": "name",
                "type": "string",
                "description": "emoji name",
                "required": true
            },
            {
                "field": "returnEmoji",
                "type": "boolean",
                "description": "return the created emoji?",
                "required": false
            },
            {
                "field": "reason",
                "type": "string",
                "description": "reason which will be displayed in the guild's audit logs",
                "required": false
            },
            {
                "field": "roles",
                "type": "number",
                "description": "which roles will be able to use the given emoji",
                "required": false
            }
        ],
        "example": "This will create an emoji:\n\n```javascript\nclient.command({\n    name: \"addEmoji\",\n    code: `\n  $addEmoji[$guildID;https://cdn.discordapp.com/emojis/1010320053687832586.webp?size=96&quality=lossless;leref;false]\n  `\n});\n```",
        "tip": null,
        "documentation": "https://aoi.js.org/functions/addemoji",
        "source": "https://github.com/aoijs/aoi.js/tree/v6/src/functions/math/addEmoji.js",
        "type": "Aoi.Js"
    },
    {
        "function": "$addField",
        "description": "$addField will add a field in an embed.",
        "usage": "$addField[fieldTitle;fieldDescription;inline?]",
        "parameters": [
            {
                "field": "fieldTitle",
                "type": "string",
                "description": "The title of the field.",
                "required": true
            },
            {
                "field": "fieldDescription",
                "type": "string",
                "description": "The description of the field.",
                "required": true
            },
            {
                "field": "inline",
                "type": "boolean",
                "description": "If the field is inline.",
                "required": false
            }
        ],
        "example": "This will send an embed with a field and description:\n\n```javascript\nclient.command({\n    name: \"addField\",\n    code: `\n  $addField[Example;Look at this!;true]\n  $description[Hello!]\n  `\n});\n```",
        "tip": null,
        "documentation": "https://aoi.js.org/functions/addfield",
        "source": "https://github.com/aoijs/aoi.js/tree/v6/src/functions/embeds/addField.js",
        "type": "Aoi.Js"
    },
    {
        "function": "$addMessageFlags",
        "description": "$addMessageFlags allows you to add flags to a message.",
        "usage": null,
        "parameters": [],
        "example": "This will send a message and then suppress its embeds:\n \n ```javascript\n client.command({\n     name: \"addMessageFlags\",\n     code: `\n       $addMessageFlags[$channelID;$get[msg];SuppressEmbeds]\n       $let[msg;$channelSendMessage[$channelID;The documentation preview will not be shown. https://aoi.js.org/ ;true]]\n     `});\n ```\n \n ```javascript\n client.command({\n     name: \"addMessageFlags\",\n     code: `\n       $addMessageFlags[$channelID;$get[msg];4]\n       $let[msg;$channelSendMessage[$channelID;The documentation preview will not be shown. https://aoi.js.org/ ;true]]\n     `});\n ```",
        "tip": null,
        "documentation": "https://aoi.js.org/functions/addmessageflags",
        "source": "https://github.com/aoijs/aoi.js/tree/v6/src/functions/math/addMessageFlags.js",
        "type": "Aoi.Js"
    },
    {
        "function": "$addMessageReactions",
        "description": "$addMessageReactions will add a reaction to a specific message.",
        "usage": "$addMessageReactions[channelID;messageID;...reactions]",
        "parameters": [
            {
                "field": "channelID",
                "type": "number",
                "description": "Channel ID of where the message is located.",
                "required": true
            },
            {
                "field": "messageID",
                "type": "number",
                "description": "Message ID.",
                "required": true
            },
            {
                "field": "reactions",
                "type": "string",
                "description": "Reactions to add.",
                "required": true
            }
        ],
        "example": "This will add the given reactions to your message:\n\n```javascript\nclient.command({\n    name: \"addMessageReactions\",\n    code: `\n $addMessageReactions[$channelID;$messageID;✅;❌]\n  `\n});\n```",
        "tip": null,
        "documentation": "https://aoi.js.org/functions/addmessagereactions",
        "source": "https://github.com/aoijs/aoi.js/tree/v6/src/functions/components/addMessageReactions.js",
        "type": "Aoi.Js"
    },
    {
        "function": "$addSelectMenu",
        "description": "$addSelectMenu will add a select menu to the bot's message.",
        "usage": "$addSelectMenu[index;type;customId;placeHolder;minValues;maxValues;disabled?;label:description:value:default?:emoji?;...]",
        "parameters": [
            {
                "field": "index",
                "type": "number",
                "description": "In which actionRow the selectMenu appears, a selectMenu requires one whole row for it alone.",
                "required": true
            },
            {
                "field": "type",
                "type": "string",
                "description": "The component type. \n1. **string** \n2. **user** \n3. **role** \n4. **mentionable** \n5. **channel**",
                "required": true
            },
            {
                "field": "customID",
                "type": "string",
                "description": "The component custom ID.",
                "required": true
            },
            {
                "field": "placeHolder",
                "type": "string",
                "description": "SelectMenu Placeholder Text.",
                "required": true
            },
            {
                "field": "minValues",
                "type": "number",
                "description": "SelectMenu minimal value of selectable options",
                "required": true
            },
            {
                "field": "maxValues",
                "type": "number",
                "description": "SelectMenu maximal value of selectable options",
                "required": true
            },
            {
                "field": "disabled",
                "type": "boolean",
                "description": "If the selectMenu will appear as disabled \n1. **true** \n2. **false** (default)",
                "required": true
            },
            {
                "field": "options",
                "type": "string",
                "description": "Select menu options separated by each other with `;` and `:`.",
                "required": false
            }
        ],
        "example": "This adds a select menu with two functions:\n\n```javascript\nclient.command({\n    name: \"add-select-menu\",\n    code: `\n  Select an option.\n  \n  $addSelectMenu[1;string;yourCustomID;This is a placeholder!;1;1;false;A Option:Description of option A:anotherCustomID:false;B Option:Description of option B:andAnotherCustomID:true]\n  `\n});\n\nmodule.exports = [\n    {\n        name: \"add-select-menu\",\n        code: `\n     Select an option.\n     $addSelectMenu[1;string;yourCustomID;This is a placeholder!;1;1;false;A Option:Description of option A:anotherCustomID:false;B Option:Description of option B:andAnotherCustomID:true]\n  `\n    },\n    {\n        name: \"yourCustomID\",\n        type: \"interaction\", // clarifying that this command is an Interaction\n        prototype: \"selectMenu\",\n        code: `\n     $interactionReply[Hello! :);everyone;false]\n     $onlyIf[$interactionData[values[0]]==anotherCustomID;]`\n    },\n    {\n        name: \"yourCustomID\",\n        type: \"interaction\", // clarifying that this command is an Interaction\n        prototype: \"selectMenu\",\n        code: `\n     $interactionReply[Bye! :(;everyone;false]\n     $onlyIf[$interactionData[values[0]]==andAnotherCustomID;]`\n    }\n];\n\n/* \nWe use \"$onlyIf[$interactionData[values[0]]==customID;]\" to make sure this only will be triggered for the according select menu option.\n\nAlso ensure that you have the \"onInteractionCreate\" event in your index.js (or whatever your main entry file might be!)\n*/\n```",
        "tip": null,
        "documentation": "https://aoi.js.org/functions/addselectmenu",
        "source": "https://github.com/aoijs/aoi.js/tree/v6/src/functions/components/addSelectMenu.js",
        "type": "Aoi.Js"
    },
    {
        "function": "$addSelectMenuTo",
        "description": "$addSelectMenuTo will add a select menu to a specific message.",
        "usage": "$addSelectMenuTo[channelId;messageId;index;type;customId;placeHolder;minValues;maxValues;disabled?;label:description:value:default?:emoji?;...]",
        "parameters": [
            {
                "field": "channelId",
                "type": "number",
                "description": "The channel id.",
                "required": true
            },
            {
                "field": "messageId",
                "type": "number",
                "description": "The message id.",
                "required": true
            },
            {
                "field": "index",
                "type": "number",
                "description": "In which actionRow the selectMenu appears, a selectMenu requires one whole row for it alone.",
                "required": true
            },
            {
                "field": "type",
                "type": "string",
                "description": "The component type. \n1. **string** \n2. **user** \n3. **role** \n4. **mentionable** \n5. **channel**",
                "required": true
            },
            {
                "field": "customID",
                "type": "string",
                "description": "The component custom ID.",
                "required": true
            },
            {
                "field": "placeHolder",
                "type": "string",
                "description": "SelectMenu Placeholder Text.",
                "required": true
            },
            {
                "field": "minValues",
                "type": "number",
                "description": "SelectMenu minimal value of selectable options",
                "required": true
            },
            {
                "field": "maxValues",
                "type": "number",
                "description": "SelectMenu maximal value of selectable options",
                "required": true
            },
            {
                "field": "disabled",
                "type": "boolean",
                "description": "If the selectMenu will appear as disabled- \n1. **true** \n2. **false** (default)",
                "required": true
            },
            {
                "field": "options",
                "type": "string",
                "description": "Select menu options separated by each other with `;` and `:`.",
                "required": true
            }
        ],
        "example": "This adds a select menu with two functions:\n\n```javascript\nclient.command({\n    name: \"add-select-menu\",\n    code: `\n  Select an option.\n  \n  $addSelectMenuTo[1;string;yourCustomID;This is a placeholder!;1;1;false;A Option:Description of option A:anotherCustomID:false;B Option:Description of option B:andAnotherCustomID:true]\n  `\n});\n\nmodule.exports = [\n    {\n        name: \"add-select-menu\",\n        code: `\n     Select an option.\n     $addSelectMenuTo[1;string;yourCustomID;This is a placeholder!;1;1;false;A Option:Description of option A:anotherCustomID:false;B Option:Description of option B:andAnotherCustomID:true]\n  `\n    },\n    {\n        name: \"yourCustomID\",\n        type: \"interaction\", // clarifying that this command is an Interaction\n        prototype: \"selectMenu\",\n        code: `\n     $interactionReply[Hello! :);everyone;false]\n     $onlyIf[$interactionData[values[0]]==anotherCustomID;]`\n    },\n    {\n        name: \"yourCustomID\",\n        type: \"interaction\", // clarifying that this command is an Interaction\n        prototype: \"selectMenu\",\n        code: `\n     $interactionReply[Bye! :(;everyone;false]\n     $onlyIf[$interactionData[values[0]]==andAnotherCustomID;]`\n    }\n];\n\n/* \nWe use \"$onlyIf[$interactionData[values[0]]==customID;]\" to make sure this only will be triggered for the according select menu option.\n\nAlso ensure that you have the \"onInteractionCreate\" event in your main file (index.js in most cases).\n*/\n```\n\n[dp]: https://discord.com/developers/docs/interactions/message-components#button-object-button-styles",
        "tip": null,
        "documentation": "https://aoi.js.org/functions/addselectmenuto",
        "source": "https://github.com/aoijs/aoi.js/tree/v6/src/functions/components/addSelectMenuTo.js",
        "type": "Aoi.Js"
    },
    {
        "function": "$addThreadMember",
        "description": "$addThreadMember will add a member to a thread.",
        "usage": "$addThreadMember[channelID;threadID;userID;reason]",
        "parameters": [
            {
                "field": "channelID",
                "type": "number",
                "description": "Channel ID of where the thread is located.",
                "required": true
            },
            {
                "field": "threadID",
                "type": "number",
                "description": "The thread ID.",
                "required": true
            },
            {
                "field": "userID",
                "type": "number",
                "description": "The user that should be added to the thread.",
                "required": true
            },
            {
                "field": "reason",
                "type": "string",
                "description": "The reason that will be displayed in the guild's audit logs.",
                "required": true
            }
        ],
        "example": "This will create a thread and add random user to it:\n\n```javascript\nclient.command({\n    name: \"addThreadMember\",\n    code: `\n  $addThreadMember[$channelID;$get[id];$randomUserID;testing]\n  $let[id;$createThread[$channelID;example;1440;public;$messageID;true]]  \n  `\n});\n```",
        "tip": null,
        "documentation": "https://aoi.js.org/functions/addthreadmember",
        "source": "https://github.com/aoijs/aoi.js/tree/v6/src/functions/guild/addThreadMember.js",
        "type": "Aoi.Js"
    },
    {
        "function": "$addTimestamp",
        "description": "$addTimestamp will add a timestamp to an embed.",
        "usage": "$addTimestamp[ms?]",
        "parameters": [
            {
                "field": "ms",
                "type": "number",
                "description": "Epoch Time.",
                "required": false
            }
        ],
        "example": "This will create a embed with timestamp and description:\n\n```javascript\nclient.command({\n    name: \"addTimestamp\",\n    code: `\n  $description[Hello!]\n  $addTimestamp[192839ms]\n  `\n});\n```",
        "tip": null,
        "documentation": "https://aoi.js.org/functions/addtimestamp",
        "source": "https://github.com/aoijs/aoi.js/tree/v6/src/functions/embeds/addTimestamp.js",
        "type": "Aoi.Js"
    },
    {
        "function": "$advanceCooldown",
        "description": "$advanceCooldown will set a cooldown for a given ID.",
        "usage": "$advanceCooldown[time;id;errorMessage]",
        "parameters": [
            {
                "field": "time",
                "type": "string",
                "description": "The duration of the cooldown.",
                "required": true
            },
            {
                "field": "id",
                "type": "number",
                "description": "The Id of a user, role or anything else.",
                "required": true
            },
            {
                "field": "errorMessage",
                "type": "string",
                "description": "Error message to be displayed when there's cooldown remaining.",
                "required": true
            }
        ],
        "example": "This will set a cooldown for the guild where you execute the command and return the remaining cooldown time:\n\n```javascript\nclient.command({\n    name: \"advanceCooldown\",\n    code: `\n  $advanceCooldown[2m;$guildID;Please wait %time% to execute this command again.]\n  `\n});\n```",
        "tip": null,
        "documentation": "https://aoi.js.org/functions/advancecooldown",
        "source": "https://github.com/aoijs/aoi.js/tree/v6/src/functions/database/advanceCooldown.js",
        "type": "Aoi.Js"
    },
    {
        "function": "$advancedReplaceText",
        "description": "$advancedReplaceText will replace specific segments of text in sequence.",
        "usage": "$advancedReplaceText[text;replacer;replaceTo;...]",
        "parameters": [
            {
                "field": "text",
                "type": "string",
                "description": "Text you want to modify.",
                "required": true
            },
            {
                "field": "replacer",
                "type": "string",
                "description": "The text that will be replaced.",
                "required": true
            },
            {
                "field": "replaceTo",
                "type": "string",
                "description": "The text that will replace `replacer`.",
                "required": true
            }
        ],
        "example": "This will replace `Meow Cat` to `Dog Woof`:\n\n```javascript\nclient.command({\n    name: \"replaceText\",\n    code: `\n  $advancedReplaceText[Meow Cat;Cat;Dog;Meow;Woof]\n  `\n});\n```",
        "tip": null,
        "documentation": "https://aoi.js.org/functions/advancedreplacetext",
        "source": "https://github.com/aoijs/aoi.js/tree/v6/src/functions/misc/advancedReplaceText.js",
        "type": "Aoi.Js"
    },
    {
        "function": "$advancedTextSplit",
        "description": "$advancedTextSplit will split multiple given arguments.",
        "usage": "$advancedTextSplit[text;sep;index;sep?;index?]",
        "parameters": [
            {
                "field": "text",
                "type": "string",
                "description": "Text to split.",
                "required": true
            },
            {
                "field": "sep",
                "type": "string",
                "description": "Separator which is used to split the values.",
                "required": true
            },
            {
                "field": "index",
                "type": "number",
                "description": "The position of the text you want to be returned.",
                "required": true
            }
        ],
        "example": "This will split `Hello` from `Bye` and return `Hello`:\n\n```javascript\nclient.command({\n    name: \"advancedTextSplit\",\n    code: `\n  $advancedTextSplit[Hello/Bye;/;1]\n  `\n});\n```",
        "tip": null,
        "documentation": "https://aoi.js.org/functions/advancedtextsplit",
        "source": "https://github.com/aoijs/aoi.js/tree/v6/src/functions/misc/advancedTextSplit.js",
        "type": "Aoi.Js"
    },
    {
        "function": "$allApplicationCommands",
        "description": "$allApplicationCommands will return all slash command names registered in the bot's application.",
        "usage": "$allApplicationCommands[sep?]",
        "parameters": [
            {
                "field": "sep",
                "type": "string",
                "description": "Separator used between command names. Default is `,`.",
                "required": false
            }
        ],
        "example": "This will return all slash commands separated by a comma and a space:\n\n```javascript\nclient.command({\n  name: \"allApplicationCommands\",\n  code: `\n  $allApplicationCommands[, ]\n  `\n});\n```",
        "tip": null,
        "documentation": "https://aoi.js.org/functions/allapplicationcommands",
        "source": "https://github.com/aoijs/aoi.js/tree/v6/src/functions/misc/allApplicationCommands.js",
        "type": "Aoi.Js"
    },
    {
        "function": "$allChannelsCount",
        "description": "$allChannelsCount will return the amount of all cached channels of a given type.",
        "usage": "$allChannelsCount[type?]",
        "parameters": [
            {
                "field": "type",
                "type": "string",
                "description": "Type you want the amount of to be returned.",
                "required": false
            }
        ],
        "example": "This will return the amount of Voice Channels in your guild:\n\n```javascript\nclient.command({\n    name: \"allChannelsCount\",\n    code: `\n  $allChannelsCount[Voice]\n  `\n});\n```",
        "tip": null,
        "documentation": "https://aoi.js.org/functions/allchannelscount",
        "source": "https://github.com/aoijs/aoi.js/tree/v6/src/functions/guild/allChannelsCount.js",
        "type": "Aoi.Js"
    },
    {
        "function": "$allEmojisCount",
        "description": "$allEmojisCount will return the amount of emojis of a given type.",
        "usage": "$allEmojisCount[type?]",
        "parameters": [
            {
                "field": "type",
                "type": "string",
                "description": "Type you want the amount of to be returned.",
                "required": false
            }
        ],
        "example": "This will return the amount of emojis in your guild:\n\n```javascript\nclient.command({\n    name: \"allEmojisCount\",\n    code: `\n  $allEmojisCount\n  `\n});\n```",
        "tip": null,
        "documentation": "https://aoi.js.org/functions/allemojiscount",
        "source": "https://github.com/aoijs/aoi.js/tree/v6/src/functions/misc/allEmojisCount.js",
        "type": "Aoi.Js"
    },
    {
        "function": "$allMembersCount",
        "description": "$allMembersCount will return the amount of members in your guild.",
        "usage": "$allMembersCount",
        "parameters": [],
        "example": "This will return the amount of members in your guild:\n\n```javascript\nclient.command({\n    name: \"allMembersCount\",\n    code: `\n  $allMembersCount\n  `\n});\n```",
        "tip": null,
        "documentation": "https://aoi.js.org/functions/allmemberscount",
        "source": "https://github.com/aoijs/aoi.js/tree/v6/src/functions/guild/allMembersCount.js",
        "type": "Aoi.Js"
    },
    {
        "function": "$alwaysExecute",
        "description": "$alwaysExecute will always emit when a message event is triggered",
        "usage": "$alwaysExecute",
        "parameters": [],
        "example": "This will send the given message each time you send a message:\n\n```javascript\nclient.command({\n    name: \"$alwaysExecute\",\n    code: `Hello!`\n});\n```",
        "tip": null,
        "documentation": "https://aoi.js.org/functions/alwaysexecute",
        "source": "https://github.com/aoijs/aoi.js/tree/v6/src/functions/undefined/alwaysExecute.js",
        "type": "Aoi.Js"
    },
    {
        "function": "$and",
        "description": "$and will check if all given conditions are true.",
        "usage": "$and[...conditions]",
        "parameters": [
            {
                "field": "...conditions",
                "type": "string",
                "description": "The conditions you want to check.",
                "required": true
            }
        ],
        "example": "This will check if the three given conditions are `true`:\n\n1. `$authorId==$authorId` -> `true`\n2. `1>=1` -> `true`\n3. `$packageVersion==1.0.0` -> `false`\n\nAs you can see, one condition is `false`.\n\n```js\nclient.command({\n    name: \"and\",\n    code: `\n  $and[$authorId==$authorId;1>=1;$packageVersion==1.0.0]` // returns: false\n});\n```\n\nAnother example but with it returning true would be:\n\nThis will check if the three given conditions are `true`:\n\n1. `$authorId==$authorId` -> `true`\n2. `1>=1` -> `true`\n3. `$packageVersion==6.7.0` -> `true`\n\nAs you can see, all conditions are `true`.\n\n```js\nclient.command({\n    name: \"and\",\n    code: `\n  $and[$authorId==$authorId;1>=1;$packageVersion==6.7.0]` // returns: true\n});\n```",
        "tip": null,
        "documentation": "https://aoi.js.org/functions/and",
        "source": "https://github.com/aoijs/aoi.js/tree/v6/src/functions/condition/and.js",
        "type": "Aoi.Js"
    },
    {
        "function": "$appendFile",
        "description": "$appendFile will add given text to a specific file.",
        "usage": "$appendFile[path;content;encode?]",
        "parameters": [
            {
                "field": "path",
                "type": "string",
                "description": "File location.",
                "required": true
            },
            {
                "field": "content",
                "type": "string",
                "description": "Content to append to the file",
                "required": true
            },
            {
                "field": "encode",
                "type": "string",
                "description": "Encode type \n1. **utf8** (default)",
                "required": false
            }
        ],
        "example": "This will add a comment to your main file:\n\n```javascript\nclient.command({\n    name: \"appendFile\",\n    code: `\n  $appendFile[./index.js;// Hello!]\n  `\n});\n```",
        "tip": null,
        "documentation": "https://aoi.js.org/functions/appendfile",
        "source": "https://github.com/aoijs/aoi.js/tree/v6/src/functions/misc/appendFile.js",
        "type": "Aoi.Js"
    },
    {
        "function": "$archiveThread",
        "description": "$archiveThread will archive or unarchive a specific thread.",
        "usage": "$archiveThread[threadID;channelID?;archive?;reason?]",
        "parameters": [
            {
                "field": "threadID",
                "type": "number",
                "description": "Thread ID.",
                "required": true
            },
            {
                "field": "channelID",
                "type": "number",
                "description": "Channel ID of where the thread is located.",
                "required": false
            },
            {
                "field": "archive",
                "type": "boolean",
                "description": "Archive the given thread?",
                "required": false
            },
            {
                "field": "reason",
                "type": "string",
                "description": "Reason that will be displayed in the guild's audit logs.",
                "required": false
            }
        ],
        "example": "This will archive the created thread:\n\n```javascript\nclient.command({\n    name: \"archiveThread\",\n    code: `\n  $archiveThread[$channelID;$get[id];true;testing]\n  $let[id;$createThread[$channelID;example;1440;public;$messageID;true]]  \n  `\n});\n```",
        "tip": null,
        "documentation": "https://aoi.js.org/functions/archivethread",
        "source": "https://github.com/aoijs/aoi.js/tree/v6/src/functions/guild/archiveThread.js",
        "type": "Aoi.Js"
    },
    {
        "function": "$argsCheck",
        "description": "$argsCheck will check the arguments of what the user typed and the required one, if requirements didn't meet, it will return an error message.",
        "usage": "$argsCheck[condition;errorMessage]",
        "parameters": [
            {
                "field": "condition",
                "type": "string",
                "description": "Condition to be made.",
                "required": true
            },
            {
                "field": "errorMessage",
                "type": "string",
                "description": "Error message if condition did not meet.",
                "required": true
            }
        ],
        "example": "This returns: Greater than 2 arguments if condition met, else it will return an error message.\n\n```javascript\nclient.command({\n    name: \"argsCheck\",\n    code: `\n  You have more than two arguments, nice!\n\n  $argsCheck[>2;You have less than two arguments!]\n  `\n});\n```",
        "tip": null,
        "documentation": "https://aoi.js.org/functions/argscheck",
        "source": "https://github.com/aoijs/aoi.js/tree/v6/src/functions/misc/argsCheck.js",
        "type": "Aoi.Js"
    },
    {
        "function": "$argsCount",
        "description": "$argsCount will return the amount of given arguments.",
        "usage": "$argsCount",
        "parameters": [],
        "example": "This will return the amount of arguments in your message, for example, `[prefix]argsCount Hello Bye` will return two:\n\n```javascript\nclient.command({\n    name: \"argsCount\",\n    code: `\n  $argsCount\n  `\n});\n```",
        "tip": null,
        "documentation": "https://aoi.js.org/functions/argscount",
        "source": "https://github.com/aoijs/aoi.js/tree/v6/src/functions/misc/argsCount.js",
        "type": "Aoi.Js"
    },
    {
        "function": "$argsSlice",
        "description": "$argsSlice will slice the given argument depending on the users input.",
        "usage": "$argsSlice[text;from?;to]",
        "parameters": [
            {
                "field": "text",
                "type": "string",
                "description": "Text you want to slice",
                "required": true
            },
            {
                "field": "from",
                "type": "number",
                "description": "Starting point where to slice the message",
                "required": false
            },
            {
                "field": "to",
                "type": "number",
                "description": "Ending point where slicing ends",
                "required": true
            }
        ],
        "example": "This will return `Bye` and remove `Hello` from the given text:\n\n```javascript\nclient.command({\n    name: \"slice\",\n    code: `\n  $argsSlice[Hello Bye;1;5]\n  `\n});\n```",
        "tip": null,
        "documentation": "https://aoi.js.org/functions/argsslice",
        "source": "https://github.com/aoijs/aoi.js/tree/v6/src/functions/misc/argsSlice.js",
        "type": "Aoi.Js"
    },
    {
        "function": "$arrange",
        "description": "$arrange will arrange a given list of numbers.",
        "usage": "$arrange[order;separator;...numbers]",
        "parameters": [
            {
                "field": "order",
                "type": "string",
                "description": "**asc** (ascending), or **desc** (descending): the order in which the numbers will be sorted in.",
                "required": true
            },
            {
                "field": "separator",
                "type": "string",
                "description": "The separator which separates the numbers.",
                "required": true
            },
            {
                "field": "...numbers",
                "type": "number",
                "description": "The numbers to sort.",
                "required": true
            }
        ],
        "example": "This will sort the following numbers: (returns: `1, 2, 3, 4, 5, 6)`)\n\n```javascript\nclient.command({\n    name: \"arrange\",\n    code: `\n$arrange[asc;, ;1;6;4;2;5;3]\n  `\n});\n```",
        "tip": null,
        "documentation": "https://aoi.js.org/functions/arrange",
        "source": "https://github.com/aoijs/aoi.js/tree/v6/src/functions/misc/arrange.js",
        "type": "Aoi.Js"
    },
    {
        "function": "$arrayAt",
        "description": "$arrayAt will choose the index (position) of the array element to be returned. Returns nothing if the given index can not be found.",
        "usage": "$arrayAt[name;index]",
        "parameters": [
            {
                "field": "name",
                "type": "string",
                "description": "Name of the array.",
                "required": true
            },
            {
                "field": "index",
                "type": "string",
                "description": "The position of the element.",
                "required": true
            }
        ],
        "example": "-   This will return `Aoi.dashboard`:\n\n```javascript\nclient.command({\n    name: \"array-at\",\n    code: `\n  $arrayAt[Aoi;3]\n  \n  $createArray[Aoi;Aoi.music;Aoi.panel;Aoi.dashboard;Aoi]\n  `\n    // Returns \"Aoi.dashboard\"\n});\n```",
        "tip": null,
        "documentation": "https://aoi.js.org/functions/arrayat",
        "source": "https://github.com/aoijs/aoi.js/tree/v6/src/functions/array/arrayAt.js",
        "type": "Aoi.Js"
    },
    {
        "function": "$arrayConcat",
        "description": "$arrayConcat will concat multiple arrays.",
        "usage": "$arrayConcat[separator;...arrays]",
        "parameters": [
            {
                "field": "separator",
                "type": "string",
                "description": "Separator.",
                "required": true
            },
            {
                "field": "...arrays",
                "type": "string",
                "description": "Name of the array.",
                "required": true
            }
        ],
        "example": "This will return `This is a test` as it concats array 1 and 2:\n\n```javascript\nclient.command({\n    name: \"arrayConcat\",\n    code: `\n  $arrayConcat[ ;array1;array2]\n  $createArray[array1;This is]\n  $createArray[array2;a test]\n  `\n});\n```",
        "tip": null,
        "documentation": "https://aoi.js.org/functions/arrayconcat",
        "source": "https://github.com/aoijs/aoi.js/tree/v6/src/functions/array/arrayConcat.js",
        "type": "Aoi.Js"
    },
    {
        "function": "$arrayEvery",
        "description": "$arrayEvery will test whether all elements in the array pass the condition.",
        "usage": "$arrayEvery[name;query;queryType?]",
        "parameters": [
            {
                "field": "name",
                "type": "string",
                "description": "Array name.",
                "required": true
            },
            {
                "field": "query",
                "type": "string",
                "description": "The element we will be queering for every element inside the array.",
                "required": true
            },
            {
                "field": "queryType",
                "type": "string",
                "description": "The comparison operator.",
                "required": false
            }
        ],
        "example": "```javascript\nclient.command({\n    name: \"array-every\",\n    code: `\n  $arrayEvery[array;30;==]\n  $createArray[array;1;2;3;0;30]\n  `\n    // It will return \"false\". Cause 1 ≠ 30. You can think it as \"and (&&)\" logical operator.\n});\n```",
        "tip": null,
        "documentation": "https://aoi.js.org/functions/arrayevery",
        "source": "https://github.com/aoijs/aoi.js/tree/v6/src/functions/array/arrayEvery.js",
        "type": "Aoi.Js"
    },
    {
        "function": "$arrayFilter",
        "description": "$arrayFilter will check whether an element in the array equals the query and return it.",
        "usage": "$arrayFilter[name;query;queryType?;separator?]",
        "parameters": [
            {
                "field": "name",
                "type": "string",
                "description": "Array name.",
                "required": true
            },
            {
                "field": "query",
                "type": "string",
                "description": "The element we will be querying for every element inside the array.",
                "required": true
            },
            {
                "field": "queryType",
                "type": "string",
                "description": "The comparison operator.",
                "required": false
            },
            {
                "field": "separator",
                "type": "string",
                "description": "Separator.",
                "required": false
            }
        ],
        "example": "```javascript\nclient.command({\n    name: \"array-filter\",\n    code: `\n  $arrayFilter[array;akarui;==;, ]\n  $createArray[array;aoi.js;akarui;documents;bot]\n  `\n    // It will return \"akarui\" as it matches the query.\n});\n```\n\n```javascript\nclient.command({\n    name: \"array-filter\",\n    code: `\n  $arrayFilter[array;akarui;<=;, ]\n  $createArray[array;aoi.js;akarui;documents;bot]\n  `\n    // It will return \"documents, bot\" as its on the right of the found item.\n});\n```",
        "tip": null,
        "documentation": "https://aoi.js.org/functions/arrayfilter",
        "source": "https://github.com/aoijs/aoi.js/tree/v6/src/functions/array/arrayFilter.js",
        "type": "Aoi.Js"
    },
    {
        "function": "$arrayFind",
        "description": "$arrayFind will check for the first element in the array which matches the query and return it.",
        "usage": "$arrayFind[name;query;queryType?;separator?]",
        "parameters": [
            {
                "field": "name",
                "type": "string",
                "description": "Array name.",
                "required": true
            },
            {
                "field": "query",
                "type": "string",
                "description": "The element we will be queering for every element inside the array.",
                "required": true
            },
            {
                "field": "queryType",
                "type": "string",
                "description": "The comparison operator.",
                "required": false
            },
            {
                "field": "separator",
                "type": "string",
                "description": "Separator.",
                "required": false
            }
        ],
        "example": "```javascript\nclient.command({\n    name: \"array-find\",\n    code: `\n  $arrayFind[array;akarui;==;, ]\n  $createArray[array;aoi.js;akarui;documents;bot]\n  `\n    // It will return \"akarui\" as it matches the query.\n});\n```",
        "tip": null,
        "documentation": "https://aoi.js.org/functions/arrayfind",
        "source": "https://github.com/aoijs/aoi.js/tree/v6/src/functions/array/arrayFind.js",
        "type": "Aoi.Js"
    },
    {
        "function": "$arrayForEach",
        "description": "$arrayForEach will execute an awaited command for each item in the array.",
        "usage": "$arrayForEach[name;awaitedCommand;awaitData?;endCmd?]",
        "parameters": [
            {
                "field": "name",
                "type": "string",
                "description": "Array name.",
                "required": true
            },
            {
                "field": "awaitedCommand",
                "type": "string",
                "description": "Awaited command to executed.",
                "required": true
            },
            {
                "field": "awaitData",
                "type": "string",
                "description": "Awaited Data.",
                "required": false
            },
            {
                "field": "endCmd",
                "type": "string",
                "description": "Awaited command to executed when array ends.",
                "required": false
            }
        ],
        "example": null,
        "tip": null,
        "documentation": "https://aoi.js.org/functions/arrayforeach",
        "source": "https://github.com/aoijs/aoi.js/tree/v6/src/functions/array/arrayForEach.js",
        "type": "Aoi.Js"
    },
    {
        "function": "$arrayIncludes",
        "description": "$arrayIncludes will check if a specific item exists in the array.",
        "usage": "$arrayIncludes[name;query]",
        "parameters": [
            {
                "field": "name",
                "type": "string",
                "description": "Array name.",
                "required": true
            },
            {
                "field": "query",
                "type": "string",
                "description": "The element we will be queering for every element inside the array.",
                "required": true
            }
        ],
        "example": "```javascript\nclient.command({\n    name: \"array-includes\",\n    code: `\n  $arrayIncludes[array;Leref]\n  $createArray[array;aoi.js;akarui;documents;bot]\n  `\n    // It will return \"false\" as it doesn't contain the word \"Leref\".\n});\n```\n\n```javascript\nclient.command({\n    name: \"array-includes\",\n    code: `\n  $arrayIncludes[array;akarui]\n  $createArray[array;aoi.js;akarui;documents;bot]\n  `\n    // It will return \"true\" as it contains the word \"akarui\".\n});\n```",
        "tip": null,
        "documentation": "https://aoi.js.org/functions/arrayincludes",
        "source": "https://github.com/aoijs/aoi.js/tree/v6/src/functions/array/arrayIncludes.js",
        "type": "Aoi.Js"
    },
    {
        "function": "$arrayIndexOf",
        "description": "$arrayIndexOf will return the index of the first found item of the query.",
        "usage": "$arrayIndexOf[name;query]",
        "parameters": [
            {
                "field": "name",
                "type": "string",
                "description": "Array name.",
                "required": true
            },
            {
                "field": "query",
                "type": "string",
                "description": "The element we will be queering for every element inside the array.",
                "required": true
            }
        ],
        "example": "```javascript\nclient.command({\n    name: \"arrayIndexOf\",\n    code: `\n  $arrayIndexOf[array;akarui]\n  $createArray[array;aoi.js;akarui;documents;bot]\n  `\n    // It will return \"2\" as the word \"akarui\" is in the 2nd position of the array.\n});\n```",
        "tip": null,
        "documentation": "https://aoi.js.org/functions/arrayindexof",
        "source": "https://github.com/aoijs/aoi.js/tree/v6/src/functions/array/arrayIndexOf.js",
        "type": "Aoi.Js"
    },
    {
        "function": "$arrayJoin",
        "description": "$arrayJoin will join the array with a given separator.",
        "usage": "$arrayJoin[name;separator?]",
        "parameters": [
            {
                "field": "name",
                "type": "string",
                "description": "Array name.",
                "required": true
            },
            {
                "field": "separator",
                "type": "string",
                "description": "Separator.",
                "required": false
            }
        ],
        "example": "```javascript\nclient.command({\n    name: \"array-join\",\n    code: `\n  $arrayJoin[array;, ]\n  $createArray[array;aoi.js;akarui;documents;bot]\n  `\n});\n```",
        "tip": null,
        "documentation": "https://aoi.js.org/functions/arrayjoin",
        "source": "https://github.com/aoijs/aoi.js/tree/v6/src/functions/array/arrayJoin.js",
        "type": "Aoi.Js"
    },
    {
        "function": "$arrayLastIndexOf",
        "description": "$arrayLastIndexOf will return the index of the last found item of the query.",
        "usage": "$arrayLastIndexOf[name;query]",
        "parameters": [
            {
                "field": "name",
                "type": "string",
                "description": "Array name.",
                "required": true
            },
            {
                "field": "query",
                "type": "string",
                "description": "The element we will be queering for every element inside the array.",
                "required": true
            }
        ],
        "example": "```javascript\nclient.command({\n    name: \"arrayLastIndexOf\",\n    code: `\n  $arrayLastIndexOf[array;akarui]\n  $createArray[array;aoi.js;akarui;akarui;documents;bot]\n  `\n    // It will return \"3\" as the word \"akarui\" is in the 3rd position of the array.\n});\n```",
        "tip": null,
        "documentation": "https://aoi.js.org/functions/arraylastindexof",
        "source": "https://github.com/aoijs/aoi.js/tree/v6/src/functions/array/arrayLastIndexOf.js",
        "type": "Aoi.Js"
    },
    {
        "function": "$arrayLength",
        "description": "$arrayLength will return the length of a given array.",
        "usage": "$arrayLength[name]",
        "parameters": [
            {
                "field": "name",
                "type": "string",
                "description": "Array name.",
                "required": true
            }
        ],
        "example": "```javascript\nclient.command({\n    name: \"array-length\",\n    code: `\n  $arrayLength[array]\n  $createArray[array;aoi.js;akarui;documents;bot]\n  `\n});\n```",
        "tip": null,
        "documentation": "https://aoi.js.org/functions/arraylength",
        "source": "https://github.com/aoijs/aoi.js/tree/v6/src/functions/array/arrayLength.js",
        "type": "Aoi.Js"
    },
    {
        "function": "$arrayMap",
        "description": "$arrayMap will create a map with the given array.",
        "usage": "$arrayMap[name;awaitedCommand;separator?;awaitData?]",
        "parameters": [
            {
                "field": "name",
                "type": "string",
                "description": "Array name.",
                "required": true
            },
            {
                "field": "awaitedCommand",
                "type": "string",
                "description": "Awaited command to executed.",
                "required": true
            },
            {
                "field": "separator",
                "type": "string",
                "description": "Separator.",
                "required": false
            },
            {
                "field": "awaitData",
                "type": "string",
                "description": "Awaited Data.",
                "required": false
            }
        ],
        "example": null,
        "tip": null,
        "documentation": "https://aoi.js.org/functions/arraymap",
        "source": "https://github.com/aoijs/aoi.js/tree/v6/src/functions/array/arrayMap.js",
        "type": "Aoi.Js"
    },
    {
        "function": "$arrayPop",
        "description": "$arrayPop will return the last item of the given array.",
        "usage": "$arrayPop[name]",
        "parameters": [
            {
                "field": "name",
                "type": "string",
                "description": "Array name.",
                "required": true
            }
        ],
        "example": "```javascript\nclient.command({\n    name: \"array-pop\",\n    code: `\n  $arrayPop[array]\n  $createArray[array;aoi.js;akarui;documents;bot]\n  `\n});\n```",
        "tip": null,
        "documentation": "https://aoi.js.org/functions/arraypop",
        "source": "https://github.com/aoijs/aoi.js/tree/v6/src/functions/array/arrayPop.js",
        "type": "Aoi.Js"
    },
    {
        "function": "$arrayPush",
        "description": "$arrayPush will add given elements to the array.",
        "usage": "$arrayPush[name;...elements]",
        "parameters": [
            {
                "field": "name",
                "type": "string",
                "description": "Name of the array.",
                "required": true
            },
            {
                "field": "...elements",
                "type": "string",
                "description": "Elements to add.",
                "required": true
            }
        ],
        "example": "```javascript\nclient.command({\n    name: \"array-push\",\n    code: `\n  $arrayPush[array;Leref;Ayaka;Ferel]\n  $createArray[array;aoi.js;akarui;documents;bot]\n  `\n});\n```",
        "tip": null,
        "documentation": "https://aoi.js.org/functions/arraypush",
        "source": "https://github.com/aoijs/aoi.js/tree/v6/src/functions/array/arrayPush.js",
        "type": "Aoi.Js"
    },
    {
        "function": "$arrayReverse",
        "description": "$arrayReverse will reverse the elements in the given array.",
        "usage": "$arrayReverse[name]",
        "parameters": [
            {
                "field": "name",
                "type": "string",
                "description": "Array name.",
                "required": true
            }
        ],
        "example": "```javascript\nclient.command({\n    name: \"array-reverse\",\n    code: `\n  $arrayReverse[array]\n  $createArray[array;aoi.js;akarui;documents;bot]\n  `\n});\n```",
        "tip": null,
        "documentation": "https://aoi.js.org/functions/arrayreverse",
        "source": "https://github.com/aoijs/aoi.js/tree/v6/src/functions/array/arrayReverse.js",
        "type": "Aoi.Js"
    },
    {
        "function": "$arrayShift",
        "description": "$arrayShift will return the first item of the given array.",
        "usage": "$arrayShift[name]",
        "parameters": [
            {
                "field": "name",
                "type": "string",
                "description": "Array name.",
                "required": true
            }
        ],
        "example": "```javascript\nclient.command({\n    name: \"array-shift\",\n    code: `\n  $arrayShift[array]\n  $createArray[array;aoi.js;akarui;documents;bot]\n  `\n});\n```",
        "tip": null,
        "documentation": "https://aoi.js.org/functions/arrayshift",
        "source": "https://github.com/aoijs/aoi.js/tree/v6/src/functions/array/arrayShift.js",
        "type": "Aoi.Js"
    },
    {
        "function": "$arrayShuffle",
        "description": "$arrayShuffle will shuffle the elements of the given array.",
        "usage": "$arrayShuffle[name]",
        "parameters": [
            {
                "field": "name",
                "type": "string",
                "description": "Array name.",
                "required": true
            }
        ],
        "example": "```javascript\nclient.command({\n    name: \"array-shuffle\",\n    code: `\n  $arrayJoin[array;, ]\n  $arrayShuffle[array]\n  $createArray[array;aoi.js;akarui;documents;bot]\n  `\n});\n```",
        "tip": null,
        "documentation": "https://aoi.js.org/functions/arrayshuffle",
        "source": "https://github.com/aoijs/aoi.js/tree/v6/src/functions/array/arrayShuffle.js",
        "type": "Aoi.Js"
    },
    {
        "function": "$arraySome",
        "description": "$arraySome will check for given elements in the array.",
        "usage": "$arraySome[name;query;queryType?]",
        "parameters": [
            {
                "field": "name",
                "type": "string",
                "description": "Array name.",
                "required": true
            },
            {
                "field": "query",
                "type": "string",
                "description": "The element we will be queering for every element inside the array.",
                "required": true
            },
            {
                "field": "queryType",
                "type": "string",
                "description": "The comparison operator.",
                "required": false
            }
        ],
        "example": "```javascript\nclient.command({\n    name: \"array-some\",\n    code: `\n  $arraySome[array;aoi.js;==]\n  $createArray[array;aoi.js;akarui;documents;bot]\n  `\n});\n```",
        "tip": null,
        "documentation": "https://aoi.js.org/functions/arraysome",
        "source": "https://github.com/aoijs/aoi.js/tree/v6/src/functions/array/arraySome.js",
        "type": "Aoi.Js"
    },
    {
        "function": "$arraySort",
        "description": "$arraySort will sort a given array.",
        "usage": "$arraySort[name;type?]",
        "parameters": [
            {
                "field": "name",
                "type": "string",
                "description": "Array name.",
                "required": true
            },
            {
                "field": "type",
                "type": "string",
                "description": "Type to sort after \n1. **asc** (ascending) 2. **dsc** (descending)",
                "required": true
            }
        ],
        "example": "```javascript\nclient.command({\n    name: \"array-sort\",\n    code: `\n  $arrayJoin[array;, ]\n  $arraySort[array;asc]\n  $createArray[array;aoi.js;akarui;documents;bot]\n  `\n});\n```",
        "tip": null,
        "documentation": "https://aoi.js.org/functions/arraysort",
        "source": "https://github.com/aoijs/aoi.js/tree/v6/src/functions/array/arraySort.js",
        "type": "Aoi.Js"
    },
    {
        "function": "$arraySplice",
        "description": "$arraySplice will splice elements from the array.",
        "usage": "$arraySplice[name;index;amount;...elements]",
        "parameters": [
            {
                "field": "name",
                "type": "string",
                "description": "Array name.",
                "required": true
            },
            {
                "field": "index",
                "type": "number",
                "description": "Index of the element.",
                "required": true
            },
            {
                "field": "amount",
                "type": "number",
                "description": "Amount to splice.",
                "required": true
            },
            {
                "field": "...elements",
                "type": "string",
                "description": "Elements to splice.",
                "required": true
            }
        ],
        "example": "```javascript\nclient.command({\n    name: \"array-splice\",\n    code: `\n  $arraySplice[array;2;3]\n  $createArray[array;aoi.js;akarui;documents;bot]\n  `\n});\n```",
        "tip": null,
        "documentation": "https://aoi.js.org/functions/arraysplice",
        "source": "https://github.com/aoijs/aoi.js/tree/v6/src/functions/array/arraySplice.js",
        "type": "Aoi.Js"
    },
    {
        "function": "$arrayUnshift",
        "description": "$arrayUnshift will return the amount of elements of the given array.",
        "usage": "$arrayUnshift[name]",
        "parameters": [
            {
                "field": "name",
                "type": "string",
                "description": "Array name.",
                "required": true
            }
        ],
        "example": "```javascript\nclient.command({\n    name: \"array-unshift\",\n    code: `\n  $arrayUnshift[array]\n  $createArray[array;aoi.js;akarui;documents;bot]\n  `\n});\n```",
        "tip": null,
        "documentation": "https://aoi.js.org/functions/arrayunshift",
        "source": "https://github.com/aoijs/aoi.js/tree/v6/src/functions/array/arrayUnshift.js",
        "type": "Aoi.Js"
    },
    {
        "function": "$attachment",
        "description": "$attachment will create an attachment.",
        "usage": "$attachment[attachment;name;type?;encoding?]",
        "parameters": [
            {
                "field": "attachment",
                "type": "string",
                "description": "Content of the attachment, preferably a URL.",
                "required": true
            },
            {
                "field": "name",
                "type": "string",
                "description": "Attachment name.",
                "required": true
            },
            {
                "field": "type",
                "type": "string",
                "description": "Attachment type. 1. **URL** (default)",
                "required": false
            },
            {
                "field": "encoding",
                "type": "string",
                "description": "Encoding to use. (e.g., \"utf-8\", \"base64\").",
                "required": false
            }
        ],
        "example": "This will create an attachment:\n\n```javascript\nclient.command({\n    name: \"attachment\",\n    code: `\n  $attachment[https://cdn.discordapp.com/emojis/1063432790697328710.webp?size=96&quality=lossless;boost-icon.png;URL]\n  `\n});\n```",
        "tip": null,
        "documentation": "https://aoi.js.org/functions/attachment",
        "source": "https://github.com/aoijs/aoi.js/tree/v6/src/functions/misc/attachment.js",
        "type": "Aoi.Js"
    },
    {
        "function": "$author",
        "description": "$author will add an author field to an embed.",
        "usage": "$author[index?;name;iconURL?]",
        "parameters": [
            {
                "field": "index",
                "type": "number",
                "description": "Embed index.",
                "required": false
            },
            {
                "field": "name",
                "type": "string",
                "description": "Author title that will be displayed.",
                "required": true
            },
            {
                "field": "iconURL",
                "type": "string",
                "description": "Icon URL which will be displayed next to the author title.",
                "required": false
            }
        ],
        "example": "This will create an embed with description and author title:\n\n```javascript\nclient.command({\n    name: \"author\",\n    code: `\n  $author[Hello!;$userAvatar[$authorID]]\n  $description[Embed with author!]\n  `\n});\n```",
        "tip": null,
        "documentation": "https://aoi.js.org/functions/author",
        "source": "https://github.com/aoijs/aoi.js/tree/v6/src/functions/misc/author.js",
        "type": "Aoi.Js"
    },
    {
        "function": "$authorAvatar",
        "description": "$authorAvatar will return the profile picture of the command author.",
        "usage": "$authorAvatar[size?;dynamic?;format?]",
        "parameters": [
            {
                "field": "size",
                "type": "string",
                "description": "The size of the image",
                "required": false
            },
            {
                "field": "dynamic",
                "type": "boolean",
                "description": "1. **true** (default) \n2. **false**",
                "required": false
            },
            {
                "field": "format",
                "type": "string",
                "description": "The format of the returned image.",
                "required": false
            }
        ],
        "example": "This will return your profile picture:\n\n```javascript\nclient.command({\n    name: \"authorAvatar\",\n    code: `\n  $authorAvatar[2048;true;webp]\n  `\n});\n```",
        "tip": null,
        "documentation": "https://aoi.js.org/functions/authoravatar",
        "source": "https://github.com/aoijs/aoi.js/tree/v6/src/functions/misc/authorAvatar.js",
        "type": "Aoi.Js"
    },
    {
        "function": "$authorBanner",
        "description": "$authorBanner will return the banner of the command author.",
        "usage": "$authorBanner[size?;dynamic?;extension?]",
        "parameters": [
            {
                "field": "size",
                "type": "string",
                "description": "The size of the image",
                "required": false
            },
            {
                "field": "dynamic",
                "type": "boolean",
                "description": "1. **true** (default) \n2. **false**",
                "required": false
            },
            {
                "field": "extension",
                "type": "string",
                "description": "The format of the returned image.",
                "required": false
            }
        ],
        "example": "This will return your banner (if any):\n\n```javascript\nclient.command({\n    name: \"authorBanner\",\n    code: `\n  $authorBanner[2048;true;webp]\n  `\n});\n```",
        "tip": null,
        "documentation": "https://aoi.js.org/functions/authorbanner",
        "source": "https://github.com/aoijs/aoi.js/tree/v6/src/functions/misc/authorBanner.js",
        "type": "Aoi.Js"
    },
    {
        "function": "$authorBannerColor",
        "description": "$authorBannerColor will return the profile banner color of the command author.",
        "usage": "$authorBannerColor",
        "parameters": [],
        "example": "This will return your profile banner color (if any):\n\n```javascript\nclient.command({\n    name: \"userBanner\",\n    code: `\n  $authorBannerColor\n  `\n});\n```",
        "tip": null,
        "documentation": "https://aoi.js.org/functions/authorbannercolor",
        "source": "https://github.com/aoijs/aoi.js/tree/v6/src/functions/misc/authorBannerColor.js",
        "type": "Aoi.Js"
    },
    {
        "function": "$authorID",
        "description": "$authorID will return user ID of who executed the command.",
        "usage": "$authorID",
        "parameters": [],
        "example": "This will return your user ID:\n\n```javascript\nclient.command({\n    name: \"authorID\",\n    code: `\n  $authorID\n  `\n});\n```",
        "tip": null,
        "documentation": "https://aoi.js.org/functions/authorid",
        "source": "https://github.com/aoijs/aoi.js/tree/v6/src/functions/misc/authorID.js",
        "type": "Aoi.Js"
    },
    {
        "function": "$autoCompleteRespond",
        "description": "$autoCompleteRespond is used to auto-complete slash options.",
        "usage": "$autoCompleteRespond[object]",
        "parameters": [
            {
                "field": "OptionName",
                "type": "string",
                "description": "Name of the auto-complete option that will be displayed to the user.",
                "required": true
            },
            {
                "field": "OptionReply",
                "type": "string",
                "description": "The reply that will be sent if the auto-complete option was selected, (not visible to the user).",
                "required": true
            }
        ],
        "example": "Create the slash-commands: (please note that you require the `events: [\"onMessage\", \"onInteractionCreate\"]` event in\nyour main file)\n\n```javascript\nclient.command({\n    name: \"createSlashCommand\",\n    code: `\n  $createApplicationCommand[global;example;Awesome example interaction command with auto-complete!;true;true;slash;[{\n  \"name\": \"option\",\n  \"description\": \"test\",\n  \"required\": false,\n  \"type\": 3,\n  \"autocomplete\": true\n}]\n  `\n});\n```\n\nInteraction Command:\n\n```javascript\nclient.command({\n    name: \"test\",\n    prototype: \"slash\",\n    code: `\n  $if[$isAutocomplete==true]\n  $autoCompleteRespond[First option;You selected the first option, therefore I'm responding with this!;Second option;You selected the first second, therefore I'm responding with this!]\n  $else\n  $interactionReply[$slashOption[option]]\n  $endif\n  `\n});\n```\n\n### Advanced Example\n\nCreate the slash-commands: (please note that you require the `events: [\"onMessage\", \"onInteractionCreate\"]` event in\nyour main file)\n\n```javascript\nclient.command({\n    name: \"createSlashCommand\",\n    code: `\n  $createApplicationCommand[global;example;Awesome example interaction command with auto-complete!;true;true;slash;[{\n  \"name\": \"option\",\n  \"description\": \"test\",\n  \"required\": false,\n  \"type\": 3,\n  \"autocomplete\": true\n}, {\n  \"name\": \"anotheroption\",\n  \"description\": \"test\",\n  \"required\": false,\n  \"type\": 3\n}]\n  `\n});\n```\n\nInteraction Command:\n\n```javascript\nclient.command({\n    name: \"test\",\n    prototype: \"slash\",\n    $if: \"old\",\n    code: `\n  $if[$isAutocomplete==true]\n  $autoCompleteRespond[[{ \n    \"name\" : \"First Option\",\n    \"value\" : \"You selected the first option, therefore I\\'m responding with this!\"\n  }, {\n    \"name\" : \"Second Option\",\n    \"value\" : \"You selected the second option, therefore I\\'m responding with this!\"\n  }]]\n  $else\n  $interactionReply[$slashOption[option]]\n  $endif\n  `\n});\n```",
        "tip": null,
        "documentation": "https://aoi.js.org/functions/autocompleterespond",
        "source": "https://github.com/aoijs/aoi.js/tree/v6/src/functions/misc/autoCompleteRespond.js",
        "type": "Aoi.Js"
    },
    {
        "function": "$awaitCmdReactions",
        "description": "$awaitCmdReactions will respond when a user reacts to the initial command message with a specific emoji.",
        "usage": "$awaitCmdReactions[userFilter;time;reactions;commands;errorMsg?;awaitData?]",
        "parameters": [
            {
                "field": "userFilter",
                "type": "string",
                "description": "To what the bot will reply \n1. **everyone** \n2. **specific user ID** - any user ID",
                "required": true
            },
            {
                "field": "time",
                "type": "string",
                "description": "How long the command will last / when the command expires.",
                "required": true
            },
            {
                "field": "reactions",
                "type": "string",
                "description": "Reactions the bot will be listening to, you can separate multiple emojis with a comma ( `` )",
                "required": true
            },
            {
                "field": "commands",
                "type": "string",
                "description": "Commands that will be executed, you can separate multiple emojis with a comma ( `` )",
                "required": true
            },
            {
                "field": "errorMsg",
                "type": "string",
                "description": "Error message when command expires.",
                "required": false
            },
            {
                "field": "awaitData",
                "type": "string",
                "description": "Awaited Data.",
                "required": false
            }
        ],
        "example": "This will reply to you when you react with the \"❤️\" emoji to your initial command message:\n\n```js\nclient.command({\n    name: \"awaitCmdReaction\",\n    code: `\n  React with \"❤️\" for a surprise! \n  $awaitCmdReactions[$authorID;10s;❤️;awaitedCommandExample;Whoops! You didn't react in time..]\n  `\n});\n\nclient.awaitedCommand({\n    name: \"awaitedCommandExample\",\n    code: `\n  Nice, you reacted with ❤️.\n  `\n});\n```",
        "tip": null,
        "documentation": "https://aoi.js.org/functions/awaitcmdreactions",
        "source": "https://github.com/aoijs/aoi.js/tree/v6/src/functions/components/awaitCmdReactions.js",
        "type": "Aoi.Js"
    },
    {
        "function": "$awaitComponents",
        "description": "$awaitComponents awaits components for given amount of uses.",
        "usage": "$awaitComponents[channelID;messageID;userFilter;customIDs;commands;awaitedCmd;uses?;time]",
        "parameters": [
            {
                "field": "channelID",
                "type": "number",
                "description": "Channel ID of the message where it will be awaited.",
                "required": true
            },
            {
                "field": "messageID",
                "type": "number",
                "description": "The ID of the message that will be awaited.",
                "required": true
            },
            {
                "field": "userFilter",
                "type": "string",
                "description": "Users who can use the interaction. \n1. **everyone** \n2. **specific user ID** - any user ID.",
                "required": true
            },
            {
                "field": "customID",
                "type": "number",
                "description": "Custom IDs that will be awaited, use `,` for multiple custom IDs.",
                "required": true
            },
            {
                "field": "commands",
                "type": "string",
                "description": "The new interaction names to be used in interaction commands for the awaited customIDs, use `,` for multiple awaited commands.",
                "required": true
            },
            {
                "field": "awaitedCmd",
                "type": "string",
                "description": "Awaited command to execute if time ran out.",
                "required": true
            },
            {
                "field": "uses",
                "type": "number",
                "description": "The times the awaited interactions can be used (default `1`).",
                "required": false
            },
            {
                "field": "time",
                "type": "string",
                "description": "The duration for which the interaction can be used.",
                "required": true
            }
        ],
        "example": "This will send a message with a button. It will wait for 30 seconds for the button to be clicked only once, `examplebuttonresults` will be executed if the button has been clicked before the time runs out, otherwise `errormessage` will be executed:\n\n```js\nclient.command({\n    name: \"awaitComponents\",\n    code: `$awaitComponents[$channelID;$get[messageID];$authorID;examplebutton;examplebuttonresults;errormessage;1;30s]\n  $let[messageID;$sendMessage[Please click on the button.{actionRow:{button:Random Button:2:examplebutton:false}};true]]`\n});\n\nclient.interactionCommand({\n    name: \"examplebuttonresults\",\n    prototype: \"button\",\n    code: `$interactionReply[You clicked the button!]`\n});\n\nclient.awaitedCommand({\n    name: \"errormessage\",\n    code: `$editMessage[$get[messageID];Too late! Time has ran out!{actionRow:{button:Random Button:2:examplebutton:true}};$channelID]`\n});\n```",
        "tip": null,
        "documentation": "https://aoi.js.org/functions/awaitcomponents",
        "source": "https://github.com/aoijs/aoi.js/tree/v6/src/functions/components/awaitComponents.js",
        "type": "Aoi.Js"
    },
    {
        "function": "$awaitComponentsUntil",
        "description": "$awaitComponentsUntil awaits components for given amount of time.",
        "usage": "$awaitComponentsUntil[channelID;messageID;userFilter;customIDs;commands;awaitedCmd;time]",
        "parameters": [
            {
                "field": "channelID",
                "type": "number",
                "description": "Channel ID of the message where it will be awaited.",
                "required": true
            },
            {
                "field": "messageID",
                "type": "number",
                "description": "The ID of the message that will be awaited.",
                "required": true
            },
            {
                "field": "userFilter",
                "type": "string",
                "description": "Users who can use the interaction. \n1. **everyone** \n2. **specific user ID** - any user ID.",
                "required": true
            },
            {
                "field": "customID",
                "type": "number",
                "description": "Custom IDs that will be awaited, use `,` for multiple custom IDs.",
                "required": true
            },
            {
                "field": "commands",
                "type": "string",
                "description": "The new interaction names to be used in interaction commands for the awaited customIDs, use `,` for multiple awaited commands.",
                "required": true
            },
            {
                "field": "awaitedCmd",
                "type": "string",
                "description": "Awaited command to execute if time ran out.",
                "required": true
            },
            {
                "field": "time",
                "type": "string",
                "description": "The duration for which the interaction can be used.",
                "required": true
            }
        ],
        "example": "This will send a message with a button. It will wait for 30 seconds for the button to be clicked, `examplebuttonresults` will be executed if the button has been clicked before the time runs out, otherwise `errormessage` will be executed:\n\n```js\nclient.command({\n    name: \"awaitComponentsUntil\",\n    code: `$awaitComponentsUntil[$channelID;$get[messageID];$authorID;examplebutton;examplebuttonresults;errormessage;30s]\n  $let[messageID;$sendMessage[Please click on the button.{actionRow:{button:Random Button:2:examplebutton:false}};true]]`\n});\n\nclient.interactionCommand({\n    name: \"examplebuttonresults\",\n    prototype: \"button\",\n    code: `$interactionReply[You clicked the button!]`\n});\n\nclient.awaitedCommand({\n    name: \"errormessage\",\n    code: `$editMessage[$get[messageID];Too late! Time has ran out!{actionRow:{button:Random Button:2:examplebutton:true}};$channelID]`\n});\n```",
        "tip": null,
        "documentation": "https://aoi.js.org/functions/awaitcomponentsuntil",
        "source": "https://github.com/aoijs/aoi.js/tree/v6/src/functions/components/awaitComponentsUntil.js",
        "type": "Aoi.Js"
    },
    {
        "function": "$awaitData",
        "description": "$awaitData will return awaited data given in awaited commands.",
        "usage": "$awaitData[name]",
        "parameters": [
            {
                "field": "name",
                "type": "string",
                "description": "Awaited Data Name.",
                "required": true
            }
        ],
        "example": "This will return the ID of every server member and log it in your console:\n\n```javascript\nclient.command({\n    name: \"awaitData\",\n    code: `\n  $forEachMember[1s;{ \"members\": \"$membersCount\" };returnMembers;]\n  `\n});\n\nclient.awaitedCommand({\n    name: \"returnMembers\",\n    code: `\n  $log[ $authorID , is one out of $awaitData[members] members ]\n  `\n});\n```",
        "tip": null,
        "documentation": "https://aoi.js.org/functions/awaitdata",
        "source": "https://github.com/aoijs/aoi.js/tree/v6/src/functions/misc/awaitData.js",
        "type": "Aoi.Js"
    },
    {
        "function": "$awaitExecute",
        "description": "$awaitExecute executes an awaited command.",
        "usage": "$awaitExecute[awaitedCommand]",
        "parameters": [
            {
                "field": "awaitedCommand",
                "type": "string",
                "description": "The awaited command to execute.",
                "required": true
            }
        ],
        "example": "This will execute an awaited command:\n\n```js\nclient.command({\n    name: \"awaitExecute\",\n    code: `\n$awaitExecute[awaited]\n$let[variable;Hello!]\n`\n});\n```\n\n```js\nclient.awaitedCommand({\n    name: \"awaited\",\n    code: `\n$get[variable] // Returns \"Hello!\"\n`\n});\n```",
        "tip": null,
        "documentation": "https://aoi.js.org/functions/awaitexecute",
        "source": "https://github.com/aoijs/aoi.js/tree/v6/src/functions/misc/awaitExecute.js",
        "type": "Aoi.Js"
    },
    {
        "function": "$awaitMessageReactions",
        "description": "$awaitMessageReactions will reply when a user reacts with a specific emoji.",
        "usage": "$awaitMessageReactions[channelID;messageID;userFilter;time;reactions;commands;errorMessage?;awaitData?]",
        "parameters": [
            {
                "field": "channelID",
                "type": "number",
                "description": "Channel ID.",
                "required": true
            },
            {
                "field": "messageID",
                "type": "number",
                "description": "Message ID.",
                "required": true
            },
            {
                "field": "userFilter",
                "type": "string",
                "description": "To what the bot will reply \n1. **everyone** \n2. **specific user ID** - any user ID",
                "required": true
            },
            {
                "field": "time",
                "type": "string",
                "description": "How long the command will last / when the command expires.",
                "required": true
            },
            {
                "field": "reactions",
                "type": "string",
                "description": "Reactions, you can add multiple by separating them with commas ( `` )",
                "required": true
            },
            {
                "field": "commands",
                "type": "string",
                "description": "Commands that will be executed, you can separate multiple emojis with a comma ( `` )",
                "required": true
            },
            {
                "field": "errorMessage",
                "type": "string",
                "description": "Error message when command expires.",
                "required": false
            },
            {
                "field": "awaitData",
                "type": "string",
                "description": "Awaited Data.",
                "required": false
            }
        ],
        "example": "This will reply to you when you react with the \"❤️\" emoji to the bot's message:\n\n```js\nclient.command({\n    name: \"awaitMessageReactions\",\n    code: `\n  React with \"❤️\" for a surprise! \n  $awaitMessageReactions[$channelID;$messageID;$authorID;10s;❤️;awaitedcommandexample;Whoops! You didn't react in time..]\n  `\n});\n\nclient.awaitedCommand({\n    name: \"awaitedcommandexample\",\n    code: `\n  Nice, you reacted with ❤️.\n  `\n});\n```",
        "tip": null,
        "documentation": "https://aoi.js.org/functions/awaitmessagereactions",
        "source": "https://github.com/aoijs/aoi.js/tree/v6/src/functions/components/awaitMessageReactions.js",
        "type": "Aoi.Js"
    },
    {
        "function": "$awaitMessages",
        "description": "$awaitMessages will reply once a given message has been sent by the given user.",
        "usage": "$awaitMessages[channelID;userFilter;time;replies;cmds;errorMessage?;awaitData?;dm?]",
        "parameters": [
            {
                "field": "channelID",
                "type": "number",
                "description": "Channel ID.",
                "required": true
            },
            {
                "field": "userFilter",
                "type": "number",
                "description": "User filter \n1. **everyone** \n2. **specific user** - any user ID",
                "required": true
            },
            {
                "field": "time",
                "type": "string",
                "description": "How long the command lasts / when it expires.",
                "required": true
            },
            {
                "field": "replies",
                "type": "string",
                "description": "To what the bot will be responding to, multiple words can be separated with a comma (or use \"everything\" to respond to everything)",
                "required": true
            },
            {
                "field": "cmds",
                "type": "string",
                "description": "Commands that will be executed, multiple commands can be separated with a comma.",
                "required": true
            },
            {
                "field": "errorMessage",
                "type": "string",
                "description": "Error message when the command expires.",
                "required": false
            },
            {
                "field": "awaitData",
                "type": "string",
                "description": "Awaited Data.",
                "required": false
            },
            {
                "field": "dm",
                "type": "number",
                "description": "User ID of where the command may be executed.",
                "required": false
            }
        ],
        "example": "This will reply to any message you send after executing the command:\n\n```js\nclient.command({\n    name: \"awaitMessages\",\n    code: `\n  $awaitMessages[$channelID;$authorID;15s;everything;awaitedcommandexample;Oh? You don't want to talk to me..?] \n  What's your name?\n  `\n    // Please make sure that the awaitedCommand name is ALL lowercase or else it won't work.\n});\n\nclient.awaitedCommand({\n    name: \"awaitedcommandexample\",\n    code: `\n  Nice to meet you, $message!\n  `\n});\n```",
        "tip": null,
        "documentation": "https://aoi.js.org/functions/awaitmessages",
        "source": "https://github.com/aoijs/aoi.js/tree/v6/src/functions/misc/awaitMessages.js",
        "type": "Aoi.Js"
    },
    {
        "function": "$ban",
        "description": "$ban will ban a user of a given guild.",
        "usage": "$ban[guildID;userID;days?;reason?]",
        "parameters": [
            {
                "field": "guildID",
                "type": "number",
                "description": "From which guild the user should be banned from.",
                "required": true
            },
            {
                "field": "userID",
                "type": "number",
                "description": "The user to ban.",
                "required": true
            },
            {
                "field": "days",
                "type": "string",
                "description": "Days of message history to delete, cannot be higher than 7 days",
                "required": false
            },
            {
                "field": "reason",
                "type": "string",
                "description": "The reason that will be displayed in the guild's audit logs.",
                "required": false
            }
        ],
        "example": "This will ban a random user of your guild:\n\n```javascript\nclient.command({\n    name: \"ban\",\n    code: `\n  $ban[$guildID;$randomUserID;7;Imagine getting banned.]\n  `\n});\n```",
        "tip": null,
        "documentation": "https://aoi.js.org/functions/ban",
        "source": "https://github.com/aoijs/aoi.js/tree/v6/src/functions/guild/ban.js",
        "type": "Aoi.Js"
    },
    {
        "function": "$banCount",
        "description": "$banCount will return the amount of banned users of a specific guild.",
        "usage": "$banCount[guildID?]",
        "parameters": [
            {
                "field": "guildID",
                "type": "number",
                "description": "Guild ID of the guild you want to retrieve the amount of banned users from.",
                "required": false
            }
        ],
        "example": "This will return the amount of banned users in your guild:\n\n```javascript\nclient.command({\n    name: \"banCount\",\n    code: `\n  $banCount\n  `\n});\n```",
        "tip": null,
        "documentation": "https://aoi.js.org/functions/bancount",
        "source": "https://github.com/aoijs/aoi.js/tree/v6/src/functions/guild/banCount.js",
        "type": "Aoi.Js"
    },
    {
        "function": "$boostingSince",
        "description": "$boostingSince will return the starting date of someone boosting a specific guild.",
        "usage": "$boostingSince[guildID?;userID?;format?]",
        "parameters": [
            {
                "field": "guildID",
                "type": "number",
                "description": "The ID of the guild of where you want to check how long someone's been boosting.",
                "required": false
            },
            {
                "field": "userID",
                "type": "number",
                "description": "The user ID you want to check the boosting start date of.",
                "required": false
            },
            {
                "field": "format",
                "type": "string",
                "description": "The format that the date will be returned in, listed below.",
                "required": false
            }
        ],
        "example": "This will return the date when you started boosting (wont work when you're not boosting):\n\n```javascript\nclient.command({\n    name: \"boostingSince\",\n    code: `\n  $boostingSince[$guildID;$authorID;date]\n  `\n});\n```",
        "tip": null,
        "documentation": "https://aoi.js.org/functions/boostingsince",
        "source": "https://github.com/aoijs/aoi.js/tree/v6/src/functions/guild/boostingSince.js",
        "type": "Aoi.Js"
    },
    {
        "function": "$broadcastEval",
        "description": "$broadcastEval will execute a code in all guilds of all shards.",
        "usage": "$broadcastEval[function]",
        "parameters": [
            {
                "field": "function",
                "type": "string",
                "description": "Function or code that will be executed.",
                "required": true
            }
        ],
        "example": "**Requires Sharding - Review the Sharding Guide if you need explanation**\n\nThis will return the amount of servers your bot is in:\n\n```javascript\nclient.command({\n    name: \"broadcastEval\",\n    code: `\n  $broadcastEval[$guildCount]\n  `\n});\n```",
        "tip": null,
        "documentation": "https://aoi.js.org/functions/broadcasteval",
        "source": "https://github.com/aoijs/aoi.js/tree/v6/src/functions/misc/broadcastEval.js",
        "type": "Aoi.Js"
    },
    {
        "function": "$bulk",
        "description": "$bulk will hold data for the bulk delete command. (messageDeleteBulk event)",
        "usage": "$bulk[option]",
        "parameters": [
            {
                "field": "option",
                "type": "string",
                "description": "Option to retrieve. \n1. **messages** \n2. **ids** \n3. **createdTimestamp** \n4. **createdAt** \n5. **userIds** \n6. **usernames** \n7. **userMentions** \n8. **guildID** \n9. **guildName** \n10. **channelID** \n11. **channelName**",
                "required": true
            }
        ],
        "example": null,
        "tip": null,
        "documentation": "https://aoi.js.org/functions/bulk",
        "source": "https://github.com/aoijs/aoi.js/tree/v6/src/functions/misc/bulk.js",
        "type": "Aoi.Js"
    },
    {
        "function": "$cacheMembers",
        "description": "$cacheMembers will cache all members of a guild.",
        "usage": "$cacheMembers[guildID?;returnCount?]",
        "parameters": [
            {
                "field": "guildID",
                "type": "number",
                "description": "Of which guild the members shall be cached from.",
                "required": false
            },
            {
                "field": "returnCount",
                "type": "boolean",
                "description": "Returns the cached member count. \n1. **true** \n2. **false** (default)",
                "required": false
            }
        ],
        "example": "This will cache all members of the current guild and return the amount of the cached members:\n\n```javascript\nclient.command({\n    name: \"cacheMembers\",\n    code: `\n  $cacheMembers[$guildID;true]\n  `\n});\n```",
        "tip": null,
        "documentation": "https://aoi.js.org/functions/cachemembers",
        "source": "https://github.com/aoijs/aoi.js/tree/v6/src/functions/guild/cacheMembers.js",
        "type": "Aoi.Js"
    },
    {
        "function": "$categoryChannels",
        "description": "$categoryChannels will return all channels of a given category.",
        "usage": "$categoryChannels[categoryID;option?;sep?]",
        "parameters": [
            {
                "field": "categoryID",
                "type": "number",
                "description": "The ID of the category.",
                "required": true
            },
            {
                "field": "option",
                "type": "string",
                "description": "The option the bot will return the channels in. \n1. **names** - returns channel names (default) \n2. **ids** - returns channel IDs",
                "required": false
            },
            {
                "field": "sep",
                "type": "string",
                "description": "The separator to separate the returned channels.",
                "required": false
            }
        ],
        "example": "This will return all channels of the category of the channel where you execute the command in:\n\n```javascript\nclient.command({\n    name: \"categoryChannels\",\n    code: `\n  $categoryChannels[$channelCategoryID;names;, ]\n  `\n});\n```",
        "tip": null,
        "documentation": "https://aoi.js.org/functions/categorychannels",
        "source": "https://github.com/aoijs/aoi.js/tree/v6/src/functions/guild/categoryChannels.js",
        "type": "Aoi.Js"
    },
    {
        "function": "$ceil",
        "description": "$ceil rounds the number UP to the nearest integer.",
        "usage": "$ceil[number]",
        "parameters": [
            {
                "field": "number",
                "type": "number",
                "description": "The number that will be rounded up.",
                "required": true
            }
        ],
        "example": "This will round `1.1` up to `2`:\n\n```js\nclient.command({\n    name: \"ceil\",\n    code: `$ceil[1.1]`\n});\n```",
        "tip": null,
        "documentation": "https://aoi.js.org/functions/ceil",
        "source": "https://github.com/aoijs/aoi.js/tree/v6/src/functions/math/ceil.js",
        "type": "Aoi.Js"
    },
    {
        "function": "$channelCategoryID",
        "description": "$channelCategoryID will return the parent of a specific channel.",
        "usage": "$channelCategoryID[channelID?]",
        "parameters": [
            {
                "field": "channelID",
                "type": "number",
                "description": "ID of a channel of which you want to retrieve its parent of.",
                "required": false
            }
        ],
        "example": "This will return the category ID of the text channel in where you execute the command:\n\n```javascript\nclient.command({\n    name: \"channelCategoryID\",\n    code: `\n  $channelCategoryID[$channelID]\n  `\n});\n```",
        "tip": null,
        "documentation": "https://aoi.js.org/functions/channelcategoryid",
        "source": "https://github.com/aoijs/aoi.js/tree/v6/src/functions/guild/channelCategoryID.js",
        "type": "Aoi.Js"
    },
    {
        "function": "$channelCooldown",
        "description": "$channelCooldown will set a cooldown bound to a specific channel after execution of the command.",
        "usage": "$channelCooldown[time;errorMessage]",
        "parameters": [
            {
                "field": "time",
                "type": "string",
                "description": "Timer of the cooldown",
                "required": true
            },
            {
                "field": "errorMessage",
                "type": "string",
                "description": "Error message when given cooldown timer is still active.",
                "required": false
            }
        ],
        "example": "This will set a cooldown for a command in the channel where the command was executed in and returns the remaining\ncooldown:\n\n```javascript\nclient.command({\n    name: \"channelCooldown\",\n    code: `\n  hello\n  $channelCooldown[2m;Please wait %time% to execute this command again.]\n  `\n});\n```",
        "tip": null,
        "documentation": "https://aoi.js.org/functions/channelcooldown",
        "source": "https://github.com/aoijs/aoi.js/tree/v6/src/functions/guild/channelCooldown.js",
        "type": "Aoi.Js"
    },
    {
        "function": "$channelCount",
        "description": "$channelCount will return the amount of channels of a given type.",
        "usage": "$channelCount[guildID?;type?]",
        "parameters": [
            {
                "field": "guildID",
                "type": "number",
                "description": "ID of the guild where the channels will be counted from.",
                "required": false
            },
            {
                "field": "type",
                "type": "string",
                "description": "Type you want the amount of to be returned, listed below.",
                "required": false
            }
        ],
        "example": "This will return the amount of Voice Channels in your guild:\n\n```javascript\nclient.command({\n    name: \"channelCount\",\n    code: `\n  $channelCount[$guildID;Voice]\n  `\n});\n```",
        "tip": null,
        "documentation": "https://aoi.js.org/functions/channelcount",
        "source": "https://github.com/aoijs/aoi.js/tree/v6/src/functions/guild/channelCount.js",
        "type": "Aoi.Js"
    },
    {
        "function": "$channelExists",
        "description": "$channelExists will check if the given channel exists.",
        "usage": "$channelExists[channel]",
        "parameters": [
            {
                "field": "channel",
                "type": "string",
                "description": "Channel ID or channel name.",
                "required": true
            }
        ],
        "example": "This will check if a channel with the name `general` exists, alternatively you could use the channel ID instead:\n\n```javascript\nclient.command({\n    name: \"channelExists\",\n    code: `\n  $channelExists[general]\n  `\n});\n```",
        "tip": null,
        "documentation": "https://aoi.js.org/functions/channelexists",
        "source": "https://github.com/aoijs/aoi.js/tree/v6/src/functions/guild/channelExists.js",
        "type": "Aoi.Js"
    },
    {
        "function": "$channelID",
        "description": "$channelID will return the channel ID of the given channel name.",
        "usage": "$channelID[name?]",
        "parameters": [
            {
                "field": "name",
                "type": "number",
                "description": "Channel name of the channel you want the channel ID of.",
                "required": false
            }
        ],
        "example": "This will return the channel ID of the channel where you execute the command in:\n\n```javascript\nclient.command({\n    name: \"channelID\",\n    code: `\n  $channelID\n  `\n});\n```",
        "tip": null,
        "documentation": "https://aoi.js.org/functions/channelid",
        "source": "https://github.com/aoijs/aoi.js/tree/v6/src/functions/guild/channelID.js",
        "type": "Aoi.Js"
    },
    {
        "function": "$channelLastMessageID",
        "description": "$channelLastMessageID will return the last message ID sent in the channel, if one was sent.",
        "usage": "$channelLastMessageID[channelID?]",
        "parameters": [
            {
                "field": "channelID",
                "type": "number",
                "description": "The ID of the channel.",
                "required": false
            }
        ],
        "example": "This will return the last message ID sent in the channel, if one was sent:\n\n```js\nclient.command({\n    name: \"channelLastMessageID\",\n    code: `$channelLastMessageID[$channelID]`\n});\n```",
        "tip": null,
        "documentation": "https://aoi.js.org/functions/channellastmessageid",
        "source": "https://github.com/aoijs/aoi.js/tree/v6/src/functions/guild/channelLastMessageID.js",
        "type": "Aoi.Js"
    },
    {
        "function": "$channelLastPinTimestamp",
        "description": "$channelLastPinTimestamp will return the timestamp when the last pinned message was pinned, if there was one.",
        "usage": "$channelLastPinTimestamp[channelID?]",
        "parameters": [
            {
                "field": "channelID",
                "type": "number",
                "description": "The ID of the channel.",
                "required": false
            }
        ],
        "example": "This will return the timestamp when the last pinned message was pinned on the current channel, if there was one:\n\n```js\nclient.command({\n    name: \"channelLastPinTimestamp\",\n    code: `$channelLastPinTimestamp[$channelID]`\n});\n```",
        "tip": null,
        "documentation": "https://aoi.js.org/functions/channellastpintimestamp",
        "source": "https://github.com/aoijs/aoi.js/tree/v6/src/functions/guild/channelLastPinTimestamp.js",
        "type": "Aoi.Js"
    },
    {
        "function": "$channelNSFW",
        "description": "$channelNSFW will return true or false depending if the given channel is marked as NSFW or not.",
        "usage": "$channelNSFW[channelID?]",
        "parameters": [
            {
                "field": "channelID",
                "type": "number",
                "description": "ID of the channel you want to check whether it's marked as NSFW or not.",
                "required": false
            }
        ],
        "example": "This will return either `true` or `false` depending on if the channel where you execute the command is marked as NSFW or\nnot:\n\n```javascript\nclient.command({\n    name: \"channelNSFW\",\n    code: `\n  $channelNSFW[$channelID]\n  `\n});\n```",
        "tip": null,
        "documentation": "https://aoi.js.org/functions/channelnsfw",
        "source": "https://github.com/aoijs/aoi.js/tree/v6/src/functions/guild/channelNSFW.js",
        "type": "Aoi.Js"
    },
    {
        "function": "$channelName",
        "description": "$channelName will return the given channel's name.",
        "usage": "$channelName[channelID?]",
        "parameters": [
            {
                "field": "channelID",
                "type": "number",
                "description": "Channel ID of the channel you want the channel name of.",
                "required": false
            }
        ],
        "example": "This will return the channel name of the channel where you executed the command in:\n\n```javascript\nclient.command({\n    name: \"channelName\",\n    code: `\n  $channelName[$channelID]\n  `\n});\n```",
        "tip": null,
        "documentation": "https://aoi.js.org/functions/channelname",
        "source": "https://github.com/aoijs/aoi.js/tree/v6/src/functions/guild/channelName.js",
        "type": "Aoi.Js"
    },
    {
        "function": "$channelOverwrites",
        "description": "$channelOverwrites will return the given channel's overwrites.",
        "usage": "$channelOverwrites[channelID?;response?;sep?]",
        "parameters": [
            {
                "field": "channelID",
                "type": "number",
                "description": "ID of the channel you want the channel overwrites of.",
                "required": false
            },
            {
                "field": "response",
                "type": "string",
                "description": "The format the channel overwrites will be returned in.",
                "required": false
            },
            {
                "field": "sep",
                "type": "string",
                "description": "The separator to split the channel overwrites if there are multiple.",
                "required": false
            }
        ],
        "example": "This will return the channel overwrites of the channel where you execute the command in:\n\n```javascript\nclient.command({\n    name: \"channelOverwrites\",\n    code: `\n  $channelOverwrites[$channelID;{mention} {type} {allow} {deny};, ]\n  `\n});\n```",
        "tip": null,
        "documentation": "https://aoi.js.org/functions/channeloverwrites",
        "source": "https://github.com/aoijs/aoi.js/tree/v6/src/functions/guild/channelOverwrites.js",
        "type": "Aoi.Js"
    },
    {
        "function": "$channelPermissionsFor",
        "description": "$channelPermissionsFor will return the channel permissions of a specific user or role.",
        "usage": "$channelPermissionsFor[userOrRoleID?;channelID?;sep?]",
        "parameters": [
            {
                "field": "userOrRoleID",
                "type": "number",
                "description": "The user or role ID whose permissions shall be returned.",
                "required": true
            },
            {
                "field": "channelID",
                "type": "number",
                "description": "The channel ID of the channel of which the permissions should be returned of.",
                "required": true
            },
            {
                "field": "sep",
                "type": "string",
                "description": "The separator which will be used to separate the permissions, by default \",\".",
                "required": false
            }
        ],
        "example": "This will return your permissions in the channel where you execute the command:\n\n```javascript\nclient.command({\n    name: \"channelPermissionsFor\",\n    code: `\n  $channelPermissionsFor[$authorID;$channelID;, ]\n  `\n});\n```",
        "tip": null,
        "documentation": "https://aoi.js.org/functions/channelpermissionsfor",
        "source": "https://github.com/aoijs/aoi.js/tree/v6/src/functions/guild/channelPermissionsFor.js",
        "type": "Aoi.Js"
    },
    {
        "function": "$channelPosition",
        "description": "$channelPosition will return the position of the channel on the guild.",
        "usage": "$channelPosition[channelID?]",
        "parameters": [
            {
                "field": "channelID",
                "type": "number",
                "description": "The ID of the channel.",
                "required": false
            }
        ],
        "example": "This will return the position of the current channel on the guild:\n\n```js\nclient.command({\n    name: \"channelPosition\",\n    code: `$channelPosition[$channelID]`\n});\n```",
        "tip": null,
        "documentation": "https://aoi.js.org/functions/channelposition",
        "source": "https://github.com/aoijs/aoi.js/tree/v6/src/functions/guild/channelPosition.js",
        "type": "Aoi.Js"
    },
    {
        "function": "$channelSendMessage",
        "description": "$channelSendMessage will send a message in a specific channel.",
        "usage": "$channelSendMessage[channelID;content;returnID?]",
        "parameters": [
            {
                "field": "channelID",
                "type": "number",
                "description": "Where the messages shall be sent to.",
                "required": true
            },
            {
                "field": "content",
                "type": "string",
                "description": "What the content of the message should be.",
                "required": true
            },
            {
                "field": "returnID",
                "type": "boolean",
                "description": "If the message ID should be returned or not. \n1. **true** \n2. **false** (default)",
                "required": false
            }
        ],
        "example": "This will send \"Hello!\" to the current channel:\n\n```javascript\nclient.command({\n    name: \"channelSendMessage\",\n    code: `\n  $channelSendMessage[$channelID;Hello!;false]\n  `\n});\n```\n\n### Embeds\n\nThis will send an embed with description and footer to the current channel:\n\n```javascript\nclient.command({\n    name: \"channelSendMessage\",\n    code: `\n  $channelSendMessage[$channelID;{newEmbed:{title:Hello}{footer:Bye}};false]\n  `\n});\n```",
        "tip": null,
        "documentation": "https://aoi.js.org/functions/channelsendmessage",
        "source": "https://github.com/aoijs/aoi.js/tree/v6/src/functions/guild/channelSendMessage.js",
        "type": "Aoi.Js"
    },
    {
        "function": "$channelTopic",
        "description": "$channelTopic will return the given channel's topic.",
        "usage": "$channelTopic[channelID?]",
        "parameters": [
            {
                "field": "channelID",
                "type": "number",
                "description": "ID of the channel you want it to return the channel topic of.",
                "required": false
            }
        ],
        "example": "This will return the channel topic of the channel where you execute the command in:\n\n```javascript\nclient.command({\n    name: \"channelTopic\",\n    code: `\n  $channelTopic[$channelID]\n  `\n});\n```",
        "tip": null,
        "documentation": "https://aoi.js.org/functions/channeltopic",
        "source": "https://github.com/aoijs/aoi.js/tree/v6/src/functions/guild/channelTopic.js",
        "type": "Aoi.Js"
    },
    {
        "function": "$channelType",
        "description": "$channelType will return the given channel's type.",
        "usage": "$channelType[channelID?]",
        "parameters": [
            {
                "field": "channelID",
                "type": "number",
                "description": "ID of the channel you want the channel type to be returned.",
                "required": false
            }
        ],
        "example": "This will return the channel type of the channel where you execute the command in:\n\n```javascript\nclient.command({\n    name: \"channelType\",\n    code: `\n  $channelType[$channelID]\n  `\n});\n```",
        "tip": null,
        "documentation": "https://aoi.js.org/functions/channeltype",
        "source": "https://github.com/aoijs/aoi.js/tree/v6/src/functions/guild/channelType.js",
        "type": "Aoi.Js"
    },
    {
        "function": "$channelUsed",
        "description": "$channelUsed will return the channel ID of where the event was triggered.",
        "usage": "$channelUsed",
        "parameters": [],
        "example": "This will return the amount of roles of your guild:\n\n**You require `onMessageDelete` in your main file in order to use this example!**\n\n```javascript\nclient.deletedCommand({\n    channel: \"channelID\",\n    code: `$userTag deleted a message in <#$channelUsed>!`\n});\n```",
        "tip": null,
        "documentation": "https://aoi.js.org/functions/channelused",
        "source": "https://github.com/aoijs/aoi.js/tree/v6/src/functions/guild/channelUsed.js",
        "type": "Aoi.Js"
    },
    {
        "function": "$charCount",
        "description": "$charCount will count the given characters in a text and return the amount of characters.",
        "usage": "$charCount[text;find?]",
        "parameters": [
            {
                "field": "text",
                "type": "string",
                "description": "The text that will be the character count returned of.",
                "required": true
            },
            {
                "field": "find",
                "type": "string",
                "description": "The characters it will search for.",
                "required": false
            }
        ],
        "example": "This will return `77` as there are 77 characters in this text:\n\n```javascript\nclient.command({\n    name: \"charCount\",\n    code: `\n  $charCount[aoi.js is one of the simplest and easiest ways to create your own Discord Bot]\n  `\n});\n```\n\nThis will search for the word matching \"e\", and return `2` as the character occurs two times in total:\n\n```javascript\nclient.command({\n    name: \"charCount\",\n    code: `\n  $charCount[Hello, aoi.js is great!;e]\n  `\n});\n```",
        "tip": null,
        "documentation": "https://aoi.js.org/functions/charcount",
        "source": "https://github.com/aoijs/aoi.js/tree/v6/src/functions/misc/charCount.js",
        "type": "Aoi.Js"
    },
    {
        "function": "$checkCondition",
        "description": "$checkCondition checks if a condition is either true or false.",
        "usage": "$checkCondition[condition]",
        "parameters": [
            {
                "field": "condition",
                "type": "string",
                "description": "Condition you want to check.",
                "required": true
            }
        ],
        "example": "This will return `false` as `50` is greater than `25`:\n\n```javascript\nclient.command({\n    name: \"checkCondition\",\n    code: `\n  $checkCondition[50>25]\n  `\n});\n```\n\n### Advanced Example\n\n#### Logical conjunction\n\nThis will return `true` as `50` is greater than `25` and `120` is less than `280`:\n\n```javascript\nclient.command({\n    name: \"checkCondition\",\n    code: `\n  $checkCondition[50>25&&120<280]\n  `\n});\n```\n\n#### Logical OR\n\nThis will return `true` as one of the two arguments (`50>25`) are `true`:\n\n```javascript\nclient.command({\n    name: \"checkCondition\",\n    code: `\n  $checkCondition[50>25||true==false]\n  `\n});\n```",
        "tip": null,
        "documentation": "https://aoi.js.org/functions/checkcondition",
        "source": "https://github.com/aoijs/aoi.js/tree/v6/src/functions/condition/checkCondition.js",
        "type": "Aoi.Js"
    },
    {
        "function": "$checkContains",
        "description": "$checkContains will check if the given arguments are present within a text.",
        "usage": "$checkContains[text;...chars]",
        "parameters": [
            {
                "field": "text",
                "type": "string",
                "description": "Text you want to check.",
                "required": true
            },
            {
                "field": "chars",
                "type": "string",
                "description": "Text you want to check for.",
                "required": true
            }
        ],
        "example": "This will return `true` as `easy` and/or `simple` are present in the given text:\n\n```javascript\nclient.command({\n    name: \"checkContains\",\n    code: `\n  $checkContains[aoi.js is easy and simple to use for beginners;easy;simple]\n  `\n});\n```",
        "tip": null,
        "documentation": "https://aoi.js.org/functions/checkcontains",
        "source": "https://github.com/aoijs/aoi.js/tree/v6/src/functions/misc/checkContains.js",
        "type": "Aoi.Js"
    },
    {
        "function": "$clear",
        "description": "$clear will delete the amount of given messages in a channel.",
        "usage": "$clear[channelID;amount;returnCount?;deleteBots?;deletePinned?;wordsFilter?;...usersFilter?]",
        "parameters": [
            {
                "field": "channelID",
                "type": "number",
                "description": "In which channel the permissions shall be deleted.",
                "required": true
            },
            {
                "field": "amount",
                "type": "number",
                "description": "Amount of messages to delete.",
                "required": true
            },
            {
                "field": "returnCount",
                "type": "boolean",
                "description": "Return the count of deleted messages. \n1. **false** (default) \n2. **true**",
                "required": false
            },
            {
                "field": "deleteBots",
                "type": "boolean",
                "description": "Include bot messages. \n1. **false** (default) \n2. **true**",
                "required": false
            },
            {
                "field": "deletePinned",
                "type": "boolean",
                "description": "Include pinned messages. \n1. **false** (default) \n2. **true**",
                "required": false
            },
            {
                "field": "wordsFilter",
                "type": "string",
                "description": "Words to include, split by `:` colons.",
                "required": false
            },
            {
                "field": "...usersFilter",
                "type": "string",
                "description": "Users to include.",
                "required": false
            }
        ],
        "example": "This will delete the most recent fifty messages which are pinned:\n\n```javascript\nclient.command({\n  name: \"clear\",\n  code: `\n  $clear[$channelID;50;false;false;true]\n  `,\n});\n```\n\nThis will delete the most recent fifty messages which are sent by the command author:\n\n```javascript\nclient.command({\n  name: \"clear\",\n  code: `\n  $clear[$channelID;50;false;false;false;;$authorId]\n  `,\n});\n```",
        "tip": null,
        "documentation": "https://aoi.js.org/functions/clear",
        "source": "https://github.com/aoijs/aoi.js/tree/v6/src/functions/misc/clear.js",
        "type": "Aoi.Js"
    },
    {
        "function": "$clearReaction",
        "description": "$clearReaction will remove a given reaction of a message of a given user.",
        "usage": "$clearReaction[channelID;messageID;userID;emoji]",
        "parameters": [
            {
                "field": "channelID",
                "type": "number",
                "description": "The channel ID of where the message is located in.",
                "required": true
            },
            {
                "field": "messageID",
                "type": "number",
                "description": "The message ID.",
                "required": true
            },
            {
                "field": "userID",
                "type": "number",
                "description": "The user ID of the user whose reactions shall be removed.",
                "required": true
            },
            {
                "field": "emoji",
                "type": "string",
                "description": "The exact emoji to remove. \n1. **all** (default) \n2. **emoji** - any emoji",
                "required": true
            }
        ],
        "example": "This will add and remove the bot's reaction after two seconds:\n\n```javascript\nclient.command({\n    name: \"clearReaction\",\n    code: `\n  $clearReaction[$channelID;$messageID;$clientID;🥱]\n  $wait[2s]\n  $addCmdReactions[🥱]\n  `\n});\n```",
        "tip": null,
        "documentation": "https://aoi.js.org/functions/clearreaction",
        "source": "https://github.com/aoijs/aoi.js/tree/v6/src/functions/components/clearReaction.js",
        "type": "Aoi.Js"
    },
    {
        "function": "$clearReactions",
        "description": "$clearReactions will remove a given or all reactions of a message.",
        "usage": "$clearReactions[channelID;messageID;emoji]",
        "parameters": [
            {
                "field": "channelID",
                "type": "number",
                "description": "The channel ID of where the message is located in.",
                "required": true
            },
            {
                "field": "messageID",
                "type": "number",
                "description": "The message ID.",
                "required": true
            },
            {
                "field": "emoji",
                "type": "string",
                "description": "The emoji to remove. \n1. **all** (default) \n2. **emoji** - any emoji",
                "required": true
            }
        ],
        "example": "This will add two emojis and remove one completely:\n\n```javascript\nclient.command({\n    name: \"clearReactions\",\n    code: `\n  $clearReactions[$channelID;$messageID;🥱]\n  $wait[2s]\n  $addCmdReactions[🥱;😩]\n  `\n});\n```",
        "tip": null,
        "documentation": "https://aoi.js.org/functions/clearreactions",
        "source": "https://github.com/aoijs/aoi.js/tree/v6/src/functions/components/clearReactions.js",
        "type": "Aoi.Js"
    },
    {
        "function": "$clientID",
        "description": "$clientID will return the client's Discord User ID.",
        "usage": "$clientID",
        "parameters": [],
        "example": "This will return the client's ID:\n\n```javascript\nclient.command({\n    name: \"clientID\",\n    code: `\n  $clientID\n  `\n});\n```",
        "tip": null,
        "documentation": "https://aoi.js.org/functions/clientid",
        "source": "https://github.com/aoijs/aoi.js/tree/v6/src/functions/client/clientID.js",
        "type": "Aoi.Js"
    },
    {
        "function": "$clientLeave",
        "description": "$clientLeave will make your bot leave a specific server.",
        "usage": "$clientLeave[guildID?]",
        "parameters": [
            {
                "field": "guildID",
                "type": "number",
                "description": "The ID of the guild which your bot shall leave.",
                "required": false
            }
        ],
        "example": "This will make your bot leave the current guild:\n\n```javascript\nclient.command({\n    name: \"clientLeave\",\n    code: `\n  $clientLeave[$guildID]\n  $wait[2s]\n  $sendMessage[Bye, I'm leaving!]\n  `\n});\n```",
        "tip": null,
        "documentation": "https://aoi.js.org/functions/clientleave",
        "source": "https://github.com/aoijs/aoi.js/tree/v6/src/functions/client/clientLeave.js",
        "type": "Aoi.Js"
    },
    {
        "function": "$clientMutualGuilds",
        "description": "$clientMutualGuilds will return the mutual servers with a given user and the bot.",
        "usage": "$clientMutualGuilds[userID?;sep?]",
        "parameters": [
            {
                "field": "userID",
                "type": "number",
                "description": "The ID of the user.",
                "required": false
            },
            {
                "field": "sep",
                "type": "string",
                "description": "The separator to separate the returned values.",
                "required": false
            }
        ],
        "example": "This will return the mutual servers of you and the bot:\n\n```javascript\nclient.command({\n    name: \"clientMutualGuilds\",\n    code: `\n  $clientMutualGuilds[$authorID;, ]\n  `\n});\n```",
        "tip": null,
        "documentation": "https://aoi.js.org/functions/clientmutualguilds",
        "source": "https://github.com/aoijs/aoi.js/tree/v6/src/functions/guild/clientMutualGuilds.js",
        "type": "Aoi.Js"
    },
    {
        "function": "$clientOwnerIDs",
        "description": "$clientOwnerIDs will return the user IDs of the bot owner (or of multiple people if you have a team).",
        "usage": "$clientOwnerIDs[separator?]",
        "parameters": [
            {
                "field": "separator",
                "type": "string",
                "description": "Separator to split user IDs. (default: ``)",
                "required": false
            }
        ],
        "example": "This will return your user ID most likely:\n\n```javascript\nclient.command({\n    name: \"clientOwnerIDs\",\n    code: `\n  $clientOwnerIDs\n  `\n});\n```",
        "tip": null,
        "documentation": "https://aoi.js.org/functions/clientownerids",
        "source": "https://github.com/aoijs/aoi.js/tree/v6/src/functions/client/clientOwnerIDs.js",
        "type": "Aoi.Js"
    },
    {
        "function": "$clientPrefixes",
        "description": "$clientPrefixes will return the client prefix(es).",
        "usage": "$clientPrefixes[sep?]",
        "parameters": [
            {
                "field": "sep",
                "type": "string",
                "description": "Separator used between prefixes. Default is `,`.",
                "required": false
            }
        ],
        "example": "This will return all your prefix(es) separated by a comma and a space:\n\n```javascript\nclient.command({\n    name: \"clientPrefixes\",\n    code: `\n  $clientPrefixes[, ]\n  `\n});\n```",
        "tip": null,
        "documentation": "https://aoi.js.org/functions/clientprefixes",
        "source": "https://github.com/aoijs/aoi.js/tree/v6/src/functions/client/clientPrefixes.js",
        "type": "Aoi.Js"
    },
    {
        "function": "$clientToken",
        "description": "$clientToken will return the client's token.",
        "usage": "$clientToken",
        "parameters": [],
        "example": "This will return the client's Token:\n\n```javascript\nclient.command({\n    name: \"clientToken\",\n    code: `\n  $clientToken\n  `\n});\n```",
        "tip": null,
        "documentation": "https://aoi.js.org/functions/clienttoken",
        "source": "https://github.com/aoijs/aoi.js/tree/v6/src/functions/client/clientToken.js",
        "type": "Aoi.Js"
    },
    {
        "function": "$clientTyping",
        "description": "$clientTyping will make your bot type in a channel (show that it's typing).",
        "usage": "$clientTyping",
        "parameters": [],
        "example": "This will display your bot as typing and send \"Hello!\" as message:\n\n```javascript\nclient.command({\n    name: \"clientTyping\",\n    code: `\n  Hello!\n  $clientTyping\n  `\n});\n```",
        "tip": null,
        "documentation": "https://aoi.js.org/functions/clienttyping",
        "source": "https://github.com/aoijs/aoi.js/tree/v6/src/functions/client/clientTyping.js",
        "type": "Aoi.Js"
    },
    {
        "function": "$cloneChannel",
        "description": "$cloneChannel will clone a channel.",
        "usage": "$cloneChannel[channelID;name;returnID?]",
        "parameters": [
            {
                "field": "channelID",
                "type": "number",
                "description": "The ID of the channel which is to clone.",
                "required": true
            },
            {
                "field": "name",
                "type": "string",
                "description": "The new name of the cloned channel.",
                "required": true
            },
            {
                "field": "returnID",
                "type": "boolean",
                "description": "If the function should return the ID of the newly created channnel.",
                "required": false
            }
        ],
        "example": "This will clone the current channel and name it \"new channel\":\n\n```javascript\nclient.command({\n    name: \"cloneChannel\",\n    code: `\n  $cloneChannel[$channelID;new channel;false]\n  `\n});\n```",
        "tip": null,
        "documentation": "https://aoi.js.org/functions/clonechannel",
        "source": "https://github.com/aoijs/aoi.js/tree/v6/src/functions/guild/cloneChannel.js",
        "type": "Aoi.Js"
    },
    {
        "function": "$cloneEmbed",
        "description": "$cloneEmbed will clone an embed.",
        "usage": "$cloneEmbed[index;messageID;channelID?;returnJSON?]",
        "parameters": [
            {
                "field": "index",
                "type": "string",
                "description": "The index of the embed to clone. \n1. **all** \n2. **number**",
                "required": true
            },
            {
                "field": "messageID",
                "type": "number",
                "description": "The ID of the message containing the embed to be cloned.",
                "required": true
            },
            {
                "field": "channelID",
                "type": "number",
                "description": "The ID of the channel where the message is located. Defaults to the current channel.",
                "required": false
            },
            {
                "field": "returnJSON",
                "type": "boolean",
                "description": "Whether to return the embed(s) as raw JSON instead of attaching them.",
                "required": false
            }
        ],
        "example": "This will clone the previous embed and edit the title after 15 seconds:\n\n```javascript  \nclient.command({  \n    name: \"cloneEmbed\",  \n    code: `  \n  $title[Bye!]  \n  $cloneEmbed[all;$get[messageID];$channelID]  \n  \n  $wait[15s]  \n  $let[messageID;$sendMessage[{newEmbed: {title:Hello!} {description:I'll edit this message in 15 seconds.}};true]]  \n  `  \n}); \n``` \n\nThis will return the cloned embed as raw JSON instead of displaying it:\n\n```javascript  \nclient.command({  \n    name: \"cloneEmbed\",  \n    code: `  \n  $cloneEmbed[all;$get[messageID];$channelID;true]  \n  $let[messageID;$sendMessage[{newEmbed: {title:Data Collected} {description:Storing raw embed JSON.}};true]]  \n  `  \n});  \n```",
        "tip": null,
        "documentation": "https://aoi.js.org/functions/cloneembed",
        "source": "https://github.com/aoijs/aoi.js/tree/v6/src/functions/embeds/cloneEmbed.js",
        "type": "Aoi.Js"
    },
    {
        "function": "$cloneObject",
        "description": "$cloneObject will clone a previously created object.",
        "usage": "$cloneObject[objectName;newObjectName]",
        "parameters": [
            {
                "field": "objectName",
                "type": "string",
                "description": "The name of the object that will be cloned.",
                "required": true
            },
            {
                "field": "newObjectName",
                "type": "string",
                "description": "The new name for the cloned object.",
                "required": true
            }
        ],
        "example": "```javascript\nclient.command({\n    name: \"cloneObject\",\n    code: `\n  $getObjectProperty[Another Name;Leref]\n  $cloneObject[Object Name;Another Name]\n  $createObject[Object Name;{\n    \"Leref\": \"Ferel\",\n    \"aoi.js\": \"dbd.js\"\n  }]\n  `\n});\n```",
        "tip": null,
        "documentation": "https://aoi.js.org/functions/cloneobject",
        "source": "https://github.com/aoijs/aoi.js/tree/v6/src/functions/misc/cloneObject.js",
        "type": "Aoi.Js"
    },
    {
        "function": "$closeTicket",
        "description": "$closeTicket will delete a ticket created by `$newTicket`.",
        "usage": "$closeTicket[error?]",
        "parameters": [
            {
                "field": "error",
                "type": "string",
                "description": "Error to return.",
                "required": false
            }
        ],
        "example": "```javascript\nclient.command({\n    name: \"closeTicket\",\n    code: `\n  $closeTicket[Something went wrong!]\n  `\n});\n```",
        "tip": null,
        "documentation": "https://aoi.js.org/functions/closeticket",
        "source": "https://github.com/aoijs/aoi.js/tree/v6/src/functions/misc/closeTicket.js",
        "type": "Aoi.Js"
    },
    {
        "function": "$color",
        "description": "$color will change the color of an embed.",
        "usage": "$color[index?;hex]",
        "parameters": [
            {
                "field": "index",
                "type": "number",
                "description": "The embed index.",
                "required": false
            },
            {
                "field": "hex",
                "type": "string",
                "description": "The hex color or color name (supported color names below).",
                "required": true
            }
        ],
        "example": "This will return a red embed:\n\n```javascript\nclient.command({\n    name: \"color\",\n    code: `\n  $description[What a nice color!]\n  $color[Red]\n  `\n});\n```\n\n```javascript\nclient.command({\n    name: \"color\",\n    code: `\n  $description[What a nice color!]\n  $color[ED4245]\n  `\n});\n```",
        "tip": null,
        "documentation": "https://aoi.js.org/functions/color",
        "source": "https://github.com/aoijs/aoi.js/tree/v6/src/functions/embeds/color.js",
        "type": "Aoi.Js"
    },
    {
        "function": "$commandCode",
        "description": "$commandCode will return the commands' code.",
        "usage": "$commandCode",
        "parameters": [],
        "example": null,
        "tip": null,
        "documentation": "https://aoi.js.org/functions/commandcode",
        "source": "https://github.com/aoijs/aoi.js/tree/v6/src/functions/misc/commandCode.js",
        "type": "Aoi.Js"
    },
    {
        "function": "$commandInfo",
        "description": "$commandInfo will return the given text of a property.",
        "usage": "$commandInfo[name;option]",
        "parameters": [
            {
                "field": "name",
                "type": "string",
                "description": "Command name or alias.",
                "required": true
            },
            {
                "field": "option",
                "type": "string",
                "description": "Property to retrieve.",
                "required": true
            }
        ],
        "example": "This will return the usage (defined by added properties) of the command:\n\n-   You can add anything you'd like, for example \"usage\" as below.\n-   You can use aliases or the command name to return it's information.\n\n```javascript\nclient.command({\n    name: \"commandInfo\",\n    aliases: [\"ci\", \"cmdInfo\"],\n    usage: \"commandInfo [command]\",\n    code: `\n  Usage: $commandInfo[ci;usage]\n  `\n});\n```",
        "tip": null,
        "documentation": "https://aoi.js.org/functions/commandinfo",
        "source": "https://github.com/aoijs/aoi.js/tree/v6/src/functions/misc/commandInfo.js",
        "type": "Aoi.Js"
    },
    {
        "function": "$commandName",
        "description": "$commandName will return the command's name.",
        "usage": "$commandName",
        "parameters": [],
        "example": null,
        "tip": null,
        "documentation": "https://aoi.js.org/functions/commandname",
        "source": "https://github.com/aoijs/aoi.js/tree/v6/src/functions/misc/commandName.js",
        "type": "Aoi.Js"
    },
    {
        "function": "$commandsCount",
        "description": "$commandsCount will return the amount of commands.",
        "usage": "$commandsCount[type?]",
        "parameters": [
            {
                "field": "type",
                "type": "string",
                "description": "The command type.",
                "required": true
            }
        ],
        "example": "This will return the the amount of your commands:\n\n```javascript\nclient.command({\n    name: \"commandsCount\",\n    code: `\n  $commandsCount\n  `\n});\n```",
        "tip": null,
        "documentation": "https://aoi.js.org/functions/commandscount",
        "source": "https://github.com/aoijs/aoi.js/tree/v6/src/functions/misc/commandsCount.js",
        "type": "Aoi.Js"
    },
    {
        "function": "$comment",
        "description": "$comment will add text to your code without executing it.",
        "usage": "$comment[content]",
        "parameters": [
            {
                "field": "content",
                "type": "string",
                "description": "The text that will be commented on.",
                "required": true
            }
        ],
        "example": "This will only return \"Hello!\":\n\n```js\nclient.command({\n    name: \"hi\",\n    code: `Hello!\n  $comment[This is a comment!]`\n});\n```",
        "tip": null,
        "documentation": "https://aoi.js.org/functions/comment",
        "source": "https://github.com/aoijs/aoi.js/tree/v6/src/functions/misc/comment.js",
        "type": "Aoi.Js"
    },
    {
        "function": "$componentCollector",
        "description": "$componentCollector will create a collector for the given components.",
        "usage": "$componentCollector[messageID;userFilter;time;customIDs;commands;errorMsg?;endcommand?;awaitData?]",
        "parameters": [
            {
                "field": "messageID",
                "type": "number",
                "description": "The message ID.",
                "required": true
            },
            {
                "field": "userFilter",
                "type": "string",
                "description": "To what the bot will reply. \n1. **everyone** \n2. **specific user ID** - any user ID",
                "required": true
            },
            {
                "field": "time",
                "type": "string",
                "description": "When the command ends/expires.",
                "required": true
            },
            {
                "field": "customID",
                "type": "string",
                "description": "The component ID.",
                "required": true
            },
            {
                "field": "commands",
                "type": "string",
                "description": "Commands that will be executed, you can separate multiple emojis with a comma ( `` ).",
                "required": true
            },
            {
                "field": "errorMsg",
                "type": "string",
                "description": "Error message when command expires.",
                "required": false
            },
            {
                "field": "endcommand",
                "type": "number",
                "description": "End command which will be executed when previous commands were executed.",
                "required": false
            },
            {
                "field": "awaitData",
                "type": "string",
                "description": "Awaited Data.",
                "required": false
            }
        ],
        "example": null,
        "tip": null,
        "documentation": "https://aoi.js.org/functions/componentcollector",
        "source": "https://github.com/aoijs/aoi.js/tree/v6/src/functions/components/componentCollector.js",
        "type": "Aoi.Js"
    },
    {
        "function": "$concatTextSplit",
        "description": "$concatTextSplit will concatenates the text with the given separator.",
        "usage": "$concatTextSplit[...text]",
        "parameters": [
            {
                "field": "text",
                "type": "string",
                "description": "Text to concat to the existing textSplit elements.",
                "required": true
            }
        ],
        "example": "This will add `Hello, Bye` to the already used `$textSplit` argument:\n\n```javascript\nclient.command({\n    name: \"concatTextSplit\",\n    code: `\n  $concatTextSplit[Hello;Bye]\n  $textSplit[Good Morning, Goodnight;, ]\n  `\n});\n```",
        "tip": null,
        "documentation": "https://aoi.js.org/functions/concattextsplit",
        "source": "https://github.com/aoijs/aoi.js/tree/v6/src/functions/misc/concatTextSplit.js",
        "type": "Aoi.Js"
    },
    {
        "function": "$consume",
        "description": "$consume marks the provided item as consumed, making it unusable until repurchased",
        "usage": "$consume[consumableId]",
        "parameters": [
            {
                "field": "consumableId",
                "type": "number",
                "description": "Your consumable ID.",
                "required": true
            }
        ],
        "example": "This will mark the provided `consumableId` as consumed.\n\n```javascript\nclient.command({\n    name: \"consume\",\n    code: `\n   $consume[12345678]\n   $comment[Example value of consumableId]\n  `\n});\n```",
        "tip": null,
        "documentation": "https://aoi.js.org/functions/consume",
        "source": "https://github.com/aoijs/aoi.js/tree/v6/src/functions/misc/consume.js",
        "type": "Aoi.Js"
    },
    {
        "function": "$cooldown",
        "description": "$cooldown will set a cooldown for the author of the command after being used.",
        "usage": "$cooldown[time;errorMessage]",
        "parameters": [
            {
                "field": "time",
                "type": "string",
                "description": "The duration of the cooldown.",
                "required": true
            },
            {
                "field": "errorMessage",
                "type": "string",
                "description": "Error message when there's remaining time for the cooldown.",
                "required": true
            }
        ],
        "example": "This will set a cooldown for a command which applies to the user only and returns the remaining cooldown:\n\n```javascript\nclient.command({\n    name: \"cooldown\",\n    code: `\n  hello\n  $cooldown[2m;Please wait %time% to execute this command again.]\n  `\n});\n```",
        "tip": null,
        "documentation": "https://aoi.js.org/functions/cooldown",
        "source": "https://github.com/aoijs/aoi.js/tree/v6/src/functions/database/cooldown.js",
        "type": "Aoi.Js"
    },
    {
        "function": "$cpu",
        "description": "$cpu will return CPU usage of a process or the OS.",
        "usage": "$cpu[option?]",
        "parameters": [
            {
                "field": "option",
                "type": "string",
                "description": "The option that the CPU usage will be returned of. \n1. **os** - returns the CPU usage of the bot \n2. **process** - returns the CPU usage of the process",
                "required": false
            }
        ],
        "example": "This will return the CPU usage of your bot:\n\n```javascript\nclient.command({\n    name: \"cpu\",\n    code: `\n  OS: $cpu[os] \n  Process: $cpu[process] \n  `\n});\n```",
        "tip": null,
        "documentation": "https://aoi.js.org/functions/cpu",
        "source": "https://github.com/aoijs/aoi.js/tree/v6/src/functions/misc/cpu.js",
        "type": "Aoi.Js"
    },
    {
        "function": "$createAppEmoji",
        "description": "$createAppEmoji will create an application emoji.",
        "usage": "$createAppEmoji[name;url;returnEmoji?]",
        "parameters": [
            {
                "field": "name",
                "type": "string",
                "description": "The name of the emoji.",
                "required": true
            },
            {
                "field": "url",
                "type": "string",
                "description": "The url to set as emoji.",
                "required": true
            },
            {
                "field": "returnEmoji",
                "type": "boolean",
                "description": "Returns the emoji.",
                "required": false
            }
        ],
        "example": "This will create an application emoji:\n\n```js\nclient.command({\n    name: \"createAppEmoji\",\n    code: `\n  $createAppEmoji[leref;https://cdn.discordapp.com/emojis/1010320053687832586.webp?size=96&quality=lossless;false]\n  `\n});\n```",
        "tip": null,
        "documentation": "https://aoi.js.org/functions/createappemoji",
        "source": "https://github.com/aoijs/aoi.js/tree/v6/src/functions/misc/createAppEmoji.js",
        "type": "Aoi.Js"
    },
    {
        "function": "$createApplicationCommand",
        "description": "$createApplicationCommand will create an application command.",
        "usage": "$createApplicationCommand[type;name;description;permissions;integrationType?;context?;options?]",
        "parameters": [
            {
                "field": "type",
                "type": "string",
                "description": "Application command type. \n1. **global** \n2. **specific guildID**",
                "required": true
            },
            {
                "field": "name",
                "type": "string",
                "description": "Application command name, must be lowercase.",
                "required": true
            },
            {
                "field": "description",
                "type": "string",
                "description": "Application command description.",
                "required": true
            },
            {
                "field": "permissions",
                "type": "string",
                "description": "If the command should be restricted to certain permissions.",
                "required": false
            },
            {
                "field": "integrationType",
                "type": "string",
                "description": "The application command integration type. \n1. **user** \n2. **guild**",
                "required": false
            },
            {
                "field": "context",
                "type": "string",
                "description": "The application command context. \n1. **botdm** \n2. **dm** \n3. **guild**",
                "required": false
            },
            {
                "field": "type",
                "type": "string",
                "description": "The application command type. \n1. **slash** \n2. **user** \n3. **message**",
                "required": false
            },
            {
                "field": "options",
                "type": "string",
                "description": "Application command options.",
                "required": false
            }
        ],
        "example": "> **Check the Slash Command/Interaction guide for more information about slash commands!**\n> You can also use the [Application Command Creator](https://aoi.js.org/tools/slash/) to easily create your own custom application commands for your application.\n\nThis will create a guild slash command without options:\n\n```js\nclient.command({\n    name: \"createApplicationCommand\",\n    code: `\n  $createApplicationCommand[$guildID/global;example;slash command description!;false;guild;guild;slash]`\n});\n// Will create a slash commands without any user input, you can choose between global/$guildID to create a command globally or only for a specific guild.\n```\n\nThis will create a guild slash command with restricted permissions, without options:\n\n```js\nclient.command({\n    name: \"createApplicationCommand\",\n    code: `\n  $createApplicationCommand[$guildID/global;example;slash command description!;managemessages;guild;guild;slash]`\n});\n// Will create a slash commands without any user input but with restricted permissions (managemessages), you can choose between global/$guildID to create a command globally or only for a specific guild.\n```",
        "tip": null,
        "documentation": "https://aoi.js.org/functions/createapplicationcommand",
        "source": "https://github.com/aoijs/aoi.js/tree/v6/src/functions/misc/createApplicationCommand.js",
        "type": "Aoi.Js"
    },
    {
        "function": "$createArray",
        "description": "$createArray will create a new array with given elements.",
        "usage": "$createArray[name;...elements]",
        "parameters": [
            {
                "field": "name",
                "type": "string",
                "description": "Array name.",
                "required": true
            },
            {
                "field": "...elements",
                "type": "string",
                "description": "Elements to add.",
                "required": false
            }
        ],
        "example": "This will create an array called \"array\" with the following elements:\n\n```javascript\nclient.command({\n    name: \"array-create\",\n    code: `\n  $createArray[array;aoi.js;akarui;documents;bot]\n  `\n});\n```",
        "tip": null,
        "documentation": "https://aoi.js.org/functions/createarray",
        "source": "https://github.com/aoijs/aoi.js/tree/v6/src/functions/array/createArray.js",
        "type": "Aoi.Js"
    },
    {
        "function": "$createAutomodRule",
        "description": "$createAutomodRule will create a new Discord Automod Rule for the given guild.",
        "usage": "$createAutomodRule[guildID;name;enabled?;reason?]",
        "parameters": [
            {
                "field": "guildID",
                "type": "number",
                "description": "The ID of the guild where the automod rule should be created in.",
                "required": true
            },
            {
                "field": "name",
                "type": "string",
                "description": "The name of the new Automod Rule.",
                "required": true
            },
            {
                "field": "enabled",
                "type": "boolean",
                "description": "Enable the automod rule?",
                "required": false
            },
            {
                "field": "reason",
                "type": "string",
                "description": "The reason displayed in the guild's audit logs.",
                "required": false
            }
        ],
        "example": "This will create a automod rule which blocks slur words:\n\n```javascript\nclient.command({\n    name: \"createAutomodRule\",\n    code: `\n    $createAutomodRule[$guildid;Automod Rule;true;Creating a new rule!]\n    $setAutomodPreset[Slurs]\n    $setAutomodType[Keyword]\n    $setAutomodActions[BlockMessage;$channelId;60;You tried to say slurs, you got blocked!]  \n  `\n});\n```",
        "tip": null,
        "documentation": "https://aoi.js.org/functions/createautomodrule",
        "source": "https://github.com/aoijs/aoi.js/tree/v6/src/functions/misc/createAutomodRule.js",
        "type": "Aoi.Js"
    },
    {
        "function": "$createCache",
        "description": "$createCache will create custom cache.",
        "usage": "$createCache[type;name;options]",
        "parameters": [
            {
                "field": "type",
                "type": "string",
                "description": "Cache type.",
                "required": true
            },
            {
                "field": "name",
                "type": "string",
                "description": "Cache name.",
                "required": true
            },
            {
                "field": "options",
                "type": "string",
                "description": "Cache options.",
                "required": true
            }
        ],
        "example": null,
        "tip": null,
        "documentation": "https://aoi.js.org/functions/createcache",
        "source": "https://github.com/aoijs/aoi.js/tree/v6/src/functions/misc/createCache.js",
        "type": "Aoi.Js"
    },
    {
        "function": "$createChannel",
        "description": "$createChannel will create a channel of a given type.",
        "usage": "$createChannel[guildID;name;type;returnID;parentID]",
        "parameters": [
            {
                "field": "guildID",
                "type": "number",
                "description": "ID of the guild of where the channel will be created in.",
                "required": true
            },
            {
                "field": "name",
                "type": "string",
                "description": "The channel name of the newly created channel.",
                "required": true
            },
            {
                "field": "type",
                "type": "string",
                "description": "The channel type. (listed below)",
                "required": true
            },
            {
                "field": "returnID",
                "type": "boolean",
                "description": "Return the channel ID of the newly created channel. \n1. **true** \n2. **false** (default)",
                "required": true
            },
            {
                "field": "parentID",
                "type": "number",
                "description": "The category ID.",
                "required": false
            }
        ],
        "example": "This will create a new text channel called \"aoijs\":\n\n```javascript\nclient.command({\n    name: \"createChannel\",\n    code: `\n    $createChannel[$guildID;aoijs;Text;false]\n  `\n});\n```",
        "tip": null,
        "documentation": "https://aoi.js.org/functions/createchannel",
        "source": "https://github.com/aoijs/aoi.js/tree/v6/src/functions/guild/createChannel.js",
        "type": "Aoi.Js"
    },
    {
        "function": "$createChannelInvite",
        "description": "$createChannelInvite will create a channel invite.",
        "usage": "$createChannelInvite[channelID?;...options]",
        "parameters": [
            {
                "field": "channelID",
                "type": "number",
                "description": "The channel ID of which the invite will be created.",
                "required": false
            },
            {
                "field": "options",
                "type": "object",
                "description": "Invite options.",
                "required": false
            }
        ],
        "example": "This will create an invite of the channel where the command is executed in:\n\n```javascript\nclient.command({\n    name: \"createChannelInvite\",\n    code: `\n  $createChannelInvite[$channelID]\n  `\n});\n```\n\n### Advanced Example(s)\n\nCreate Temporary Invites with limited uses:\n\n```javascript\nclient.command({\n    name: \"createChannelInvite\",\n    code: `\n  $createChannelInvite[$channelID;{\n            \"temporary\": true,\n            \"maxAge\": 650,\n            \"maxUses\": 25,\n            \"unique\": true\n  }]\n  `\n});\n```\n\nCreate Activity Invites:\n\n```javascript\nclient.command({\n    name: \"createChannelInvite\",\n    code: `\n  $createChannelInvite[voiceID;{\n            \"targetApplication\": \"application ID\",\n            \"targetType\": 2\n  }]\n  `\n});\n```",
        "tip": null,
        "documentation": "https://aoi.js.org/functions/createchannelinvite",
        "source": "https://github.com/aoijs/aoi.js/tree/v6/src/functions/guild/createChannelInvite.js",
        "type": "Aoi.Js"
    },
    {
        "function": "$createFile",
        "description": "$createFile will create a file attachment.",
        "usage": "$createFile[attachment;name]",
        "parameters": [
            {
                "field": "attachment",
                "type": "string",
                "description": "Content of the file.",
                "required": true
            },
            {
                "field": "name",
                "type": "string",
                "description": "The name of the attachment.",
                "required": true
            }
        ],
        "example": "This will create a text file called **`example.txt`** with the text \"This is an example!\":\n\n```javascript\nclient.command({\n    name: \"createFile\",\n    code: `\n  $createFile[This is an example!;example.txt]\n  `\n});\n```",
        "tip": null,
        "documentation": "https://aoi.js.org/functions/createfile",
        "source": "https://github.com/aoijs/aoi.js/tree/v6/src/functions/misc/createFile.js",
        "type": "Aoi.Js"
    },
    {
        "function": "$createGuild",
        "description": "$createGuild will create a new guild with the client as owner.",
        "usage": "$createGuild[name;icon?;returnId?]",
        "parameters": [
            {
                "field": "name",
                "type": "string",
                "description": "The name of the guild.",
                "required": true
            },
            {
                "field": "icon",
                "type": "string",
                "description": "The icon of the guild.",
                "required": false
            },
            {
                "field": "returnId",
                "type": "boolean",
                "description": "Return the id of the newly created guild?",
                "required": false
            }
        ],
        "example": "This will create a new guild with your username and avatar:\n\n```javascript\nclient.command({\n    name: \"createGuild\",\n    code: `\n  $createGuild[$username;$authorAvatar;true]\n  `\n});\n```",
        "tip": null,
        "documentation": "https://aoi.js.org/functions/createguild",
        "source": "https://github.com/aoijs/aoi.js/tree/v6/src/functions/guild/createGuild.js",
        "type": "Aoi.Js"
    },
    {
        "function": "$createGuildTemplate",
        "description": "$createGuildTemplate will create a new guild template.",
        "usage": "$createGuildTemplate[guildId;name;description;returnCode?]",
        "parameters": [
            {
                "field": "guildId",
                "type": "number",
                "description": "The id of the guild.",
                "required": true
            },
            {
                "field": "name",
                "type": "string",
                "description": "The name of the template.",
                "required": true
            },
            {
                "field": "description",
                "type": "string",
                "description": "The description of the template.",
                "required": true
            },
            {
                "field": "returnCode",
                "type": "boolean",
                "description": "Return the template code?",
                "required": false
            }
        ],
        "example": "This will create a new guild template.\n\n```javascript\nclient.command({\n    name: \"createGuildTemplate\",\n    code: `\n  $createGuildTemplate[$guildId;Guild Template;This is a template!;true]\n  `\n});\n```",
        "tip": null,
        "documentation": "https://aoi.js.org/functions/createguildtemplate",
        "source": "https://github.com/aoijs/aoi.js/tree/v6/src/functions/guild/createGuildTemplate.js",
        "type": "Aoi.Js"
    },
    {
        "function": "$createObject",
        "description": "$createObject will create a new object.",
        "usage": "$createObject[objectName;object]",
        "parameters": [
            {
                "field": "objectName",
                "type": "string",
                "description": "The object name.",
                "required": true
            },
            {
                "field": "object",
                "type": "object",
                "description": "JSON object.",
                "required": true
            }
        ],
        "example": "```javascript\nclient.command({\n    name: \"createObject\",\n    code: `\n  $getObjectProperty[Object Name;Leref]\n  $createObject[Object Name;{\n    \"Leref\": \"Ferel\",\n    \"aoi.js\": \"dbd.js\"\n  }]\n  `\n});\n```",
        "tip": null,
        "documentation": "https://aoi.js.org/functions/createobject",
        "source": "https://github.com/aoijs/aoi.js/tree/v6/src/functions/misc/createObject.js",
        "type": "Aoi.Js"
    },
    {
        "function": "$createPoll",
        "description": "$createPoll will create a poll on the channel.",
        "usage": "$createPoll[channelID?;question;duration;allowMultiselect?;...answers]",
        "parameters": [
            {
                "field": "channelID",
                "type": "number",
                "description": "The channel ID where the poll will be created.",
                "required": false
            },
            {
                "field": "question",
                "type": "string",
                "description": "The poll question.",
                "required": true
            },
            {
                "field": "duration",
                "type": "string",
                "description": "The duration of the poll. This must be not less than **1 hour** and not longer than **7 days**.",
                "required": false
            },
            {
                "field": "allowMultiselect",
                "type": "boolean",
                "description": "Whether users are allowed to choose more than one answer. (Default: **false**)",
                "required": false
            },
            {
                "field": "...answers",
                "type": "string",
                "description": "The emoji and answer for each options.",
                "required": true
            }
        ],
        "example": "This will create a one-hour poll with the question \"Is aoi.js great?\" with two options, only one answer can be chosen:\n\n```js\nclient.command({\n  name: \"createPoll\",\n  code: `$createPoll[$channelID;Is aoi.js great?;1h;false;Yes:✅;No:❌]`\n});\n```\n\nYou can also remove the emojis:\n\n```js\nclient.command({\n  name: \"createPoll\",\n  code: `$createPoll[$channelID;Is aoi.js great?;1h;false;Yes;No]`\n});\n```",
        "tip": null,
        "documentation": "https://aoi.js.org/functions/createpoll",
        "source": "https://github.com/aoijs/aoi.js/tree/v6/src/functions/guild/createPoll.js",
        "type": "Aoi.Js"
    },
    {
        "function": "$createRole",
        "description": "$createRole will create a new guild role.",
        "usage": "$createRole[guildID;name;color;position?;icon?;hoist?;unicodeEmoji?;mentionable?;position?;returnId?;...permissions?]",
        "parameters": [
            {
                "field": "guildID",
                "type": "number",
                "description": "The ID of the guild where the role will be created in.",
                "required": true
            },
            {
                "field": "name",
                "type": "string",
                "description": "The name of the new role.",
                "required": true
            },
            {
                "field": "color",
                "type": "number",
                "description": "The color of the new role.",
                "required": true
            },
            {
                "field": "position",
                "type": "number",
                "description": "The position of the role, 1 being the very bottom.",
                "required": false
            },
            {
                "field": "icon",
                "type": "string",
                "description": "The image URL that will be used as icon.",
                "required": false
            },
            {
                "field": "hoist",
                "type": "boolean",
                "description": "If the new role should be hoisted.",
                "required": false
            },
            {
                "field": "unicodeEmoji",
                "type": "string",
                "description": "The unicodeEmoji that will be used as icon.",
                "required": false
            },
            {
                "field": "mentionable",
                "type": "boolean",
                "description": "If the role is mentionable by `@everyone`.",
                "required": false
            },
            {
                "field": "returnID",
                "type": "boolean",
                "description": "Return the ID of the newly created role?",
                "required": false
            },
            {
                "field": "reason",
                "type": "number",
                "description": "The reason that will be displayed in the guilds' audit logs.",
                "required": false
            },
            {
                "field": "...permissions",
                "type": "string",
                "description": "Permissions the role will have.",
                "required": false
            }
        ],
        "example": "This will create a new role called \"Bird\" in the color of red:\n\n```javascript\nclient.command({\n    name: \"createRole\",\n    code: `\n    $createRole[$guildID;Bird;FF0000;1;;false;❤;false;false;Some reason!;sendmessages;addreactions]`\n});\n```",
        "tip": null,
        "documentation": "https://aoi.js.org/functions/createrole",
        "source": "https://github.com/aoijs/aoi.js/tree/v6/src/functions/guild/createRole.js",
        "type": "Aoi.Js"
    },
    {
        "function": "$createScheduledEvent",
        "description": "$createScheduledEvent will create a scheduled event.",
        "usage": "$createScheduledEvent[channelID;name;description;startTime;endTime?;entityType?;entityMetadata?;image?;reason?]",
        "parameters": [
            {
                "field": "channelID",
                "type": "number",
                "description": "Where the event will be held.",
                "required": true
            },
            {
                "field": "name",
                "type": "string",
                "description": "The event title",
                "required": true
            },
            {
                "field": "description",
                "type": "string",
                "description": "The description of the event.",
                "required": true
            },
            {
                "field": "startTime",
                "type": "string",
                "description": "When the event will start.",
                "required": true
            },
            {
                "field": "endTime",
                "type": "string",
                "description": "When the event will end.",
                "required": false
            },
            {
                "field": "entityType",
                "type": "string",
                "description": "Event Type.",
                "required": false
            },
            {
                "field": "entityMetadata",
                "type": "string",
                "description": "Event metadata.",
                "required": false
            },
            {
                "field": "image",
                "type": "string",
                "description": "Image/Thumbnail of the scheduled event.",
                "required": false
            },
            {
                "field": "reason",
                "type": "string",
                "description": "The reason which will be displayed in the guild's audit logs.",
                "required": false
            }
        ],
        "example": null,
        "tip": null,
        "documentation": "https://aoi.js.org/functions/createscheduledevent",
        "source": "https://github.com/aoijs/aoi.js/tree/v6/src/functions/guild/createScheduledEvent.js",
        "type": "Aoi.Js"
    },
    {
        "function": "$createStageInstance",
        "description": "$createStageInstance will start a stage.",
        "usage": "$createStageInstance[channelID;topic;type?]",
        "parameters": [
            {
                "field": "channelID",
                "type": "number",
                "description": "The channel ID of the stage channel.",
                "required": true
            },
            {
                "field": "topic",
                "type": "string",
                "description": "The stage topic which will be displayed.",
                "required": true
            },
            {
                "field": "type",
                "type": "number",
                "description": "The stage type. (listed below)",
                "required": false
            }
        ],
        "example": "This will create start a new stage instance:\n\n```javascript\nclient.command({\n    name: \"createStageInstance\",\n    code: `\n  $createStageInstance[stageID;Testing!;1] \n  ` // replace \"stageID\" with an actual stage ID\n});\n```",
        "tip": null,
        "documentation": "https://aoi.js.org/functions/createstageinstance",
        "source": "https://github.com/aoijs/aoi.js/tree/v6/src/functions/misc/createStageInstance.js",
        "type": "Aoi.Js"
    },
    {
        "function": "$createSticker",
        "description": "$createSticker will create a sticker.",
        "usage": "$createSticker[guildID;URL;name;returnSticker?;tags;description;reason]",
        "parameters": [
            {
                "field": "guildID",
                "type": "number",
                "description": "Guild ID of where the sticker will be created in.",
                "required": true
            },
            {
                "field": "URL",
                "type": "string",
                "description": "Image URL (**png only**).",
                "required": true
            },
            {
                "field": "name",
                "type": "string",
                "description": "The sticker name.",
                "required": true
            },
            {
                "field": "returnSticker",
                "type": "boolean",
                "description": "Return the sticker after its creation. \n1. **true** \n2. **false** (default)",
                "required": false
            },
            {
                "field": "tags",
                "type": "string",
                "description": "Sticker tags.",
                "required": false
            },
            {
                "field": "description",
                "type": "string",
                "description": "The description of the sticker.",
                "required": false
            },
            {
                "field": "reason",
                "type": "string",
                "description": "Reason that will be displayed in the guild's audit logs.",
                "required": false
            }
        ],
        "example": "This will create a sticker called `Imagine`:\n\n```javascript\nclient.command({\n    name: \"createSticker\",\n    code: `\n  $createSticker[$guildID;https://cdn.discordapp.com/attachments/1061712111052521493/1066397675278323734/692445926480150611.png;Imagine;true;money;Random sticker;Testing.]\n  `\n});\n```",
        "tip": null,
        "documentation": "https://aoi.js.org/functions/createsticker",
        "source": "https://github.com/aoijs/aoi.js/tree/v6/src/functions/guild/createSticker.js",
        "type": "Aoi.Js"
    },
    {
        "function": "$createTemporaryVar",
        "description": "$createTemporaryVar will create a new variable.",
        "usage": "$createTemporaryVar[table;...vars]",
        "parameters": [
            {
                "field": "table",
                "type": "string",
                "description": "Variable table.",
                "required": true
            },
            {
                "field": "...vars",
                "type": "string",
                "description": "Variable name and value, separated by colon (`:`).",
                "required": true
            }
        ],
        "example": "This will create a new variable with the name of \"variable\" and the value of \"value\":\n\n```javascript\nclient.command({\n    name: \"createTemporaryVar\",\n    code: `\n  $createTemporaryVar[main;variable:value]\n  `\n});\n```\n\nThis will create two new variables with names \"variable1\" and \"variable2\", with \"value1\" and \"value2\" as the values respectively.\n\n```javascript\nclient.command({\n    name: \"createTemporaryVar\",\n    code: `\n  $createTemporaryVar[main;variable1:value1;variable2:value2]\n  `\n});\n```\n\nYou can add more variables by adding another pair of variable names and values, ensuring that each variable is separated with semicolons.",
        "tip": null,
        "documentation": "https://aoi.js.org/functions/createtemporaryvar",
        "source": "https://github.com/aoijs/aoi.js/tree/v6/src/functions/database/createTemporaryVar.js",
        "type": "Aoi.Js"
    },
    {
        "function": "$createTestEntitlement",
        "description": "$createTestEntitlement will create a new test entitlement",
        "usage": "$createTestEntitlement[skuID;id?;type?;returnID?]",
        "parameters": [
            {
                "field": "skuID",
                "type": "number",
                "description": "Your generated [SKU ID](https://discord.com/developers/docs/resources/sku).",
                "required": true
            },
            {
                "field": "id",
                "type": "number",
                "description": "User or guild ID.",
                "required": false
            },
            {
                "field": "type",
                "type": "string",
                "description": "Entitlement type. \n1. **user** (default) \n2. **guild**",
                "required": false
            },
            {
                "field": "returnID",
                "type": "boolean",
                "description": "Return message ID?",
                "required": false
            }
        ],
        "example": "This will create a test entitlement with the provided `skuID`:\n\n```javascript\nclient.command({\n    name: \"createTestEntitlement\",\n    code: `\n   $createTestEntitlement[123456789;$userID;user;false] \n   $comment[Example value of skuID]\n  `\n});\n```",
        "tip": null,
        "documentation": "https://aoi.js.org/functions/createtestentitlement",
        "source": "https://github.com/aoijs/aoi.js/tree/v6/src/functions/misc/createTestEntitlement.js",
        "type": "Aoi.Js"
    },
    {
        "function": "$createThread",
        "description": "$createThread will create a new thread.",
        "usage": "$createThread[channelID;name;archive;type;startMessage;returnId?]",
        "parameters": [
            {
                "field": "channelID",
                "type": "number",
                "description": "The channel ID of where the thread should be created in.",
                "required": true
            },
            {
                "field": "name",
                "type": "string",
                "description": "The name of the newly created thread.",
                "required": true
            },
            {
                "field": "archive",
                "type": "string",
                "description": "After how much time the thread will be archived (ms).",
                "required": true
            },
            {
                "field": "type",
                "type": "string",
                "description": "Thread type \n1. **public** (default) \n2. **private**",
                "required": true
            },
            {
                "field": "startMessage",
                "type": "string",
                "description": "The message ID of where the thread should relate to.",
                "required": true
            },
            {
                "field": "returnId",
                "type": "string",
                "description": "If the function should return the thread ID after its creation.",
                "required": false
            }
        ],
        "example": "This will create a thread in the current channel:\n\n```javascript\nclient.command({\n    name: \"createThread\",\n    code: `\n  $createThread[$channelID;Example!;60;public;$messageID;false]\n  `\n});\n```",
        "tip": null,
        "documentation": "https://aoi.js.org/functions/createthread",
        "source": "https://github.com/aoijs/aoi.js/tree/v6/src/functions/guild/createThread.js",
        "type": "Aoi.Js"
    },
    {
        "function": "$createWebhook",
        "description": "$createWebhook will create a webhook.",
        "usage": "$createWebhook[channelID;name;avatar;reason;sep?]",
        "parameters": [
            {
                "field": "channelID",
                "type": "number",
                "description": "Channel ID of where the webhook will be created in.",
                "required": true
            },
            {
                "field": "name",
                "type": "string",
                "description": "The webhook's display name.",
                "required": true
            },
            {
                "field": "avatar",
                "type": "string",
                "description": "The webhook avatar url.",
                "required": true
            },
            {
                "field": "reason",
                "type": "string",
                "description": "Reason which will be displayed in the guild's audit logs.",
                "required": true
            },
            {
                "field": "sep",
                "type": "string",
                "description": "The separator which will be used to separate important credentials like token and ID, default ``.",
                "required": false
            }
        ],
        "example": "This will create a webhook in the current channel:\n\n```javascript\nclient.command({\n    name: \"createWebhook\",\n    code: `\n  $createWebhook[$channelID;aoi.js is great;$userAvatar[$authorID];Just testing.;, ]\n  `\n});\n```",
        "tip": null,
        "documentation": "https://aoi.js.org/functions/createwebhook",
        "source": "https://github.com/aoijs/aoi.js/tree/v6/src/functions/guild/createWebhook.js",
        "type": "Aoi.Js"
    },
    {
        "function": "$creationDate",
        "description": "$creationDate will return the creation date of anything what was created within Discord.",
        "usage": "$creationDate[resolver;format?]",
        "parameters": [
            {
                "field": "resolver",
                "type": "number",
                "description": "User Id, message Id, channel Id, guild Id or role Id of who or what you want to get the creation date to be returned of.",
                "required": true
            },
            {
                "field": "format",
                "type": "string",
                "description": "The format of the creation date (listed below).",
                "required": false
            }
        ],
        "example": "This will return your account create date:\n\n```javascript\nclient.command({\n    name: \"creationDate\",\n    code: `\n  Your account was created: $creationDate[$authorID;date]\n  `\n});\n```",
        "tip": null,
        "documentation": "https://aoi.js.org/functions/creationdate",
        "source": "https://github.com/aoijs/aoi.js/tree/v6/src/functions/misc/creationDate.js",
        "type": "Aoi.Js"
    },
    {
        "function": "$cropText",
        "description": "$cropText will crop given text.",
        "usage": "$cropText[text;limit;start?]",
        "parameters": [
            {
                "field": "text",
                "type": "string",
                "description": "Text you want to slice.",
                "required": true
            },
            {
                "field": "limit",
                "type": "number",
                "description": "Limit of the cropped text/will start to crop any text coming after that.",
                "required": true
            },
            {
                "field": "start",
                "type": "number",
                "description": "Where cropping should start.",
                "required": false
            }
        ],
        "example": "This will return `bye` and remove `hello and` from the given text:\n\n```javascript\nclient.command({\n    name: \"cropText\",\n    code: `\n$cropText[hello and bye;20;9]\n  `\n});\n```",
        "tip": null,
        "documentation": "https://aoi.js.org/functions/croptext",
        "source": "https://github.com/aoijs/aoi.js/tree/v6/src/functions/misc/cropText.js",
        "type": "Aoi.Js"
    },
    {
        "function": "$customEmoji",
        "description": "$customEmoji will return a custom emoji.",
        "usage": "$customEmoji[emojiResolver;guildID?]",
        "parameters": [
            {
                "field": "emojiResolver",
                "type": "string",
                "description": "Emoji name or ID.",
                "required": true
            },
            {
                "field": "guildID",
                "type": "string",
                "description": "Where the emoji is from. \n1. **global** \n2. **guildID** - replace with guild ID",
                "required": false
            }
        ],
        "example": "This send a custom emoji of your choice, replace emojiResolver with an actual emoji name or ID:\n\nTries to search for the emoji in all guilds the bot is in:\n\n```javascript\nclient.command({\n    name: \"customEmoji\",\n    code: `\n  $customEmoji[emojiResolver;global]\n  `\n});\n```\n\nTries to return the emoji of the given guild:\n\n```javascript\nclient.command({\n    name: \"customEmoji\",\n    code: `\n  $customEmoji[emojiResolver;specific guild ID]\n  `\n});\n```",
        "tip": null,
        "documentation": "https://aoi.js.org/functions/customemoji",
        "source": "https://github.com/aoijs/aoi.js/tree/v6/src/functions/misc/customEmoji.js",
        "type": "Aoi.Js"
    },
    {
        "function": "$databasePing",
        "description": "$databasePing will return your database ping.",
        "usage": "$databasePing",
        "parameters": [],
        "example": "This will return your database ping:\n\n```javascript\nclient.command({\n    name: \"databasePing\",\n    code: `\n  My database ping is: $databasePing MS!\n  `\n});\n```",
        "tip": null,
        "documentation": "https://aoi.js.org/functions/databaseping",
        "source": "https://github.com/aoijs/aoi.js/tree/v6/src/functions/misc/databasePing.js",
        "type": "Aoi.Js"
    },
    {
        "function": "$date",
        "description": "$date will return the day of the month.",
        "usage": "$date",
        "parameters": [],
        "example": "This will return day of the month, for example, `28`:\n\n```javascript\nclient.command({\n    name: \"date\",\n    code: `\n  $date\n  `\n});\n```",
        "tip": null,
        "documentation": "https://aoi.js.org/functions/date",
        "source": "https://github.com/aoijs/aoi.js/tree/v6/src/functions/misc/date.js",
        "type": "Aoi.Js"
    },
    {
        "function": "$datestamp",
        "description": "$datestamp will return the day in MS.",
        "usage": "$datestamp",
        "parameters": [],
        "example": "This will return day of the month, in MS ( we're using $humanizeMS to make it readable ):\n\n```javascript\nclient.command({\n    name: \"datestamp\",\n    code: `\n  $humanizeMS[$datestamp]\n  `\n});\n```",
        "tip": null,
        "documentation": "https://aoi.js.org/functions/datestamp",
        "source": "https://github.com/aoijs/aoi.js/tree/v6/src/functions/misc/datestamp.js",
        "type": "Aoi.Js"
    },
    {
        "function": "$day",
        "description": "$day will return the day of the month.",
        "usage": "$day",
        "parameters": [],
        "example": "This will return day of the month, for example, `thursday`:\n\n```javascript\nclient.command({\n    name: \"day\",\n    code: `\n  Today is: $day\n  `\n});\n```",
        "tip": null,
        "documentation": "https://aoi.js.org/functions/day",
        "source": "https://github.com/aoijs/aoi.js/tree/v6/src/functions/misc/day.js",
        "type": "Aoi.Js"
    },
    {
        "function": "$deafenUser",
        "description": "$deafenUser will deafen a user.",
        "usage": "$deafenUser[userID;deafen?]",
        "parameters": [
            {
                "field": "userID",
                "type": "number",
                "description": "The user who will be deafened or undeafened.",
                "required": true
            },
            {
                "field": "deafen",
                "type": "boolean",
                "description": "Deafen or Undeafen the given user. \n1. **true** (default) \n2. **false**",
                "required": false
            }
        ],
        "example": "This will deafen yourself:\n\n```javascript\nclient.command({\n    name: \"deafen\",\n    code: `\n  $deafen[$authorID;true]\n  `\n});\n```",
        "tip": null,
        "documentation": "https://aoi.js.org/functions/deafenuser",
        "source": "https://github.com/aoijs/aoi.js/tree/v6/src/functions/guild/deafenUser.js",
        "type": "Aoi.Js"
    },
    {
        "function": "$deleteAppEmoji",
        "description": "$deleteAppEmoji will delete a specific application emoji.",
        "usage": "$deleteAppEmoji[name]",
        "parameters": [
            {
                "field": "name",
                "type": "string",
                "description": "The name of the emoji.",
                "required": true
            }
        ],
        "example": "This will delete the given application emoji named \"leref\":\n\n```js\nclient.command({\n    name: \"addAppEmoji\",\n    code: `\n  $deleteAppEmoji[leref]\n  `\n});\n```",
        "tip": null,
        "documentation": "https://aoi.js.org/functions/deleteappemoji",
        "source": "https://github.com/aoijs/aoi.js/tree/v6/src/functions/misc/deleteAppEmoji.js",
        "type": "Aoi.Js"
    },
    {
        "function": "$deleteApplicationCommand",
        "description": "$deleteApplicationCommand will delete an application command.",
        "usage": "$deleteApplicationCommand[guildID/global;id]",
        "parameters": [
            {
                "field": "guildID/global",
                "type": "string",
                "description": "Application command type. \n1. **global** \n2. **specific guildID**",
                "required": true
            },
            {
                "field": "id",
                "type": "number",
                "description": "Application command ID which will be deleted.",
                "required": true
            }
        ],
        "example": "```javascript\nclient.command({\n    name: \"deleteApplicationCommand\",\n    code: `\n  $deleteApplicationCommand[$guildID;$getApplicationCommandID[application-command-name;$guildID]]\n  `\n});\n```",
        "tip": null,
        "documentation": "https://aoi.js.org/functions/deleteapplicationcommand",
        "source": "https://github.com/aoijs/aoi.js/tree/v6/src/functions/misc/deleteApplicationCommand.js",
        "type": "Aoi.Js"
    },
    {
        "function": "$deleteArray",
        "description": "$deleteArray will delete a previously created array.",
        "usage": "$deleteArray[name]",
        "parameters": [
            {
                "field": "name",
                "type": "string",
                "description": "Array name.",
                "required": true
            }
        ],
        "example": "This will delete the array \"array\":\n\n```javascript\nclient.command({\n    name: \"deleteArray\",\n    code: `\n  $deleteArray[array]\n  $createArray[array;Hello;This;Is;Great]\n  `\n});\n```",
        "tip": null,
        "documentation": "https://aoi.js.org/functions/deletearray",
        "source": "https://github.com/aoijs/aoi.js/tree/v6/src/functions/array/deleteArray.js",
        "type": "Aoi.Js"
    },
    {
        "function": "$deleteAutomodRule",
        "description": "$deleteAutomodRule will delete a given automod rule.",
        "usage": "$deleteAutomodRule[guildID;automodRuleName;reason?;force?]",
        "parameters": [
            {
                "field": "guildID",
                "type": "number",
                "description": "New message content.",
                "required": true
            },
            {
                "field": "automodRuleName",
                "type": "string",
                "description": "New message content.",
                "required": true
            },
            {
                "field": "reason",
                "type": "string",
                "description": "New message content.",
                "required": true
            },
            {
                "field": "force",
                "type": "boolean",
                "description": "New message content.",
                "required": true
            }
        ],
        "example": "This will delete an automod rule with the name \"Block Words\":\n\n```javascript\nclient.command({\n    name: \"deleteAutomodRule\",\n    code: `\n    $deleteAutomodRule[$guildID;Block Words;Deleting this rule!;true]\n    `\n});\n```",
        "tip": null,
        "documentation": "https://aoi.js.org/functions/deleteautomodrule",
        "source": "https://github.com/aoijs/aoi.js/tree/v6/src/functions/misc/deleteAutomodRule.js",
        "type": "Aoi.Js"
    },
    {
        "function": "$deleteButton",
        "description": "$deleteButton will remove a given button component from a given message authored by the bot.",
        "usage": "$deleteButton[messageId;customId;channelId?]",
        "parameters": [
            {
                "field": "messageId",
                "type": "number",
                "description": "Message ID corresponding to the message of the button.",
                "required": true
            },
            {
                "field": "customId",
                "type": "string",
                "description": "Custom ID corresponding to the component.",
                "required": true
            },
            {
                "field": "channelId",
                "type": "number",
                "description": "Channel ID corresponding to the message of the button.",
                "required": false
            }
        ],
        "example": "This will send a message with a button and remove the button after doing so:\n\n```js\nclient.command({\n    name: \"deleteButton\",\n    code: `\n  $deleteButton[$get[messageId];customId]\n  $wait[5s]\n  $let[messageId;$sendMessage[Hello! This is a button. {actionRow:{button:I'm a button!:primary:customId:false}};true]]` // saving the message Id for later!\n});\n```",
        "tip": null,
        "documentation": "https://aoi.js.org/functions/deletebutton",
        "source": "https://github.com/aoijs/aoi.js/tree/v6/src/functions/undefined/deleteButton.js",
        "type": "Aoi.Js"
    },
    {
        "function": "$deleteCacheData",
        "description": "$deleteCacheData will delete given cache data.",
        "usage": "$deleteCacheData[type;cacheName;cacheKey]",
        "parameters": [
            {
                "field": "type",
                "type": "string",
                "description": "Cache type.",
                "required": true
            },
            {
                "field": "cacheName",
                "type": "string",
                "description": "Cache name.",
                "required": true
            },
            {
                "field": "cacheKey",
                "type": "string",
                "description": "Cache key.",
                "required": true
            }
        ],
        "example": null,
        "tip": null,
        "documentation": "https://aoi.js.org/functions/deletecachedata",
        "source": "https://github.com/aoijs/aoi.js/tree/v6/src/functions/database/deleteCacheData.js",
        "type": "Aoi.Js"
    },
    {
        "function": "$deleteChannel",
        "description": "$deleteChannel will delete a specific channel.",
        "usage": "$deleteChannel[channelID]",
        "parameters": [
            {
                "field": "channelID",
                "type": "number",
                "description": "The channel ID of the channel which will be deleted.",
                "required": true
            }
        ],
        "example": "This will delete the channel where the command was executed in:\n\n```javascript\nclient.command({\n    name: \"deleteChannel\",\n    code: `\n  $deleteChannel[$channelID]\n  `\n});\n```",
        "tip": null,
        "documentation": "https://aoi.js.org/functions/deletechannel",
        "source": "https://github.com/aoijs/aoi.js/tree/v6/src/functions/guild/deleteChannel.js",
        "type": "Aoi.Js"
    },
    {
        "function": "$deleteChannels",
        "description": "$deleteChannels will delete multiple channels.",
        "usage": "$deleteChannels[...channels]",
        "parameters": [
            {
                "field": "...channels",
                "type": "number",
                "description": "The channel Ids of the channels which will be deleted.",
                "required": true
            }
        ],
        "example": "This will delete multiple channels, make sure to replace the arguments:\n\n```javascript\nclient.command({\n    name: \"deleteChannels\",\n    code: `\n  $deleteChannels[channelID1;channelID2;channelID3;channelID4]\n  `\n});\n```",
        "tip": null,
        "documentation": "https://aoi.js.org/functions/deletechannels",
        "source": "https://github.com/aoijs/aoi.js/tree/v6/src/functions/guild/deleteChannels.js",
        "type": "Aoi.Js"
    },
    {
        "function": "$deleteCommand",
        "description": "$deleteCommand will delete the initial command message.",
        "usage": "$deleteCommand",
        "parameters": [],
        "example": "This will delete the initial command message:\n\n```javascript\nclient.command({\n    name: \"deleteCommand\",\n    code: `\n  Hello!\n  $deleteCommand\n  `\n});\n```",
        "tip": null,
        "documentation": "https://aoi.js.org/functions/deletecommand",
        "source": "https://github.com/aoijs/aoi.js/tree/v6/src/functions/misc/deleteCommand.js",
        "type": "Aoi.Js"
    },
    {
        "function": "$deleteEmoji",
        "description": "$deleteEmoji will delete a specific emoji.",
        "usage": "$deleteEmoji[emoji]",
        "parameters": [
            {
                "field": "emoji",
                "type": "string",
                "description": "Emoji Name, ID or full form of the emoji which will be deleted.",
                "required": true
            }
        ],
        "example": "This will delete a random emoji of your guild:\n\n```javascript\nclient.command({\n    name: \"deleteEmoji\",\n    code: `\n  $deleteEmoji[$randomEmoji]\n  `\n});\n```",
        "tip": null,
        "documentation": "https://aoi.js.org/functions/deleteemoji",
        "source": "https://github.com/aoijs/aoi.js/tree/v6/src/functions/misc/deleteEmoji.js",
        "type": "Aoi.Js"
    },
    {
        "function": "$deleteEmojis",
        "description": "$deleteEmojis will delete multiple emoji.",
        "usage": "$deleteEmojis[...emojis]",
        "parameters": [
            {
                "field": "emojis",
                "type": "string",
                "description": "Emoji Name, ID or full form of the emoji which will be deleted.",
                "required": true
            }
        ],
        "example": "This will delete two random emojis of your guild:\n\n```javascript\nclient.command({\n    name: \"deleteEmojis\",\n    code: `\n  $deleteEmojis[$randomEmoji;$randomEmoji]\n  `\n});\n```",
        "tip": null,
        "documentation": "https://aoi.js.org/functions/deleteemojis",
        "source": "https://github.com/aoijs/aoi.js/tree/v6/src/functions/misc/deleteEmojis.js",
        "type": "Aoi.Js"
    },
    {
        "function": "$deleteFile",
        "description": "$deleteFile will delete a given file.",
        "usage": "$deleteFile[path]",
        "parameters": [
            {
                "field": "path",
                "type": "string",
                "description": "File path.",
                "required": true
            }
        ],
        "example": "This will delete your `index.js` (don't actually do that):\n\n```javascript\nclient.command({\n    name: \"deleteFile\",\n    code: `\n  $deleteFile[./index.js]\n  `\n});\n```",
        "tip": null,
        "documentation": "https://aoi.js.org/functions/deletefile",
        "source": "https://github.com/aoijs/aoi.js/tree/v6/src/functions/misc/deleteFile.js",
        "type": "Aoi.Js"
    },
    {
        "function": "$deleteGuild",
        "description": "$deleteGuild will delete a given guild.",
        "usage": "$deleteGuild[guildId]",
        "parameters": [
            {
                "field": "guildId",
                "type": "number",
                "description": "The id of the guild.",
                "required": true
            }
        ],
        "example": "This will attempt to delete the current guild:\n\n```javascript\nclient.command({\n    name: \"deleteGuild\",\n    code: `\n  $deleteGuild[$guildId]\n  `\n});\n```",
        "tip": null,
        "documentation": "https://aoi.js.org/functions/deleteguild",
        "source": "https://github.com/aoijs/aoi.js/tree/v6/src/functions/guild/deleteGuild.js",
        "type": "Aoi.Js"
    },
    {
        "function": "$deleteGuildTemplate",
        "description": "$deleteGuildTemplate will delete a guild template.",
        "usage": "$deleteGuildTemplate[templateCode?]",
        "parameters": [
            {
                "field": "templateCode",
                "type": "string",
                "description": "The code of the template.",
                "required": true
            }
        ],
        "example": "This will delete a guild template.\n\n```javascript\nclient.command({\n    name: \"deleteGuildTemplate\",\n    code: `\n  $deleteGuildTemplate[TEMPLATE CODE]\n  `\n});\n```",
        "tip": null,
        "documentation": "https://aoi.js.org/functions/deleteguildtemplate",
        "source": "https://github.com/aoijs/aoi.js/tree/v6/src/functions/guild/deleteGuildTemplate.js",
        "type": "Aoi.Js"
    },
    {
        "function": "$deleteIn",
        "description": "$deleteIn will delete a message after a given time.",
        "usage": "$deleteIn[time]",
        "parameters": [
            {
                "field": "time",
                "type": "string",
                "description": "After how much time the message will be deleted.",
                "required": true
            }
        ],
        "example": "This will delete the sent message after five seconds:\n\n```javascript\nclient.command({\n    name: \"deleteIn\",\n    code: `\n  $deleteIn[5s]\n  I'll delete this message in 5 seconds!\n  `\n});\n```",
        "tip": null,
        "documentation": "https://aoi.js.org/functions/deletein",
        "source": "https://github.com/aoijs/aoi.js/tree/v6/src/functions/misc/deleteIn.js",
        "type": "Aoi.Js"
    },
    {
        "function": "$deleteInvite",
        "description": "$deleteInvite will delete a specific guild invite.",
        "usage": "$deleteInvite[guildID;inviteCode;reason?]",
        "parameters": [
            {
                "field": "guildID",
                "type": "number",
                "description": "The guild ID whose invite should be deleted.",
                "required": true
            },
            {
                "field": "inviteCode",
                "type": "string",
                "description": "The specific invite code.",
                "required": true
            },
            {
                "field": "reason",
                "type": "string",
                "description": "Reason which will be displayed in the guild's audit logs.",
                "required": false
            }
        ],
        "example": "This will delete an invite (wont work as the invite code doesn't exist):\n\n```javascript\nclient.command({\n    name: \"deleteInvite\",\n    code: `\n  $deleteInvite[$guildID;ifawd9a;Testing!]\n  `\n});\n```",
        "tip": null,
        "documentation": "https://aoi.js.org/functions/deleteinvite",
        "source": "https://github.com/aoijs/aoi.js/tree/v6/src/functions/misc/deleteInvite.js",
        "type": "Aoi.Js"
    },
    {
        "function": "$deleteMessage",
        "description": "$deleteMessage will delete a specific message.",
        "usage": "$deleteMessage[messageID;channelID]",
        "parameters": [
            {
                "field": "messageID",
                "type": "number",
                "description": "The message ID of the channel which will be deleted.",
                "required": true
            },
            {
                "field": "channelID",
                "type": "number",
                "description": "The channel ID of where the message is located in.",
                "required": false
            }
        ],
        "example": "This will send and delete the sent message after 15 seconds ( we are using $let and $get to temporary store the message\nID ):\n\n```javascript\nclient.command({\n    name: \"deleteMessage\",\n    code: `\n  $deleteMessage[$get[id];$channelID]\n  $let[id;$sendMessage[Hello!;true]]\n  `\n});\n```",
        "tip": null,
        "documentation": "https://aoi.js.org/functions/deletemessage",
        "source": "https://github.com/aoijs/aoi.js/tree/v6/src/functions/misc/deleteMessage.js",
        "type": "Aoi.Js"
    },
    {
        "function": "$deleteObject",
        "description": "$deleteObject will delete a previously created object.",
        "usage": "$deleteObject[objectName]",
        "parameters": [
            {
                "field": "objectName",
                "type": "string",
                "description": "The object name.",
                "required": true
            }
        ],
        "example": "```javascript\nclient.command({\n    name: \"deleteObject\",\n    code: `\n  $deleteObject[Object Name]\n  $getObjectProperty[Object Name;Leref]\n  $createObject[Object Name;{\n    \"Leref\": \"Ferel\",\n    \"aoi.js\": \"dbd.js\"\n  }]\n  `\n});\n```",
        "tip": null,
        "documentation": "https://aoi.js.org/functions/deleteobject",
        "source": "https://github.com/aoijs/aoi.js/tree/v6/src/functions/misc/deleteObject.js",
        "type": "Aoi.Js"
    },
    {
        "function": "$deleteRoles",
        "description": "$deleteRoles will delete one or multiple roles.",
        "usage": "$deleteRoles[guildID;...roles]",
        "parameters": [
            {
                "field": "guildID",
                "type": "number",
                "description": "The guild ID of where the roles are located in.",
                "required": true
            },
            {
                "field": "...roles",
                "type": "number",
                "description": "The IDs of the roles.",
                "required": true
            }
        ],
        "example": "This will delete roles of your guilds ( make sure to add actual IDs ):\n\n```javascript\nclient.command({\n    name: \"deleteRoles\",\n    code: `\n  Deleted three roles!\n  $deleteRoles[$guildID;roleID1;roleID2;roleID3]\n  `\n});\n```",
        "tip": null,
        "documentation": "https://aoi.js.org/functions/deleteroles",
        "source": "https://github.com/aoijs/aoi.js/tree/v6/src/functions/misc/deleteRoles.js",
        "type": "Aoi.Js"
    },
    {
        "function": "$deleteStageInstance",
        "description": "$deleteStageInstance will end an existing stage instance.",
        "usage": "$deleteStageInstance[channelID]",
        "parameters": [
            {
                "field": "channelID",
                "type": "number",
                "description": "The stage channel ID of the current stage instance.",
                "required": true
            }
        ],
        "example": "This will end the current stage instance: ( make sure to replace stageID with an actual stage ID )\n\n```javascript\nclient.command({\n    name: \"deleteStageInstance\",\n    code: `\n  $deleteStageInstance[stageInstance]\n  `\n});\n```",
        "tip": null,
        "documentation": "https://aoi.js.org/functions/deletestageinstance",
        "source": "https://github.com/aoijs/aoi.js/tree/v6/src/functions/misc/deleteStageInstance.js",
        "type": "Aoi.Js"
    },
    {
        "function": "$deleteSticker",
        "description": "$deleteSticker will delete a given sticker.",
        "usage": "$deleteSticker[guildID;sticker]",
        "parameters": [
            {
                "field": "guildID",
                "type": "number",
                "description": "The guild ID of where the sticker is located in.",
                "required": true
            },
            {
                "field": "sticker",
                "type": "string",
                "description": "The name of the sticker.",
                "required": true
            }
        ],
        "example": "This will delete a sticker of your guild ( make sure to provide an actual sticker name ):\n\n```javascript\nclient.command({\n    name: \"deleteSticker\",\n    code: `\n  $deleteSticker[$guildID;sticker]\n  `\n});\n```",
        "tip": null,
        "documentation": "https://aoi.js.org/functions/deletesticker",
        "source": "https://github.com/aoijs/aoi.js/tree/v6/src/functions/misc/deleteSticker.js",
        "type": "Aoi.Js"
    },
    {
        "function": "$deleteTestEntitlement",
        "description": "$deleteTestEntitlement will delete the provided test entitlement",
        "usage": "$deleteTestEntitlement[skuID]",
        "parameters": [
            {
                "field": "skuID",
                "type": "number",
                "description": "Your generated [SKU ID](https://discord.com/developers/docs/resources/sku).",
                "required": true
            }
        ],
        "example": "This will delete the provided test entitlement:\n\n```javascript\nclient.command({\n    name: \"deleteTestEntitlement\",\n    code: `\n   $deleteTestEntitlement[123456789] \n   $comment[Example value of SKU ID]\n  `\n});\n```",
        "tip": null,
        "documentation": "https://aoi.js.org/functions/deletetestentitlement",
        "source": "https://github.com/aoijs/aoi.js/tree/v6/src/functions/misc/deleteTestEntitlement.js",
        "type": "Aoi.Js"
    },
    {
        "function": "$deleteThread",
        "description": "$deleteThread will delete a given thread of a channel.",
        "usage": "$deleteThread[channelID;threadID;reason?]",
        "parameters": [
            {
                "field": "channelID",
                "type": "number",
                "description": "The ID of the channel where the thread exists in.",
                "required": true
            },
            {
                "field": "threadID",
                "type": "number",
                "description": "The thread ID.",
                "required": true
            },
            {
                "field": "reason",
                "type": "string",
                "description": "The reason which will be displayed in the guild's audit logs.",
                "required": false
            }
        ],
        "example": "This will delete a thread of the channel where you execute the command in ( make sure to replace threadID with an actual\nthread ID ):\n\n```javascript\nclient.command({\n    name: \"deleteThread\",\n    code: `\n  $deleteThread[$channelID;threadID;Crazy Example.]\n  `\n});\n```",
        "tip": null,
        "documentation": "https://aoi.js.org/functions/deletethread",
        "source": "https://github.com/aoijs/aoi.js/tree/v6/src/functions/misc/deleteThread.js",
        "type": "Aoi.Js"
    },
    {
        "function": "$deleteVar",
        "description": "$deleteVar will delete a given variable.",
        "usage": "$deleteVar[variable;id;table?]",
        "parameters": [
            {
                "field": "variable",
                "type": "string",
                "description": "Variable name.",
                "required": true
            },
            {
                "field": "id",
                "type": "number",
                "description": "ID of the variable to delete ( userID etc. ).",
                "required": true
            },
            {
                "field": "table",
                "type": "string",
                "description": "Variable table.",
                "required": false
            }
        ],
        "example": "This will delete a variable called \"Test\":\n\n```javascript\nclient.command({\n    name: \"deleteVar\",\n    code: `\n  $deleteVar[Test;$authorID;main]\n  `\n});\n```",
        "tip": null,
        "documentation": "https://aoi.js.org/functions/deletevar",
        "source": "https://github.com/aoijs/aoi.js/tree/v6/src/functions/database/deleteVar.js",
        "type": "Aoi.Js"
    },
    {
        "function": "$deleteWebhook",
        "description": "$deleteWebhook will delete a given Webhook.",
        "usage": "$deleteWebhook[webhookID;webhookToken]",
        "parameters": [
            {
                "field": "webhookID",
                "type": "number",
                "description": "The ID of the webhook.",
                "required": true
            },
            {
                "field": "webhookToken",
                "type": "string",
                "description": "The token of the webhook.",
                "required": true
            }
        ],
        "example": "This will delete a webhook of your guild:\n\n```javascript\nclient.command({\n    name: \"deleteWebhook\",\n    code: `\n  $deleteWebhook[webhookID;webhookToken]\n  ` // replace the fields with the actual information.\n});\n```",
        "tip": null,
        "documentation": "https://aoi.js.org/functions/deletewebhook",
        "source": "https://github.com/aoijs/aoi.js/tree/v6/src/functions/misc/deleteWebhook.js",
        "type": "Aoi.Js"
    },
    {
        "function": "$description",
        "description": "$description is used for embeds to add an description field.",
        "usage": "$description[index?;description]",
        "parameters": [
            {
                "field": "index",
                "type": "number",
                "description": "The embed index.",
                "required": false
            },
            {
                "field": "description",
                "type": "string",
                "description": "The content of the embeds description.",
                "required": true
            }
        ],
        "example": "This will send an embed with the content `aoi.js is great!`:\n\n```javascript\nclient.command({\n    name: \"embed\",\n    code: `\n  $description[aoi.js is great!]\n  `\n});\n```",
        "tip": null,
        "documentation": "https://aoi.js.org/functions/description",
        "source": "https://github.com/aoijs/aoi.js/tree/v6/src/functions/embeds/description.js",
        "type": "Aoi.Js"
    },
    {
        "function": "$digitalFormat",
        "description": "$digitalFormat will return a digital formatted time converted from ms.",
        "usage": "$digitalFormat[ms]",
        "parameters": [
            {
                "field": "ms",
                "type": "number",
                "description": "Time in milliseconds you wish to convert.",
                "required": true
            }
        ],
        "example": "This will return `00:04:00` as `240000ms` are four minutes:\n\n```javascript\nclient.command({\n    name: \"digitalFormat\",\n    code: `\n  $digitalFormat[240000]\n  `\n});\n```",
        "tip": null,
        "documentation": "https://aoi.js.org/functions/digitalformat",
        "source": "https://github.com/aoijs/aoi.js/tree/v6/src/functions/misc/digitalFormat.js",
        "type": "Aoi.Js"
    },
    {
        "function": "$disableComponents",
        "description": "$disableComponents disables all components for a specific message.",
        "usage": "$disableComponents[channelID;messageID;type?]",
        "parameters": [
            {
                "field": "channelID",
                "type": "number",
                "description": "Channel ID of the command that has been executed.",
                "required": true
            },
            {
                "field": "messageID",
                "type": "number",
                "description": "The ID of the message that will disable the components.",
                "required": true
            },
            {
                "field": "type",
                "type": "string",
                "description": "The type of component that will be disabled. \n1. **all** (default) \n2. **button** \n3. **selectmenu**",
                "required": false
            }
        ],
        "example": "This will send a message with a button that will be disabled after 5 seconds.\n```js\nclient.command({\n    name: \"disableComponents\",\n    code: `\n$disableComponents[$channelID;$get[msgID];button]\n$wait[5s]\n$let[msgID;$sendMessage[This button will be disabled in 5 seconds.\n{actionRow:{button:Button:primary:customID:false}};true]]`\n});\n```\nThis will disable all the components of the message. You can either leave the type option empty or specify `all`.\n```js\nclient.command({\n    name: \"disableComponents\",\n    code: `\n$disableComponents[$channelID;$get[msgID]]\n$wait[5s]\n$let[msgID;$sendMessage[These components will be disabled in 5 seconds. \n{actionRow:{button:Button:primary:customID:false}} \n{actionRow:{selectMenu:MenuCustomID:Placeholder:1:1:false:{stringInput:Option:1:Option Description:false}}};true]]\n`\n});\n```",
        "tip": null,
        "documentation": "https://aoi.js.org/functions/disablecomponents",
        "source": "https://github.com/aoijs/aoi.js/tree/v6/src/functions/components/disableComponents.js",
        "type": "Aoi.Js"
    },
    {
        "function": "$disableMentionType",
        "description": "$disableMentionType will disable a specific mention type.",
        "usage": "$disableMentionType[type]",
        "parameters": [
            {
                "field": "type",
                "type": "string",
                "description": "Type of mention you want to disable.",
                "required": true
            }
        ],
        "example": "This will stop the bot from mentioning you:\n\n```javascript\nclient.command({\n    name: \"mention\",\n    code: `\n<@$authorID>\n$disableMentionType[users] \n  `\n});\n```\n\nThis will stop the bot from mentioning anyone or anything:\n\n```javascript\nclient.command({\n    name: \"mention\",\n    code: `\n<@$authorID>\n$disableMentionType[all] \n  `\n});\n```",
        "tip": null,
        "documentation": "https://aoi.js.org/functions/disablementiontype",
        "source": "https://github.com/aoijs/aoi.js/tree/v6/src/functions/misc/disableMentionType.js",
        "type": "Aoi.Js"
    },
    {
        "function": "$disconnectUser",
        "description": "$disconnectUser disconnects the user from the voice or stage channel.",
        "usage": "$disconnectUser[userID;guildID;reason?]",
        "parameters": [
            {
                "field": "userID",
                "type": "number",
                "description": "The user ID.",
                "required": true
            },
            {
                "field": "guildID",
                "type": "number",
                "description": "The guild ID.",
                "required": true
            },
            {
                "field": "reason",
                "type": "string",
                "description": "The reason that will be displayed in the guild’s audit logs.",
                "required": false
            }
        ],
        "example": "This will disconnect the mentioned user from the current channel (if its voice or stage channel):\n\n```js\nclient.command({\n    name: \"disconnectUser\",\n    code: `$disconnectUser[$mentioned[1];$guildID]`\n});\n```",
        "tip": null,
        "documentation": "https://aoi.js.org/functions/disconnectuser",
        "source": "https://github.com/aoijs/aoi.js/tree/v6/src/functions/guild/disconnectUser.js",
        "type": "Aoi.Js"
    },
    {
        "function": "$discordTimestamp",
        "description": "$discordTimestamp converts a timestamp into a discord timestamp.",
        "usage": "$discordTimestamp[ms;flag?]",
        "parameters": [
            {
                "field": "ms",
                "type": "number",
                "description": "A valid date in ms.",
                "required": true
            },
            {
                "field": "flag",
                "type": "string",
                "description": "The flags to use.",
                "required": false
            }
        ],
        "example": "This will return the current time in discord's timestamp formatting (long date):\n\n```js\nclient.command({\n  name: \"discordTimestamp\",\n  code: `$discordTimestamp[$dateStamp;F]`,\n});\n```",
        "tip": null,
        "documentation": "https://aoi.js.org/functions/discordtimestamp",
        "source": "https://github.com/aoijs/aoi.js/tree/v6/src/functions/embeds/discordTimestamp.js",
        "type": "Aoi.Js"
    },
    {
        "function": "$discriminator",
        "description": "$discriminator will return a user's discriminator.",
        "usage": "$discriminator[userId?]",
        "parameters": [
            {
                "field": "userId",
                "type": "number",
                "description": "The ID of the user you want the discriminator to be returned of.",
                "required": false
            }
        ],
        "example": "This will return your Discord User Discriminator, for example `User#0000` (the four digits):\n\n```javascript\nclient.command({\n    name: \"discriminator\",\n    code: `\n  $discriminator[$authorID] // your discriminator\n  $discriminator[$clientID] // the bot's discriminator\n  `\n});\n```",
        "tip": null,
        "documentation": "https://aoi.js.org/functions/discriminator",
        "source": "https://github.com/aoijs/aoi.js/tree/v6/src/functions/misc/discriminator.js",
        "type": "Aoi.Js"
    },
    {
        "function": "$divide",
        "description": "$divide will divide two given numbers.",
        "usage": "$divide[...numbers;...numbers]",
        "parameters": [
            {
                "field": "numbers",
                "type": "number",
                "description": "Numbers you want to divide with each other.",
                "required": true
            }
        ],
        "example": "This will return `23` as `69/3` equals it.\n\n```javascript\nclient.command({\n    name: \"divide\",\n    code: `\n  $divide[69;3]\n  `\n});\n```",
        "tip": null,
        "documentation": "https://aoi.js.org/functions/divide",
        "source": "https://github.com/aoijs/aoi.js/tree/v6/src/functions/math/divide.js",
        "type": "Aoi.Js"
    },
    {
        "function": "$djsEval",
        "description": "$djsEval will execute given javascript code.",
        "usage": "$djsEval[code;returnCode?]",
        "parameters": [
            {
                "field": "code",
                "type": "string",
                "description": "Javascript code to execute.",
                "required": true
            },
            {
                "field": "returnCode",
                "type": "string",
                "description": "Return code. \n1. **true** \n2. **false** (default)",
                "required": false
            }
        ],
        "example": "This will return your user ID:\n\n```javascript\nclient.command({\n    name: \"djsEval\",\n    code: `\n  $djsEval[msg.author.id;true]\n  `\n});\n```",
        "tip": null,
        "documentation": "https://aoi.js.org/functions/djseval",
        "source": "https://github.com/aoijs/aoi.js/tree/v6/src/functions/misc/djsEval.js",
        "type": "Aoi.Js"
    },
    {
        "function": "$dm",
        "description": "$dm will send a message to an users Direct Messages.",
        "usage": "$dm[userID]",
        "parameters": [
            {
                "field": "userID",
                "type": "number",
                "description": "The user which shall receive the DM.",
                "required": true
            }
        ],
        "example": "This will send an DM to you containing \"Hello! Did you really think this works?\":\n\n```javascript\nclient.command({\n    name: \"dm\",\n    code: `\n  Hello! Did you really think this works?\n  $dm[$authorID]\n  `\n});\n```",
        "tip": null,
        "documentation": "https://aoi.js.org/functions/dm",
        "source": "https://github.com/aoijs/aoi.js/tree/v6/src/functions/misc/dm.js",
        "type": "Aoi.Js"
    },
    {
        "function": "$editAppEmoji",
        "description": "$editAppEmoji will modify a specific application emoji.",
        "usage": "$editAppEmoji[name;newName;returnEmoji?]",
        "parameters": [
            {
                "field": "name",
                "type": "string",
                "description": "The name of the emoji.",
                "required": true
            },
            {
                "field": "newName",
                "type": "string",
                "description": "The new name of the emoji.",
                "required": true
            },
            {
                "field": "returnEmoji",
                "type": "boolean",
                "description": "Returns the emoji.",
                "required": false
            }
        ],
        "example": "This will modify the given application emoji name from \"leref\" to \"fafa\":\n\n```js\nclient.command({\n    name: \"editAppEmoji\",\n    code: `\n$editAppEmoji[leref;fafa;false]\n  `\n});\n```",
        "tip": null,
        "documentation": "https://aoi.js.org/functions/editappemoji",
        "source": "https://github.com/aoijs/aoi.js/tree/v6/src/functions/misc/editAppEmoji.js",
        "type": "Aoi.Js"
    },
    {
        "function": "$editButton",
        "description": "$editButton will edit an existing button.",
        "usage": "$editButton[customId;label;style;disabled?;emoji?;messageId?;channelId?]",
        "parameters": [
            {
                "field": "customId",
                "type": "string",
                "description": "The custom ID of the button you wish to edit.",
                "required": true
            },
            {
                "field": "label",
                "type": "string",
                "description": "The text that will be displayed on the button as label.",
                "required": true
            },
            {
                "field": "style",
                "type": "string",
                "description": "The button **[style](https://discord.com/developers/docs/interactions/message-components#button-object-button-styles)**.",
                "required": true
            },
            {
                "field": "disabled",
                "type": "boolean",
                "description": "Make the button unusable/disabled? \n1. **true** \n2. **false** (default)",
                "required": false
            },
            {
                "field": "emoji",
                "type": "string",
                "description": "The emoji displayed in the button.",
                "required": false
            },
            {
                "field": "messageId",
                "type": "number",
                "description": "The Id of the message.",
                "required": true
            },
            {
                "field": "channelId",
                "type": "number",
                "description": "The channel Id of where the message is located.",
                "required": true
            }
        ],
        "example": "This adds a primary and link button to the bot's message:\n\n```javascript\nclient.command({\n    name: \"editButton\",\n    code: `\n    Hello!\n    $addButton[1;Example Button!;primary;exampleButton;false;💔]\n  `\n});\n```\n\n```javascript\nmodule.exports = [\n    {\n        name: \"exampleButton\",\n        type: \"interaction\",\n        prototype: \"button\",\n        code: `\n    $editButton[exampleButton;New Button!;secondary;true;😀;$interactionData[message.id];$interactionData[channel.id]]\n    $interactionReply[The button just changed!]`\n    }\n];\n```",
        "tip": null,
        "documentation": "https://aoi.js.org/functions/editbutton",
        "source": "https://github.com/aoijs/aoi.js/tree/v6/src/functions/components/editButton.js",
        "type": "Aoi.Js"
    },
    {
        "function": "$editChannel",
        "description": "$editChannel will edit a channel.",
        "usage": "$editChannel[channelID;name?;type?;position?;topic?;nsfw?;bitrate?;userlimit?;parent?;lockPermissions?;permissionOverwrites?;rateLimitPerUser?;defaultAutoArchiveDuration?;rtcRegion?;reason?]",
        "parameters": [
            {
                "field": "channelID",
                "type": "number",
                "description": "The ID of the channel which will be notified.",
                "required": true
            },
            {
                "field": "name",
                "type": "string",
                "description": "The new channel name.",
                "required": false
            },
            {
                "field": "type",
                "type": "string",
                "description": "The new channel type. (listed below)",
                "required": false
            },
            {
                "field": "position",
                "type": "string",
                "description": "The new channel position.",
                "required": false
            },
            {
                "field": "topic",
                "type": "string",
                "description": "The new channel topic.",
                "required": false
            },
            {
                "field": "nsfw",
                "type": "boolean",
                "description": "If it should mark the channel as NSFW or not.",
                "required": false
            },
            {
                "field": "bitrate",
                "type": "number",
                "description": "Voice Channel bitrate.",
                "required": false
            },
            {
                "field": "userlimit",
                "type": "number",
                "description": "Voice Channel userlimit.",
                "required": false
            },
            {
                "field": "parent",
                "type": "number",
                "description": "The new parent of the channel. (category ID)",
                "required": false
            },
            {
                "field": "lockPermissions",
                "type": "string",
                "description": "The new channels lock permissions.",
                "required": false
            },
            {
                "field": "permissionOverwrites",
                "type": "string",
                "description": "The new channels permission overwrites.",
                "required": false
            },
            {
                "field": "rateLimitPerUser",
                "type": "number",
                "description": "The channel slowmode of the edited channel.",
                "required": false
            },
            {
                "field": "defaultAutoArchiveDuration",
                "type": "number",
                "description": "Thread/Forum archive duration. (in ms)",
                "required": false
            },
            {
                "field": "rtcRegion",
                "type": "string",
                "description": "Voice Channel RTC region.",
                "required": false
            },
            {
                "field": "reason",
                "type": "string",
                "description": "Reason which will be displayed in the guild's audit logs.",
                "required": false
            }
        ],
        "example": "This will change the current channel name to \"i-love-aoijs\":\n\n```javascript\nclient.command({\n    name: \"editChannel\",\n    code: `\n  $editChannel[$channelID;i-love-aoi-js]\n  `\n});\n```",
        "tip": null,
        "documentation": "https://aoi.js.org/functions/editchannel",
        "source": "https://github.com/aoijs/aoi.js/tree/v6/src/functions/guild/editChannel.js",
        "type": "Aoi.Js"
    },
    {
        "function": "$editIn",
        "description": "$editIn will edit a message after a given time.",
        "usage": "$editIn[time;...content]",
        "parameters": [
            {
                "field": "time",
                "type": "string",
                "description": "After how much time the message will be edited.",
                "required": true
            },
            {
                "field": "content",
                "type": "string",
                "description": "What the new content of the message should be.",
                "required": true
            }
        ],
        "example": "This will edit the sent message after five seconds:\n\n```javascript\nclient.command({\n    name: \"editIn\",\n    code: `\n  $editIn[5s;aoi.js is great, don't you agree?;Yes, I do!]\n  I'll edit this message in 5 seconds!\n  `\n});\n```",
        "tip": null,
        "documentation": "https://aoi.js.org/functions/editin",
        "source": "https://github.com/aoijs/aoi.js/tree/v6/src/functions/misc/editIn.js",
        "type": "Aoi.Js"
    },
    {
        "function": "$editMessage",
        "description": "$editMessage will edit a given message.",
        "usage": "$editMessage[messageID;content;channelID?]",
        "parameters": [
            {
                "field": "messageID",
                "type": "number",
                "description": "The message that should be edited.",
                "required": true
            },
            {
                "field": "content",
                "type": "string",
                "description": "The content of the new message.",
                "required": true
            },
            {
                "field": "channelID",
                "type": "number",
                "description": "The channel ID of where the message is located in.",
                "required": false
            }
        ],
        "example": "This will edit the sent message after five seconds: ( works the same way as `$editIn` )\n\n```javascript\nclient.command({\n    name: \"editMessage\",\n    code: `\n  $editMessage[$get[id];Bye!]\n  $wait[5s]\n  $let[id;$sendMessage[Hello!;true]]\n  `\n});\n```",
        "tip": null,
        "documentation": "https://aoi.js.org/functions/editmessage",
        "source": "https://github.com/aoijs/aoi.js/tree/v6/src/functions/misc/editMessage.js",
        "type": "Aoi.Js"
    },
    {
        "function": "$editObjectProperty",
        "description": "$editObjectProperty edits the value of the object property.",
        "usage": "$editObjectProperty[objectName;property;newValue]",
        "parameters": [
            {
                "field": "objectName",
                "type": "string",
                "description": "The name of the object.",
                "required": true
            },
            {
                "field": "property",
                "type": "number",
                "description": "The name of the property.",
                "required": true
            },
            {
                "field": "newValue",
                "type": "boolean",
                "description": "The new value of the property.",
                "required": true
            }
        ],
        "example": "This will change the value of the property \"year\" from `2023` to `2024` and return it:\n\n```js\nclient.command({\n    name: `$getObjectProperty[obj;year]\n  $editObjectProperty[obj;year;2024]\n  $createObject[obj;{\n    \"year\": \"2023\"\n  }]`\n});\n```",
        "tip": null,
        "documentation": "https://aoi.js.org/functions/editobjectproperty",
        "source": "https://github.com/aoijs/aoi.js/tree/v6/src/functions/misc/editObjectProperty.js",
        "type": "Aoi.Js"
    },
    {
        "function": "$editTextSplitElement",
        "description": "$editTextSplitElement will edit a specific text split element.",
        "usage": "$editTextSplitElement[index;text]",
        "parameters": [
            {
                "field": "index",
                "type": "string",
                "description": "Index of the text split element.",
                "required": true
            },
            {
                "field": "text",
                "type": "string",
                "description": "New text split element.",
                "required": true
            }
        ],
        "example": "This will edit the 3rd text split element and change it to \"Goodbye\":\n\n```javascript\nclient.command({\n    name: \"editTextSplitElement\",\n    code: `\n  $editTextSplitElement[3;Goodbye]\n  $textSplit[Hello, Bye, Cya;, ]\n  `\n});\n```",
        "tip": null,
        "documentation": "https://aoi.js.org/functions/edittextsplitelement",
        "source": "https://github.com/aoijs/aoi.js/tree/v6/src/functions/misc/editTextSplitElement.js",
        "type": "Aoi.Js"
    },
    {
        "function": "$editWebhookMessage",
        "description": "$editWebhookMessage will edit a given webhook message.",
        "usage": "$editWebhookMessage[webhookID;webhookToken;messageID;content]",
        "parameters": [
            {
                "field": "webhookID",
                "type": "number",
                "description": "Webhook ID.",
                "required": true
            },
            {
                "field": "webhookToken",
                "type": "string",
                "description": "The Webhook Token.",
                "required": true
            },
            {
                "field": "messageID",
                "type": "number",
                "description": "The message ID to edit.",
                "required": true
            },
            {
                "field": "content",
                "type": "string",
                "description": "The new message content.",
                "required": true
            }
        ],
        "example": null,
        "tip": null,
        "documentation": "https://aoi.js.org/functions/editwebhookmessage",
        "source": "https://github.com/aoijs/aoi.js/tree/v6/src/functions/misc/editWebhookMessage.js",
        "type": "Aoi.Js"
    },
    {
        "function": "$elseif",
        "description": "$elseif is used to create an else statement with condition.",
        "usage": "$elseif[condition]",
        "parameters": [],
        "example": "Example usage of `$if: old` (will return \"Hello\" when the condition is true):\n\nYou require `$endelseif` to end the `$elseIf` statement.\n\n```javascript\nclient.command({\n    name: \"if\",\n    $if: \"old\",\n    code: `\n  $if[1==2]\n  Hello!\n  $elseif[2==4]\n  $endelseif\n  $endif\n  `\n});\n```",
        "tip": null,
        "documentation": "https://aoi.js.org/functions/elseif",
        "source": "https://github.com/aoijs/aoi.js/tree/v6/src/functions/undefined/elseif.js",
        "type": "Aoi.Js"
    },
    {
        "function": "$emojiCount",
        "description": "$emojiCount will return the emoji count of a guild.",
        "usage": "$emojiCount[guildID?]",
        "parameters": [
            {
                "field": "guildID",
                "type": "number",
                "description": "From where the emojis will be counted and returned of.",
                "required": false
            }
        ],
        "example": "This will return the emoji count of your guild:\n\n```javascript\nclient.command({\n    name: \"emojiCount\",\n    code: `\n  You have $emojiCount emojis in your guild!\n  `\n});\n```",
        "tip": null,
        "documentation": "https://aoi.js.org/functions/emojicount",
        "source": "https://github.com/aoijs/aoi.js/tree/v6/src/functions/misc/emojiCount.js",
        "type": "Aoi.Js"
    },
    {
        "function": "$emojiExists",
        "description": "$emojiExists will check if the given emoji exists.",
        "usage": "$emojiExists[emojiResolver]",
        "parameters": [
            {
                "field": "emojiResolver",
                "type": "string",
                "description": "Emoji you want to check if it exists.",
                "required": true
            }
        ],
        "example": "This will return `true` as\nthe ![emoji](https://cdn.discordapp.com/emojis/1003365344724910191.webp?size=16&quality=lossless) emoji exists:\n\n```javascript\nclient.command({\n    name: \"emojiExists\",\n    code: `\n  $emojiExists[<:LerefMoney:1003365344724910191>]\n  `\n});\n```",
        "tip": null,
        "documentation": "https://aoi.js.org/functions/emojiexists",
        "source": "https://github.com/aoijs/aoi.js/tree/v6/src/functions/misc/emojiExists.js",
        "type": "Aoi.Js"
    },
    {
        "function": "$emojiName",
        "description": "$emojiName will return the name of an emoji.",
        "usage": "$emojiName[emojiResolver]",
        "parameters": [
            {
                "field": "emojiResolver",
                "type": "string",
                "description": "Emoji string, id.",
                "required": true
            }
        ],
        "example": "This will return the name of an emoji:\n\n```javascript\nclient.command({\n    name: \"emojiName\",\n    code: `\n  $emojiName[emojiResolver]\n  `\n});\n```",
        "tip": null,
        "documentation": "https://aoi.js.org/functions/emojiname",
        "source": "https://github.com/aoijs/aoi.js/tree/v6/src/functions/misc/emojiName.js",
        "type": "Aoi.Js"
    },
    {
        "function": "$emojiURL",
        "description": "$emojiURL will return the emoji URL of an emoji.",
        "usage": "$emojiURL[emojiResolver]",
        "parameters": [
            {
                "field": "emojiResolver",
                "type": "string",
                "description": "Emoji string, id.",
                "required": true
            }
        ],
        "example": "This will return the URL of an emoji:\n\n```javascript\nclient.command({\n    name: \"emojiURL\",\n    code: `\n  $emojiURL[emojiResolver]\n  `\n});\n```",
        "tip": null,
        "documentation": "https://aoi.js.org/functions/emojiurl",
        "source": "https://github.com/aoijs/aoi.js/tree/v6/src/functions/misc/emojiURL.js",
        "type": "Aoi.Js"
    },
    {
        "function": "$emojisFromMessage",
        "description": "$emojisFromMessage will retrieve all emojis given in a message.",
        "usage": "$emojisFromMessage",
        "parameters": [],
        "example": "This will return any emojis you give as argument:\n\n```javascript\nclient.command({\n    name: \"emojisFromMessage\",\n    code: `\n$emojisFromMessage\n  `\n});\n```",
        "tip": null,
        "documentation": "https://aoi.js.org/functions/emojisfrommessage",
        "source": "https://github.com/aoijs/aoi.js/tree/v6/src/functions/misc/emojisFromMessage.js",
        "type": "Aoi.Js"
    },
    {
        "function": "$enableComponents",
        "description": "$enableComponents enables all components for a specific message.",
        "usage": "$enableComponents[channelID;messageID;type?]",
        "parameters": [
            {
                "field": "channelID",
                "type": "number",
                "description": "Channel ID of the command that has been executed.",
                "required": true
            },
            {
                "field": "messageID",
                "type": "number",
                "description": "The ID of the message whose components will be enabled.",
                "required": true
            },
            {
                "field": "type",
                "type": "string",
                "description": "The type of component that will be enabled. \n1. **all** (default) \n2. **button** \n3. **selectmenu**",
                "required": false
            }
        ],
        "example": "This will send a message with a button that will be enabled after 5 seconds.  \n\n```js\nclient.command({\n    name: \"enableComponents\",\n    code: `\n$enableComponents[$channelID;$get[msgID];button]\n$wait[5s]\n$let[msgID;$sendMessage[This button will be enabled in 5 seconds.\n{actionRow:{button:Button:primary:customID:false}};true]]`\n});\n```\nThis will enable all the components of the message. You can either leave the type option empty or specify `all`.\n```js\nclient.command({\n    name: \"enableComponents\",\n    code: `\n$enableComponents[$channelID;$get[msgID]]\n$wait[5s]\n$let[msgID;$sendMessage[These components will be enabled in 5 seconds. \n{actionRow:{button:Button:primary:customID:false}} \n{actionRow:{selectMenu:MenuCustomID:Placeholder:1:1:false:{stringInput:Option:1:Option Description:false}}};true]]\n`\n});\n```",
        "tip": null,
        "documentation": "https://aoi.js.org/functions/enablecomponents",
        "source": "https://github.com/aoijs/aoi.js/tree/v6/src/functions/components/enableComponents.js",
        "type": "Aoi.Js"
    },
    {
        "function": "$endPoll",
        "description": "$endPoll will close the poll.",
        "usage": "$endPoll[channelID?;messageID?]",
        "parameters": [
            {
                "field": "channelID",
                "type": "number",
                "description": "The channel ID where the poll is located",
                "required": false
            },
            {
                "field": "messageID",
                "type": "number",
                "description": "The message ID of the poll that will be closed.",
                "required": false
            }
        ],
        "example": "This will close the chosen poll, replace the `channelID` and `messageID` with actual IDs:\n\n```js\nclient.command({\n  name: \"endPoll\",\n  code: `$endPoll[channelID;messageID]`\n});\n```",
        "tip": null,
        "documentation": "https://aoi.js.org/functions/endpoll",
        "source": "https://github.com/aoijs/aoi.js/tree/v6/src/functions/misc/endPoll.js",
        "type": "Aoi.Js"
    },
    {
        "function": "$endelseif",
        "description": "$endelseif is used to end an elseif statement.",
        "usage": "$endelseif",
        "parameters": [],
        "example": "Example usage of `$if: old` (will return \"Hello\" when the condition is true):\n\n```javascript\nclient.command({\n    name: \"if\",\n    $if: \"old\",\n    code: `\n  $if[1==2]\n  Hello!\n  $elseif[2==4]\n  $endelseif\n  $endif\n  `\n});\n```",
        "tip": null,
        "documentation": "https://aoi.js.org/functions/endelseif",
        "source": "https://github.com/aoijs/aoi.js/tree/v6/src/functions/undefined/endelseif.js",
        "type": "Aoi.Js"
    },
    {
        "function": "$endif",
        "description": "$endif is used to end an if statement.",
        "usage": "$endif",
        "parameters": [],
        "example": "Example usage of `$if: old` (will return \"Hello\" when the condition is true):\n\n```javascript\nclient.command({\n    name: \"endif\",\n    $if: \"old\",\n    code: `\n  $if[1==1]\n  Hello!\n  $endif\n  `\n});\n```",
        "tip": null,
        "documentation": "https://aoi.js.org/functions/endif",
        "source": "https://github.com/aoijs/aoi.js/tree/v6/src/functions/condition/endif.js",
        "type": "Aoi.Js"
    },
    {
        "function": "$error",
        "description": "$error will return information about the error.",
        "usage": "$error",
        "parameters": [],
        "example": null,
        "tip": null,
        "documentation": "https://aoi.js.org/functions/error",
        "source": "https://github.com/aoijs/aoi.js/tree/v6/src/functions/misc/error.js",
        "type": "Aoi.Js"
    },
    {
        "function": "$eval",
        "description": "$eval will execute given aoi.js code.",
        "usage": "$eval[code;returnCode?;sendMessage?;returnExecution?;returnID?]",
        "parameters": [
            {
                "field": "code",
                "type": "string",
                "description": "Aoi.js code to execute.",
                "required": true
            },
            {
                "field": "returnCode",
                "type": "boolean",
                "description": "Return code. \n1. **true** \n2. **false** (default)",
                "required": false
            },
            {
                "field": "sendMessage",
                "type": "boolean",
                "description": "Send output. \n1. **true** \n2. **false** (default)",
                "required": false
            },
            {
                "field": "returnExecution",
                "type": "boolean",
                "description": "Return more information about the executed code. \n1. **true** \n2. **false** (default)",
                "required": false
            },
            {
                "field": "returnID",
                "type": "boolean",
                "description": "Return message ID, \n1. **true** \n2. **false** (default)",
                "required": false
            }
        ],
        "example": "This will return your user ID:\n\n```javascript\nclient.command({\n    name: \"eval\",\n    code: `\n    \\`\\`\\`\n    $eval[$authorID;true;true;true;true]\n    \\`\\`\\`\n  `\n});\n```",
        "tip": null,
        "documentation": "https://aoi.js.org/functions/eval",
        "source": "https://github.com/aoijs/aoi.js/tree/v6/src/functions/misc/eval.js",
        "type": "Aoi.Js"
    },
    {
        "function": "$eventData",
        "description": "$eventData will return event data.",
        "usage": "$eventData",
        "parameters": [],
        "example": null,
        "tip": null,
        "documentation": "https://aoi.js.org/functions/eventdata",
        "source": "https://github.com/aoijs/aoi.js/tree/v6/src/functions/misc/eventData.js",
        "type": "Aoi.Js"
    },
    {
        "function": "$eventEmit",
        "description": "$eventEmit will emit a custom event.",
        "usage": "$eventEmit[name;...datas]",
        "parameters": [
            {
                "field": "name",
                "type": "string",
                "description": "Custom event name.",
                "required": true
            },
            {
                "field": "...datas",
                "type": "string",
                "description": "Custom event data.",
                "required": true
            }
        ],
        "example": null,
        "tip": null,
        "documentation": "https://aoi.js.org/functions/eventemit",
        "source": "https://github.com/aoijs/aoi.js/tree/v6/src/functions/events/eventEmit.js",
        "type": "Aoi.Js"
    },
    {
        "function": "$exec",
        "description": "$exec will execute given code in your console.",
        "usage": "$exec[code]",
        "parameters": [
            {
                "field": "code",
                "type": "string",
                "description": "Code to execute in your console.",
                "required": true
            }
        ],
        "example": "This will return your current node version:\n\n```javascript\nclient.command({\n    name: \"exec\",\n    code: `\n    \\`\\`\\`\n    $exec[node -v]\n    \\`\\`\\`\n  `\n});\n```",
        "tip": null,
        "documentation": "https://aoi.js.org/functions/exec",
        "source": "https://github.com/aoijs/aoi.js/tree/v6/src/functions/misc/exec.js",
        "type": "Aoi.Js"
    },
    {
        "function": "$executionTime",
        "description": "$executionTime will return the execution time.",
        "usage": "$executionTime",
        "parameters": [],
        "example": "This will return the execution time of how long it took to execute this code:\n\n```javascript\nclient.command({\n    name: \"executionTime\",\n    code: `\n    This took: $executionTime MS\n  `\n});\n```",
        "tip": null,
        "documentation": "https://aoi.js.org/functions/executiontime",
        "source": "https://github.com/aoijs/aoi.js/tree/v6/src/functions/misc/executionTime.js",
        "type": "Aoi.Js"
    },
    {
        "function": "$expandNumber",
        "description": "$expandNumber will expand any given number.",
        "usage": "$expandNumber[abbrNumber]",
        "parameters": [
            {
                "field": "abbrNumber",
                "type": "string",
                "description": "Number you want to expand.",
                "required": true
            }
        ],
        "example": "This will return `1300000`:\n\n```javascript\nclient.command({\n    name: \"expandNumber\",\n    code: `\n  $expandNumber[1.3m]`\n});\n```",
        "tip": null,
        "documentation": "https://aoi.js.org/functions/expandnumber",
        "source": "https://github.com/aoijs/aoi.js/tree/v6/src/functions/math/expandNumber.js",
        "type": "Aoi.Js"
    },
    {
        "function": "$fetch",
        "description": "$fetch will fetch information about a given method using Discord's API.",
        "usage": "$fetch[method;query;...properties]",
        "parameters": [
            {
                "field": "method",
                "type": "string",
                "description": "Method to fetch (listed below).",
                "required": true
            },
            {
                "field": "query",
                "type": "string",
                "description": "Input for the used method.",
                "required": true
            },
            {
                "field": "...properties",
                "type": "string",
                "description": "Sub properties of query to return.",
                "required": false
            }
        ],
        "example": "This will display information about the initial command message using the `fetch` function (returns `message.id`):\n\n```javascript\nclient.command({\n    name: \"fetch\",\n    code: `\n  \\`\\`\\`\n  $fetch[message;$messageID;id]\n  \\`\\`\\`\n  `\n});\n```",
        "tip": null,
        "documentation": "https://aoi.js.org/functions/fetch",
        "source": "https://github.com/aoijs/aoi.js/tree/v6/src/functions/misc/fetch.js",
        "type": "Aoi.Js"
    },
    {
        "function": "$fetchActiveThreads",
        "description": "$fetchActiveThreads will return all active threads of a given channel.",
        "usage": "$fetchActiveThreads[channelID;option?]",
        "parameters": [
            {
                "field": "channelID",
                "type": "number",
                "description": "Channel ID of the channel of which you want to fetch the active threads of.",
                "required": true
            },
            {
                "field": "option",
                "type": "string",
                "description": "How to return the active threads. \n1. **name** (default) \n2. **id**",
                "required": false
            }
        ],
        "example": "This will return all active threads, if any:\n\n```javascript\nclient.command({\n    name: \"fetchActiveThreads\",\n    code: `\n  $fetchActiveThreads[$channelID;name]\n  `\n});\n```",
        "tip": null,
        "documentation": "https://aoi.js.org/functions/fetchactivethreads",
        "source": "https://github.com/aoijs/aoi.js/tree/v6/src/functions/guild/fetchActiveThreads.js",
        "type": "Aoi.Js"
    },
    {
        "function": "$fetchArchivedThreads",
        "description": "$fetchArchivedThreads will return all archived threads of a given channel.",
        "usage": "$fetchArchivedThreads[channelID;option?]",
        "parameters": [
            {
                "field": "channelID",
                "type": "number",
                "description": "Channel ID of the channel of which you want to fetch the archived threads of.",
                "required": true
            },
            {
                "field": "option",
                "type": "string",
                "description": "How to return the archived threads. \n1. **name** (default) \n2. **id**",
                "required": false
            }
        ],
        "example": "This will return all archived threads, if any:\n\n```javascript\nclient.command({\n    name: \"fetchArchivedThreads\",\n    code: `\n  $fetchArchivedThreads[$channelID;name]\n  `\n});\n```",
        "tip": null,
        "documentation": "https://aoi.js.org/functions/fetcharchivedthreads",
        "source": "https://github.com/aoijs/aoi.js/tree/v6/src/functions/guild/fetchArchivedThreads.js",
        "type": "Aoi.Js"
    },
    {
        "function": "$fetchClientValues",
        "description": "$fetchClientValues will return data of all client shards.",
        "usage": "$fetchClientValues[function]",
        "parameters": [
            {
                "field": "function",
                "type": "string",
                "description": "Function to execute.",
                "required": true
            }
        ],
        "example": null,
        "tip": null,
        "documentation": "https://aoi.js.org/functions/fetchclientvalues",
        "source": "https://github.com/aoijs/aoi.js/tree/v6/src/functions/client/fetchClientValues.js",
        "type": "Aoi.Js"
    },
    {
        "function": "$fileExists",
        "description": "$fileExists will check if a given file exists.",
        "usage": "$fileExists[path]",
        "parameters": [
            {
                "field": "path",
                "type": "string",
                "description": "File path.",
                "required": true
            }
        ],
        "example": "This will check if a file called `index.js` exists in your directory:\n\n```javascript\nclient.command({\n    name: \"fileExists\",\n    code: `\n  $fileExists[./index.js]\n  `\n});\n```",
        "tip": null,
        "documentation": "https://aoi.js.org/functions/fileexists",
        "source": "https://github.com/aoijs/aoi.js/tree/v6/src/functions/misc/fileExists.js",
        "type": "Aoi.Js"
    },
    {
        "function": "$fileSize",
        "description": "$fileSize will return the size of a given file.",
        "usage": "$fileSize[path;unit?]",
        "parameters": [
            {
                "field": "path",
                "type": "string",
                "description": "File path.",
                "required": true
            },
            {
                "field": "unit",
                "type": "string",
                "description": "In which unit the size will be returned in. \n1. **B** (byte / default) \n2. **KB** (kiloByte) \n3. **MB** (megaByte) \n4. **GB** (gigaByte) \n5. **b** (bit) \n6. **kb** (kiloBit) \n7. **mb** (megaBit) \n8. **GB** (gigaBit)",
                "required": false
            }
        ],
        "example": "This will return the size of your `index.js` in `GB`:\n\n```javascript\nclient.command({\n    name: \"fileSize\",\n    code: `\n  $fileSize[./index.js;GB]\n  `\n});\n```",
        "tip": null,
        "documentation": "https://aoi.js.org/functions/filesize",
        "source": "https://github.com/aoijs/aoi.js/tree/v6/src/functions/misc/fileSize.js",
        "type": "Aoi.Js"
    },
    {
        "function": "$filterMessage",
        "description": "$filterMessage will filter certain characters out of given text.",
        "usage": "$filterMessage[text;...letters]",
        "parameters": [
            {
                "field": "text",
                "type": "string",
                "description": "Text input which will be filtered.",
                "required": true
            },
            {
                "field": "letters",
                "type": "string",
                "description": "Content you want to filter out of the `text`.",
                "required": true
            }
        ],
        "example": "This will remove the `N` of `Never` and return `ever`:\n\n```javascript\nclient.command({\n    name: \"filterMessage\",\n    code: `\n  $filterMessage[Never;N]\n  `\n});\n```",
        "tip": null,
        "documentation": "https://aoi.js.org/functions/filtermessage",
        "source": "https://github.com/aoijs/aoi.js/tree/v6/src/functions/misc/filterMessage.js",
        "type": "Aoi.Js"
    },
    {
        "function": "$filterTextSplitElement",
        "description": "$filterTextSplitElement filters elements from $textSplit and returns the elements that meet the criteria.",
        "usage": "$filterTextSplitElement[query;type?;sep?]",
        "parameters": [
            {
                "field": "query",
                "type": "string",
                "description": "The query that will be used for filtering.",
                "required": true
            },
            {
                "field": "type",
                "type": "string",
                "description": "The type of comparison to be performed during the filtering.\n1. **equal** (default)\n2. **starts**\n3. **ends**\n4. **includes**",
                "required": true
            },
            {
                "field": "sep",
                "type": "string",
                "description": "Separator for the filtered elements. (default `,`)",
                "required": true
            }
        ],
        "example": "This will return `HelloWorld` and `HelloDiscord` as they begin with `Hello`:\n\n```js\nclient.command({\n  name: \"test\",\n  code: `$filterTextSplitElement[Hello;starts;,]\n  $textSplit[HelloWorld__HowAreYou__HelloDiscord__Bye;__]`,\n});\n```",
        "tip": null,
        "documentation": "https://aoi.js.org/functions/filtertextsplitelement",
        "source": "https://github.com/aoijs/aoi.js/tree/v6/src/functions/array/filterTextSplitElement.js",
        "type": "Aoi.Js"
    },
    {
        "function": "$findChannel",
        "description": "$findChannel will search a given channel by its name.",
        "usage": "$findChannel[channelResolver;returnSelf?]",
        "parameters": [
            {
                "field": "channelResolver",
                "type": "string",
                "description": "Name of the channel you want to search for.",
                "required": true
            },
            {
                "field": "returnSelf",
                "type": "boolean",
                "description": "Will return the channel where the command is executed in by default if the given channel was not found.",
                "required": false
            }
        ],
        "example": "This will return `882360051640193054` as it was able to find the `#⊂・⊃﹐aoi_v5` channel:\n\n```javascript\nclient.command({\n    name: \"findChannel\",\n    code: `\n  $findChannel[⊂・⊃﹐aoi_v5;false]\n  `\n});\n```",
        "tip": null,
        "documentation": "https://aoi.js.org/functions/findchannel",
        "source": "https://github.com/aoijs/aoi.js/tree/v6/src/functions/guild/findChannel.js",
        "type": "Aoi.Js"
    },
    {
        "function": "$findChars",
        "description": "$findChars will return all letters or words from the given text.",
        "usage": "$findChars[text]",
        "parameters": [
            {
                "field": "text",
                "type": "string",
                "description": "The text.",
                "required": true
            }
        ],
        "example": "This will return \"Hello\":\n\n```js\nclient.command({\n    name: \"findChars\",\n    code: `$findChars[Hello!123.@#%&]`\n});\n```",
        "tip": null,
        "documentation": "https://aoi.js.org/functions/findchars",
        "source": "https://github.com/aoijs/aoi.js/tree/v6/src/functions/misc/findChars.js",
        "type": "Aoi.Js"
    },
    {
        "function": "$findGuild",
        "description": "$findGuild will attempt to find a guild which is matching with the given query.",
        "usage": "$findGuild[guildResolver]",
        "parameters": [
            {
                "field": "guildResolver",
                "type": "string",
                "description": "Query which is used to find the guild.",
                "required": true
            }
        ],
        "example": "This will search for a guild:\n\n```javascript\nclient.command({\n    name: \"findGuild\",\n    code: `\n  $findGuild[any-server-name]\n  `\n});\n```",
        "tip": null,
        "documentation": "https://aoi.js.org/functions/findguild",
        "source": "https://github.com/aoijs/aoi.js/tree/v6/src/functions/guild/findGuild.js",
        "type": "Aoi.Js"
    },
    {
        "function": "$findGuildChannel",
        "description": "$findGuildChannel will search a guild channel within a guild.",
        "usage": "$findGuildChannel[channelResolver;returnSelf?;guildID?]",
        "parameters": [
            {
                "field": "channelResolver",
                "type": "string",
                "description": "Name of the channel you are trying to find.",
                "required": true
            },
            {
                "field": "returnSelf",
                "type": "boolean",
                "description": "Return the channel where the command got executed in when nothing found.",
                "required": false
            },
            {
                "field": "guildID",
                "type": "number",
                "description": "ID of the guild where the channel is present in.",
                "required": false
            }
        ],
        "example": "This will return the channel ID of an channel called `#rules`\n\n```javascript\nclient.command({\n    name: \"findGuildChannel\",\n    code: `\n  $findGuildChannel[rules;false;$guildID]\n  `\n});\n```",
        "tip": null,
        "documentation": "https://aoi.js.org/functions/findguildchannel",
        "source": "https://github.com/aoijs/aoi.js/tree/v6/src/functions/guild/findGuildChannel.js",
        "type": "Aoi.Js"
    },
    {
        "function": "$findInCache",
        "description": "$findInCache will search for given arguments in your bot's cache.",
        "usage": "$findInCache[type;name;prop;value;findType?;returnValue?]",
        "parameters": [
            {
                "field": "type",
                "type": "string",
                "description": "Type of the object to search.",
                "required": true
            },
            {
                "field": "name",
                "type": "string",
                "description": "Name of the object to search.",
                "required": true
            },
            {
                "field": "prop",
                "type": "string",
                "description": "Property.",
                "required": true
            },
            {
                "field": "value",
                "type": "string",
                "description": "Property value.",
                "required": true
            },
            {
                "field": "findType",
                "type": "string",
                "description": "1. **includes** \n2. **startsWith** \n3. **endsWith** \n4. **\\>=**, **==**, **===** (default), **\\<=**, **\\<**, **\\>**",
                "required": false
            },
            {
                "field": "returnValue",
                "type": "boolean",
                "description": "1. **true** \n2. **false**",
                "required": false
            }
        ],
        "example": null,
        "tip": null,
        "documentation": "https://aoi.js.org/functions/findincache",
        "source": "https://github.com/aoijs/aoi.js/tree/v6/src/functions/misc/findInCache.js",
        "type": "Aoi.Js"
    },
    {
        "function": "$findMember",
        "description": "$findMember will find a specific member in a specific guild by their name.",
        "usage": "$findMember[userResolver;returnSelf?;guildID?]",
        "parameters": [
            {
                "field": "userResolver",
                "type": "string",
                "description": "User you want to find.",
                "required": true
            },
            {
                "field": "returnSelf",
                "type": "boolean",
                "description": "Return the author ID if the given user was not found.",
                "required": false
            },
            {
                "field": "guildID",
                "type": "number",
                "description": "Guild ID where the user is present in.",
                "required": false
            }
        ],
        "example": "This will return your ID as `Leref` was not found in the given guild:\n\n```javascript\nclient.command({\n    name: \"findMember\",\n    code: `\n  $findMember[Leref;true;$guildID]\n  `\n});\n```",
        "tip": null,
        "documentation": "https://aoi.js.org/functions/findmember",
        "source": "https://github.com/aoijs/aoi.js/tree/v6/src/functions/guild/findMember.js",
        "type": "Aoi.Js"
    },
    {
        "function": "$findMembers",
        "description": "$findMembers will return all members with similar username.",
        "usage": "$findMembers[userResolver;limit?;type?;force?;format?]",
        "parameters": [
            {
                "field": "userResolver",
                "type": "string",
                "description": "Query of the username the bot will search for.",
                "required": true
            },
            {
                "field": "limit",
                "type": "number",
                "description": "The amount of results the bot will return.",
                "required": false
            },
            {
                "field": "type",
                "type": "string",
                "description": "Type of the search query.",
                "required": false
            },
            {
                "field": "force",
                "type": "boolean",
                "description": "1. **true** \n2. **false** (default)",
                "required": false
            },
            {
                "field": "format",
                "type": "string",
                "description": "The format the bot will return the found users (listed below).",
                "required": false
            }
        ],
        "example": "This will return twenty members with `Leref` in their username:\n\n```javascript\nclient.command({\n    name: \"findMembers\",\n    code: `\n  $findMembers[Leref;20;startsWith;true;{position}) {username}#{tag}]\n  `\n});\n```",
        "tip": null,
        "documentation": "https://aoi.js.org/functions/findmembers",
        "source": "https://github.com/aoijs/aoi.js/tree/v6/src/functions/guild/findMembers.js",
        "type": "Aoi.Js"
    },
    {
        "function": "$findNumbers",
        "description": "$findNumbers will attempt to return all numbers in a message of a given text.",
        "usage": "$findNumbers[text]",
        "parameters": [
            {
                "field": "text",
                "type": "string",
                "description": "Text where you want to find numbers.",
                "required": true
            }
        ],
        "example": "This will return `25` and remove `Hello, I'm [..] years old` from the given text:\n\n```javascript\nclient.command({\n    name: \"findNumbers\",\n    code: `\n  $findNumbers[Hello, I'm 25 years old]\n  `\n});\n```",
        "tip": null,
        "documentation": "https://aoi.js.org/functions/findnumbers",
        "source": "https://github.com/aoijs/aoi.js/tree/v6/src/functions/misc/findNumbers.js",
        "type": "Aoi.Js"
    },
    {
        "function": "$findObjectProperty",
        "description": "$findObjectProperty will search for a given property of an object and return it.",
        "usage": "$findObjectProperty[objectName;property;format?]",
        "parameters": [
            {
                "field": "objectName",
                "type": "string",
                "description": "The object's name.",
                "required": true
            },
            {
                "field": "property",
                "type": "string",
                "description": "Name of the property to be searched.",
                "required": true
            },
            {
                "field": "format",
                "type": "boolean",
                "description": "Format the output?\n1. **true**\n2. **false** (default)",
                "required": false
            }
        ],
        "example": "This will return `{\"Leref\": \"Ferel\"}` as it was able to find \"object\":\n\n```javascript\nclient.command({\n    name: \"findObjectProperty\",\n    code: `\n  $findObjectProperty[Object Name;Leref]\n  $createObject[Object Name;{\"Leref\": \"Ferel\", \"aoi.js\": \"dbd.js\"}]\n  `\n});\n```",
        "tip": null,
        "documentation": "https://aoi.js.org/functions/findobjectproperty",
        "source": "https://github.com/aoijs/aoi.js/tree/v6/src/functions/misc/findObjectProperty.js",
        "type": "Aoi.Js"
    },
    {
        "function": "$findRole",
        "description": "$findRole will search and return a given role of a certain guild.",
        "usage": "$findRole[roleResolver;guildID?]",
        "parameters": [
            {
                "field": "roleResolver",
                "type": "string",
                "description": "Name of the role you want to find.",
                "required": true
            },
            {
                "field": "guildID",
                "type": "number",
                "description": "Guild ID where the role is present in.",
                "required": false
            }
        ],
        "example": "This will return the role ID of the role `Owner` if it exists:\n\n```javascript\nclient.command({\n    name: \"findRole\",\n    code: `\n  $findRole[Owner;$guildID]\n  `\n});\n```",
        "tip": null,
        "documentation": "https://aoi.js.org/functions/findrole",
        "source": "https://github.com/aoijs/aoi.js/tree/v6/src/functions/misc/findRole.js",
        "type": "Aoi.Js"
    },
    {
        "function": "$findRoles",
        "description": "$findRoles will return all matching roles depending on the given query.",
        "usage": "$findRoles[roleResolver;limit?;type?;format?]",
        "parameters": [
            {
                "field": "roleResolver",
                "type": "string",
                "description": "Query to match.",
                "required": true
            },
            {
                "field": "limit",
                "type": "number",
                "description": "The maximum amount of roles the bot will return.",
                "required": false
            },
            {
                "field": "type",
                "type": "string",
                "description": "Type of the search query.",
                "required": false
            },
            {
                "field": "format",
                "type": "string",
                "description": "Formatting for the output.",
                "required": false
            }
        ],
        "example": "This will return all roles which are named `Owner`:\n\n```javascript\nclient.command({\n    name: \"findRoles\",\n    code: `\n  $findRoles[Owner;5;startsWith;{position}) {username}: {id}]\n  `\n});\n```",
        "tip": null,
        "documentation": "https://aoi.js.org/functions/findroles",
        "source": "https://github.com/aoijs/aoi.js/tree/v6/src/functions/misc/findRoles.js",
        "type": "Aoi.Js"
    },
    {
        "function": "$findSpecialChars",
        "description": "$findSpecialChars will return all special characters of the given argument.",
        "usage": "$findSpecialChars[text]",
        "parameters": [
            {
                "field": "text",
                "type": "string",
                "description": "Text where you want to find special characters.",
                "required": true
            }
        ],
        "example": "This will return `######`:\n\n```javascript\nclient.command({\n    name: \"findSpecialChars\",\n    code: `\n  $findSpecialChars[Aoi.js is ###### great]\n  `\n});\n```",
        "tip": null,
        "documentation": "https://aoi.js.org/functions/findspecialchars",
        "source": "https://github.com/aoijs/aoi.js/tree/v6/src/functions/misc/findSpecialChars.js",
        "type": "Aoi.Js"
    },
    {
        "function": "$findTextSplitIndex",
        "description": "$findTextSplitIndex will return the index of a text split element after a given query.",
        "usage": "$findTextSplitIndex[query]",
        "parameters": [
            {
                "field": "query",
                "type": "string",
                "description": "Query.",
                "required": true
            }
        ],
        "example": "This will return `3` as the first `Cya` in this `$textSplit` is in the third position:\n\n```javascript\nclient.command({\n    name: \"findTextSplitIndex\",\n    code: `\n  $findTextSplitIndex[Cya]\n  $textSplit[Hello, Bye, Cya;, ]\n  `\n});\n```",
        "tip": null,
        "documentation": "https://aoi.js.org/functions/findtextsplitindex",
        "source": "https://github.com/aoijs/aoi.js/tree/v6/src/functions/misc/findTextSplitIndex.js",
        "type": "Aoi.Js"
    },
    {
        "function": "$findUser",
        "description": "$findUser will attempt to find a user which is matching with the given query.",
        "usage": "$findUser[userResolver;returnSelf?]",
        "parameters": [
            {
                "field": "userResolver",
                "type": "string",
                "description": "Query which is used to find the user.",
                "required": true
            },
            {
                "field": "returnSelf",
                "type": "boolean",
                "description": "Will return the user ID of the user who executed the command when user was not found.",
                "required": false
            }
        ],
        "example": "This will search for a user called Ferel, if it wont find the user then it'll return the command author's user ID:\n\n```javascript\nclient.command({\n    name: \"findUser\",\n    code: `\n  $findUser[Ferel;true]\n  `\n});\n```",
        "tip": null,
        "documentation": "https://aoi.js.org/functions/finduser",
        "source": "https://github.com/aoijs/aoi.js/tree/v6/src/functions/misc/findUser.js",
        "type": "Aoi.Js"
    },
    {
        "function": "$floor",
        "description": "$floor will round a number down to the nearest integer.",
        "usage": "$floor[number]",
        "parameters": [
            {
                "field": "number",
                "type": "number",
                "description": "The number of which you want the integer returned of.",
                "required": true
            }
        ],
        "example": "This will calculate the nearest integer of `5.8`:\n\n```js\nclient.command({\n    name: \"floor\",\n    code: `\n  $floor[5.8]` // returns: 5\n});\n```",
        "tip": null,
        "documentation": "https://aoi.js.org/functions/floor",
        "source": "https://github.com/aoijs/aoi.js/tree/v6/src/functions/math/floor.js",
        "type": "Aoi.Js"
    },
    {
        "function": "$footer",
        "description": "$footer will add a footer to an embed.",
        "usage": "$footer[index?;content;iconURL?]",
        "parameters": [
            {
                "field": "index",
                "type": "number",
                "description": "Embed index.",
                "required": false
            },
            {
                "field": "content",
                "type": "string",
                "description": "Content of the footer text.",
                "required": true
            },
            {
                "field": "iconURL",
                "type": "string",
                "description": "Footer Icon (bottom left image).",
                "required": false
            }
        ],
        "example": "This will create an embed with a footer and title:\n\n```javascript\nclient.command({\n    name: \"embed\",\n    code: `\n  $title[Hello!]\n  $footer[Hello again!;$userAvatar]\n  `\n});\n```",
        "tip": null,
        "documentation": "https://aoi.js.org/functions/footer",
        "source": "https://github.com/aoijs/aoi.js/tree/v6/src/functions/embeds/footer.js",
        "type": "Aoi.Js"
    },
    {
        "function": "$forEachChannel",
        "description": "$forEachChannel will execute awaited commands in every channel of every guild.",
        "usage": "$forEachChannel[time;awaitData;...awaitedCmds;endCmd]",
        "parameters": [
            {
                "field": "time",
                "type": "string",
                "description": "How long it takes between each channel to execute the next.",
                "required": true
            },
            {
                "field": "awaitData",
                "type": "object",
                "description": "",
                "required": false
            },
            {
                "field": "JavaScript/Reference/Global_Objects/Object)",
                "type": "Awaited Data.",
                "description": "true",
                "required": false
            },
            {
                "field": "...awaitedCmds",
                "type": "string",
                "description": "Awaited Commands to execute.",
                "required": true
            },
            {
                "field": "endCmd",
                "type": "string",
                "description": "Awaited Command to execute when loop ends.",
                "required": true
            }
        ],
        "example": "This will change the variable value of each channel to \"test\":\n\n```javascript\nclient.command({\n    name: \"forEachChannel\",\n    code: `\n  $forEachChannel[2s;{\"value\": \"test\"};awaitedCommand;]\n  `\n});\n\nclient.awaitedCommand({\n    name: \"awaitedCommand\",\n    code: `\n  $setChannelVar[varname;$awaitData[value];$channelID]\n  `\n});\n```",
        "tip": null,
        "documentation": "https://aoi.js.org/functions/foreachchannel",
        "source": "https://github.com/aoijs/aoi.js/tree/v6/src/functions/guild/forEachChannel.js",
        "type": "Aoi.Js"
    },
    {
        "function": "$forEachGuild",
        "description": "$forEachGuild will execute given awaited commands in every guild.",
        "usage": "$forEachGuild[time;awaitData;...awaitedCmds;endCmd]",
        "parameters": [
            {
                "field": "time",
                "type": "string",
                "description": "How long it takes between each guild to execute the next.",
                "required": true
            },
            {
                "field": "awaitData",
                "type": "object",
                "description": "Awaited Data.",
                "required": true
            },
            {
                "field": "...awaitedCmds",
                "type": "string",
                "description": "Awaited Commands to execute.",
                "required": true
            },
            {
                "field": "endCmd",
                "type": "string",
                "description": "Awaited Command to execute when the loop ends.",
                "required": false
            }
        ],
        "example": "This will change the variable value of each guild to \"test\":\n\n```javascript\nclient.command({\n    name: \"forEachGuild\",\n    code: `\n  $forEachGuild[2s;{\"value\": \"test\"};awaitedCommand;]\n  `\n});\n\nclient.awaitedCommand({\n    name: \"awaitedCommand\",\n    code: `\n  $setGuildVar[varname;$awaitData[value];$guildID]\n  `\n});\n```",
        "tip": null,
        "documentation": "https://aoi.js.org/functions/foreachguild",
        "source": "https://github.com/aoijs/aoi.js/tree/v6/src/functions/guild/forEachGuild.js",
        "type": "Aoi.Js"
    },
    {
        "function": "$forEachGuildChannel",
        "description": "$forEachGuildChannel will execute awaited commands in every channel of the current guild.",
        "usage": "$forEachGuildChannel[time;awaitData;...awaitedCmds;endCmd]",
        "parameters": [
            {
                "field": "time",
                "type": "string",
                "description": "How long it takes between each channel to execute the next.",
                "required": true
            },
            {
                "field": "awaitData",
                "type": "object",
                "description": "Awaited Data.",
                "required": true
            },
            {
                "field": "...awaitedCmds",
                "type": "string",
                "description": "Awaited Commands to execute.",
                "required": true
            },
            {
                "field": "endCmd",
                "type": "string",
                "description": "Awaited Command to execute when the loop ends.",
                "required": false
            }
        ],
        "example": "This will change the variable value of each guild channel to \"test\":\n\n```javascript\nclient.command({\n    name: \"forEachGuildChannel\",\n    code: `\n  $forEachGuildChannel[2s;{\"value\": \"test\"};awaitedCommand;]\n  `\n});\n\nclient.awaitedCommand({\n    name: \"awaitedCommand\",\n    code: `\n  $setChannelVar[varname;$awaitData[value];$channelID]\n  `\n});\n```",
        "tip": null,
        "documentation": "https://aoi.js.org/functions/foreachguildchannel",
        "source": "https://github.com/aoijs/aoi.js/tree/v6/src/functions/guild/forEachGuildChannel.js",
        "type": "Aoi.Js"
    },
    {
        "function": "$forEachMember",
        "description": "$forEachMember will execute awaited commands for user within the current guild.",
        "usage": "$forEachMember[time;awaitData;...awaitedCmds;endCmd?]",
        "parameters": [
            {
                "field": "time",
                "type": "string",
                "description": "How long it takes between each member to execute the next.",
                "required": true
            },
            {
                "field": "awaitData",
                "type": "object",
                "description": "Awaited Data.",
                "required": true
            },
            {
                "field": "...awaitedCmds",
                "type": "string",
                "description": "Awaited Commands to execute.",
                "required": true
            },
            {
                "field": "endCmd",
                "type": "string",
                "description": "Awaited command to execute when the loop ends.",
                "required": false
            }
        ],
        "example": "```javascript\nclient.command({\n    name: \"awaitData\",\n    code: `\n  $forEachMember[1s;{ \"members\": \"$membersCount\" };returnMembers;]\n  `\n});\n\nclient.awaitedCommand({\n    name: \"returnMembers\",\n    code: `\n  $log[ $authorID , is one out of $awaitData[members] members ]\n  `\n});\n```",
        "tip": null,
        "documentation": "https://aoi.js.org/functions/foreachmember",
        "source": "https://github.com/aoijs/aoi.js/tree/v6/src/functions/guild/forEachMember.js",
        "type": "Aoi.Js"
    },
    {
        "function": "$forEachObjectArray",
        "description": "$forEachObjectArray will execute an awaited command for each item in the object array.",
        "usage": "$forEachObjectArray[name;property;awaitedCommand;endCmd?]",
        "parameters": [
            {
                "field": "name",
                "type": "string",
                "description": "Array name.",
                "required": true
            },
            {
                "field": "property",
                "type": "string",
                "description": "Array property.",
                "required": true
            },
            {
                "field": "awaitedCommand",
                "type": "string",
                "description": "Awaited command to executed.",
                "required": true
            },
            {
                "field": "endCmd",
                "type": "string",
                "description": "Awaited command to executed when array ends.",
                "required": false
            }
        ],
        "example": null,
        "tip": null,
        "documentation": "https://aoi.js.org/functions/foreachobjectarray",
        "source": "https://github.com/aoijs/aoi.js/tree/v6/src/functions/array/forEachObjectArray.js",
        "type": "Aoi.Js"
    },
    {
        "function": "$forEachRole",
        "description": "$forEachRole will execute awaited commands for every role in a given guild.",
        "usage": "$forEachRole[guildID;time;awaitData;...awaitedCmds;endCmd?]",
        "parameters": [
            {
                "field": "time",
                "type": "string",
                "description": "How long it takes between each role to execute the next.",
                "required": true
            },
            {
                "field": "awaitData",
                "type": "object",
                "description": "Awaited Data.",
                "required": true
            },
            {
                "field": "...awaitedCmds",
                "type": "string",
                "description": "Awaited Commands to execute.",
                "required": true
            },
            {
                "field": "endCmd",
                "type": "string",
                "description": "Awaited Command to execute when the loop ends.",
                "required": false
            }
        ],
        "example": null,
        "tip": null,
        "documentation": "https://aoi.js.org/functions/foreachrole",
        "source": "https://github.com/aoijs/aoi.js/tree/v6/src/functions/misc/forEachRole.js",
        "type": "Aoi.Js"
    },
    {
        "function": "$forEachUser",
        "description": "$forEachUser will execute awaited commands for user across all guilds.",
        "usage": "$forEachUser[time;awaitData;...awaitedCmds;endCmd?]",
        "parameters": [
            {
                "field": "time",
                "type": "string",
                "description": "How long it takes between each user to execute the next one.",
                "required": true
            },
            {
                "field": "awaitData",
                "type": "object",
                "description": "Awaited Data.",
                "required": true
            },
            {
                "field": "...awaitedCmds",
                "type": "string",
                "description": "Awaited Commands to execute.",
                "required": true
            },
            {
                "field": "endCmd",
                "type": "string",
                "description": "Awaited Command to execute when loop ends.",
                "required": false
            }
        ],
        "example": "This will log every (cached) user in your console:\n\n```javascript\nclient.command({\n    name: \"awaitData\",\n    code: `\n  $forEachUser[1;{};returnUsers;]\n  `\n});\n\nclient.awaitedCommand({\n    name: \"returnUsers\",\n    code: `\n  $log[ $authorID ]\n  `\n});\n```",
        "tip": null,
        "documentation": "https://aoi.js.org/functions/foreachuser",
        "source": "https://github.com/aoijs/aoi.js/tree/v6/src/functions/misc/forEachUser.js",
        "type": "Aoi.Js"
    },
    {
        "function": "$formatDate",
        "description": "$formatDate will format a given date.",
        "usage": "$formatDate[date;format?]",
        "parameters": [
            {
                "field": "date",
                "type": "number",
                "description": "The date you want to format.",
                "required": true
            },
            {
                "field": "format",
                "type": "string",
                "description": "The format that will be used to display the date (listed below).",
                "required": false
            }
        ],
        "example": "This will return your current date in the `dddd, DD MMMM YYYY` format:\n\n```javascript\nclient.command({\n    name: \"formatDate\",\n    code: `\n  $formatDate[$dateStamp;dddd, DD MMMM YYYY]\n  `\n});\n```",
        "tip": null,
        "documentation": "https://aoi.js.org/functions/formatdate",
        "source": "https://github.com/aoijs/aoi.js/tree/v6/src/functions/misc/formatDate.js",
        "type": "Aoi.Js"
    },
    {
        "function": "$get",
        "description": "$get is used for retrieving temporary variables.",
        "usage": "$get[var]",
        "parameters": [
            {
                "field": "var",
                "type": "string",
                "description": "Temporary variable you want to retrieve.",
                "required": true
            }
        ],
        "example": "This will return `Leref` from `$let`:\n\n```javascript\nclient.command({\n    name: \"get\",\n    code: `\nAoi.js developer: $get[developer]\n$let[developer;Leref]\n`\n});\n```",
        "tip": null,
        "documentation": "https://aoi.js.org/functions/get",
        "source": "https://github.com/aoijs/aoi.js/tree/v6/src/functions/database/get.js",
        "type": "Aoi.Js"
    },
    {
        "function": "$getApplicationCommandID",
        "description": "$getApplicationCommandID will return the ID of a given application command.",
        "usage": "$getApplicationCommandID[name;type?]",
        "parameters": [
            {
                "field": "name",
                "type": "string",
                "description": "Name of the application command.",
                "required": true
            },
            {
                "field": "type",
                "type": "string",
                "description": "Application command type. \n1. **global** (default) \n2. **guildID** (specific guild ID)",
                "required": false
            }
        ],
        "example": "This will return the ID of an application command called \"example\", (if any):\n\n```javascript\nclient.command({\n    name: \"getApplicationCommandID\",\n    code: `\n  $getApplicationCommandID[example;global]\n  `\n});\n```",
        "tip": null,
        "documentation": "https://aoi.js.org/functions/getapplicationcommandid",
        "source": "https://github.com/aoijs/aoi.js/tree/v6/src/functions/misc/getApplicationCommandID.js",
        "type": "Aoi.Js"
    },
    {
        "function": "$getApplicationCommandOptions",
        "description": "$getApplicationCommandOptions will return application options of a given application command.",
        "usage": "$getApplicationCommandOptions[name;type?]",
        "parameters": [
            {
                "field": "name",
                "type": "string",
                "description": "Name of the application command.",
                "required": true
            },
            {
                "field": "type",
                "type": "string",
                "description": "Application command type. \n1. **global** (default) \n2. **guildID** (specific guild ID)",
                "required": false
            }
        ],
        "example": null,
        "tip": null,
        "documentation": "https://aoi.js.org/functions/getapplicationcommandoptions",
        "source": "https://github.com/aoijs/aoi.js/tree/v6/src/functions/misc/getApplicationCommandOptions.js",
        "type": "Aoi.Js"
    },
    {
        "function": "$getArray",
        "description": "$getArray will return the given array in raw format.",
        "usage": "$getArray[name]",
        "parameters": [
            {
                "field": "name",
                "type": "string",
                "description": "Array name.",
                "required": true
            }
        ],
        "example": "```javascript\nclient.command({\n    name: \"getArray\",\n    code: `\n  $getArray[array]\n  $createArray[array;aoi.js;akarui;documents;bot]\n  `\n});\n```",
        "tip": null,
        "documentation": "https://aoi.js.org/functions/getarray",
        "source": "https://github.com/aoijs/aoi.js/tree/v6/src/functions/misc/getArray.js",
        "type": "Aoi.Js"
    },
    {
        "function": "$getAttachments",
        "description": "$getAttachments will return the properties of an attachment.",
        "usage": "$getAttachments[channelID;messageID;index?;option?;sep?]",
        "parameters": [
            {
                "field": "channelID",
                "type": "number",
                "description": "The channel of where the message is present in.",
                "required": true
            },
            {
                "field": "messageID",
                "type": "number",
                "description": "The message ID.",
                "required": true
            },
            {
                "field": "index",
                "type": "number",
                "description": "Attachment index.",
                "required": false
            },
            {
                "field": "option",
                "type": "string",
                "description": "The option to retrieve.",
                "required": false
            },
            {
                "field": "sep",
                "type": "string",
                "description": "Separator used to join multiple values. Defaults to `\", \"`.",
                "required": false
            }
        ],
        "example": "This will return the name of the first attachment from the message that executed the command:\n\n```javascript  \nclient.command({  \n    name: \"getAttachments\",  \n    code: `  \n  $getAttachments[$channelID;$messageID;1;name]  \n  `  \n}); \n```",
        "tip": null,
        "documentation": "https://aoi.js.org/functions/getattachments",
        "source": "https://github.com/aoijs/aoi.js/tree/v6/src/functions/misc/getAttachments.js",
        "type": "Aoi.Js"
    },
    {
        "function": "$getAuditLogs",
        "description": "$getAuditLogs will retrieve guild audit logs according to the given arguments.",
        "usage": "$getAuditLogs[guildID;userID?;limit?;action?;format?]",
        "parameters": [
            {
                "field": "guildID",
                "type": "number",
                "description": "The ID of a specific guild.",
                "required": true
            },
            {
                "field": "userID",
                "type": "number",
                "description": "The user who executed the action stated in audit logs.",
                "required": false
            },
            {
                "field": "limit",
                "type": "number",
                "description": "The maximum of audit logs it will return.",
                "required": false
            },
            {
                "field": "action",
                "type": "number",
                "description": "The action that was executed.",
                "required": false
            },
            {
                "field": "format",
                "type": "string",
                "description": "The format to return the audit logs in.",
                "required": false
            }
        ],
        "example": "This will return your latest bans (which are logged in audit logs):\n\n```javascript\nclient.command({\n    name: \"getAuditLogs\",\n    code: `\n  $getAuditLogs[$guildID;$authorID;5;$authorID;12;{executor.username}: {target.id} - {action}]\n  `\n});\n```",
        "tip": null,
        "documentation": "https://aoi.js.org/functions/getauditlogs",
        "source": "https://github.com/aoijs/aoi.js/tree/v6/src/functions/misc/getAuditLogs.js",
        "type": "Aoi.Js"
    },
    {
        "function": "$getAutomodRule",
        "description": "$getAutomodRule will fetch and return the selected automod rule of the specified guild",
        "usage": "$getAutomodRule[guildID;name?;option?]",
        "parameters": [
            {
                "field": "guildID",
                "type": "number",
                "description": "The ID of the guild where the automod rule exists in.",
                "required": true
            },
            {
                "field": "name",
                "type": "string",
                "description": "The name or ID of the automod rule.",
                "required": false
            },
            {
                "field": "option",
                "type": "string",
                "description": "The type of the function response.",
                "required": false
            }
        ],
        "example": "```javascript\nclient.command({\n    name: \"getAutomodRule\",\n    code: `\n  $getAutomodRule[$guildID;name]\n  `\n});\n```",
        "tip": null,
        "documentation": "https://aoi.js.org/functions/getautomodrule",
        "source": "https://github.com/aoijs/aoi.js/tree/v6/src/functions/misc/getAutomodRule.js",
        "type": "Aoi.Js"
    },
    {
        "function": "$getAutomodRuleId",
        "description": "$getAutomodRuleId will fetch and return the Id of a given automod rule.",
        "usage": "$getAutomodRuleId[guildID;name;force?]",
        "parameters": [
            {
                "field": "guildID",
                "type": "number",
                "description": "The ID of the guild where the automod rule exists in.",
                "required": true
            },
            {
                "field": "name",
                "type": "string",
                "description": "The name or ID of the automod rule.",
                "required": true
            },
            {
                "field": "force",
                "type": "boolean",
                "description": "Force fetch the guild's automod rules.",
                "required": false
            }
        ],
        "example": "This will return the Id of the given automod rule while force fetching all guild automod rules:\n\n```javascript\nclient.command({\n    name: \"getAutomodRuleId\",\n    code: `\n  $getAutomodRuleId[$guildId;Automod Rule;true]\n  `\n});\n```",
        "tip": null,
        "documentation": "https://aoi.js.org/functions/getautomodruleid",
        "source": "https://github.com/aoijs/aoi.js/tree/v6/src/functions/misc/getAutomodRuleId.js",
        "type": "Aoi.Js"
    },
    {
        "function": "$getAutomodRules",
        "description": "$getAutomodRules will fetch and return the automod rules of the specified guild",
        "usage": "$getAutomodRules[guildID;option?;sep?]",
        "parameters": [
            {
                "field": "guildID",
                "type": "number",
                "description": "The ID of the guild where the automod rules exists in.",
                "required": true
            },
            {
                "field": "option",
                "type": "string",
                "description": "The type of the function response.",
                "required": false
            },
            {
                "field": "sep",
                "type": "string",
                "description": "The separator between each automod rule.",
                "required": false
            }
        ],
        "example": "```javascript\nclient.command({\n    name: \"getAutomodRules\",\n    code: `\n    $getAutomodRules[$guildID;{name};, ]\n  `\n});\n```",
        "tip": null,
        "documentation": "https://aoi.js.org/functions/getautomodrules",
        "source": "https://github.com/aoijs/aoi.js/tree/v6/src/functions/misc/getAutomodRules.js",
        "type": "Aoi.Js"
    },
    {
        "function": "$getAvatarDecoration",
        "description": "$getAvatarDecoration will return an static image of the provided users' avatar decoration",
        "usage": "$getAvatarDecoration[userID?;extension?;size?]",
        "parameters": [
            {
                "field": "userID",
                "type": "number",
                "description": "The user ID you want to check.",
                "required": false
            },
            {
                "field": "extension",
                "type": "string",
                "description": "The file extension of the decoration. (default: png)",
                "required": false
            },
            {
                "field": "size",
                "type": "number",
                "description": "The decoration image size. (default: 4096)",
                "required": false
            }
        ],
        "example": "```javascript\nclient.command({\n    name: \"getAvatarDecoration\",\n    code: `\n   $getAvatarDecoration[$authorID]\n  `\n});\n```",
        "tip": null,
        "documentation": "https://aoi.js.org/functions/getavatardecoration",
        "source": "https://github.com/aoijs/aoi.js/tree/v6/src/functions/misc/getAvatarDecoration.js",
        "type": "Aoi.Js"
    },
    {
        "function": "$getBanReason",
        "description": "$getBanReason will return a ban reason of an specific user.",
        "usage": "$getBanReason[guildID?;userID?]",
        "parameters": [
            {
                "field": "guildID",
                "type": "number",
                "description": "The guild ID.",
                "required": false
            },
            {
                "field": "userID",
                "type": "number",
                "description": "The user ID of the user you want to check the ban reason of.",
                "required": false
            }
        ],
        "example": "This will return the ban reason of whoever you'd like:\n\n```javascript\nclient.command({\n    name: \"getBanReason\",\n    code: `\n  $getBanReason[$guildID;userID] \n  ` // make sure to replace \"userID\" with an actual user ID\n});\n```",
        "tip": null,
        "documentation": "https://aoi.js.org/functions/getbanreason",
        "source": "https://github.com/aoijs/aoi.js/tree/v6/src/functions/misc/getBanReason.js",
        "type": "Aoi.Js"
    },
    {
        "function": "$getCacheData",
        "description": "$getCacheData will return cache data.",
        "usage": "$getCacheData[type;name;key;option?]",
        "parameters": [
            {
                "field": "type",
                "type": "string",
                "description": "true",
                "required": false
            },
            {
                "field": "name",
                "type": "string",
                "description": "true",
                "required": false
            },
            {
                "field": "key",
                "type": "string",
                "description": "true",
                "required": false
            },
            {
                "field": "option",
                "type": "string",
                "description": "false",
                "required": false
            }
        ],
        "example": null,
        "tip": null,
        "documentation": "https://aoi.js.org/functions/getcachedata",
        "source": "https://github.com/aoijs/aoi.js/tree/v6/src/functions/database/getCacheData.js",
        "type": "Aoi.Js"
    },
    {
        "function": "$getChannelSlowmode",
        "description": "$getChannelSlowmode will return a channel's slowmode in seconds.",
        "usage": "$getChannelSlowmode[channelID?]",
        "parameters": [
            {
                "field": "channelID",
                "type": "number",
                "description": "ID of the channel where you want the channel slowmode to be returned of.",
                "required": false
            }
        ],
        "example": "This will return the slowmode of the channel where you execute the command in:\n\n```javascript\nclient.command({\n    name: \"getChannelSlowmode\",\n    code: `\n  The current channel slowmode is: $getChannelSlowmode[$channelID] seconds!\n  `\n});\n```",
        "tip": null,
        "documentation": "https://aoi.js.org/functions/getchannelslowmode",
        "source": "https://github.com/aoijs/aoi.js/tree/v6/src/functions/guild/getChannelSlowmode.js",
        "type": "Aoi.Js"
    },
    {
        "function": "$getChannelVar",
        "description": "$getChannelVar will return the value of a given channel variable.",
        "usage": "$getChannelVar[varname;channelID?;table?]",
        "parameters": [
            {
                "field": "varname",
                "type": "string",
                "description": "Variable name.",
                "required": true
            },
            {
                "field": "channelID",
                "type": "number",
                "description": "Channel ID.",
                "required": false
            },
            {
                "field": "table",
                "type": "string",
                "description": "Variable table.",
                "required": false
            }
        ],
        "example": "This will return the value of a variable called \"Example\":\n\n```javascript\nclient.command({\n    name: \"getChannelVar\",\n    code: `\n    $getChannelVar[Example;$channelID;main]\n    `\n});\n```",
        "tip": null,
        "documentation": "https://aoi.js.org/functions/getchannelvar",
        "source": "https://github.com/aoijs/aoi.js/tree/v6/src/functions/guild/getChannelVar.js",
        "type": "Aoi.Js"
    },
    {
        "function": "$getClientInvite",
        "description": "$getClientInvite will return your bot's invite with specified permissions.",
        "usage": "$getClientInvite[...perms?]",
        "parameters": [
            {
                "field": "perms",
                "type": "string",
                "description": "Permissions you want to be included in the invite.",
                "required": false
            }
        ],
        "example": "This will return your bot's invite with administrator privileges:\n\n```javascript\nclient.command({\n    name: \"getClientInvite\",\n    code: `\n  Invite me here: $getClientInvite[administrator]\n  `\n});\n```",
        "tip": null,
        "documentation": "https://aoi.js.org/functions/getclientinvite",
        "source": "https://github.com/aoijs/aoi.js/tree/v6/src/functions/misc/getClientInvite.js",
        "type": "Aoi.Js"
    },
    {
        "function": "$getComponentCustomID",
        "description": "$getComponentCustomID returns the custom ID of the current used interaction component.",
        "usage": "$getComponentCustomID",
        "parameters": [],
        "example": "This will return the custom ID of the button, which is `exampleButton`:\n\n```js\nclient.command({\n    name: \"examplecommand\",\n    code: `\n    Hello!\n    $addButton[1;Example Button!;primary;exampleButton;false;💔]\n  `\n});\n```\n\n```js\nclient.interactionCommand({\n    name: \"exampleButton\",\n    prototype: \"button\",\n    code: `$interactionReply[The button's custom ID: $getComponentCustomID]`\n});\n```",
        "tip": null,
        "documentation": "https://aoi.js.org/functions/getcomponentcustomid",
        "source": "https://github.com/aoijs/aoi.js/tree/v6/src/functions/components/getComponentCustomID.js",
        "type": "Aoi.Js"
    },
    {
        "function": "$getCooldownTime",
        "description": "$getCooldownTime will return the cooldown time of a given command.",
        "usage": "$getCooldownTime[time;type;command;id]",
        "parameters": [
            {
                "field": "time",
                "type": "string",
                "description": "The time of the cooldown.",
                "required": true
            },
            {
                "field": "type",
                "type": "string",
                "description": "Cooldown type \n1. **globalUser** \n2. **user** \n3. **server** \n4. **channel** \n5. **static**",
                "required": true
            },
            {
                "field": "command",
                "type": "string",
                "description": "Command name.",
                "required": true
            },
            {
                "field": "id",
                "type": "number",
                "description": "User/guild/channel/message ID.",
                "required": true
            }
        ],
        "example": "This will return the remaining cooldown of the \"getCooldownTime\" command:\n\n```javascript\nclient.command({\n    name: \"getCooldownTime\",\n    code: `\n    $cooldown[2m;]\n    $getCooldownTime[2m;user;getCooldownTime;$authorID]\n    `\n});\n```",
        "tip": null,
        "documentation": "https://aoi.js.org/functions/getcooldowntime",
        "source": "https://github.com/aoijs/aoi.js/tree/v6/src/functions/database/getCooldownTime.js",
        "type": "Aoi.Js"
    },
    {
        "function": "$getEmbed",
        "description": "$getEmbed will return properties about an given embed.",
        "usage": "$getEmbed[channelID?;messageID?;index?;option?]",
        "parameters": [
            {
                "field": "channelID",
                "type": "number",
                "description": "ID of the channel where the message is located in.",
                "required": true
            },
            {
                "field": "messageID",
                "type": "number",
                "description": "The ID of the message that has an embed.",
                "required": true
            },
            {
                "field": "index",
                "type": "number",
                "description": "The index of the embed.",
                "required": true
            },
            {
                "field": "option",
                "type": "string",
                "description": "The option to fetch.",
                "required": true
            }
        ],
        "example": "This will return the description of an embed:\n\n```javascript\nclient.command({\n    name: \"getEmbed\",\n    code: `\n$getEmbed[$channelID;messageID;1;description] \n  ` // make sure to replace messageID with the actual message ID\n});\n```",
        "tip": null,
        "documentation": "https://aoi.js.org/functions/getembed",
        "source": "https://github.com/aoijs/aoi.js/tree/v6/src/functions/embeds/getEmbed.js",
        "type": "Aoi.Js"
    },
    {
        "function": "$getGlobalUserVar",
        "description": "$getGlobalUserVar will return the value of a given global user variable.",
        "usage": "$getGlobalUserVar[varname;userID?;table?]",
        "parameters": [
            {
                "field": "varname",
                "type": "string",
                "description": "Variable name.",
                "required": true
            },
            {
                "field": "userID",
                "type": "number",
                "description": "User ID.",
                "required": false
            },
            {
                "field": "table",
                "type": "string",
                "description": "Variable table.",
                "required": false
            }
        ],
        "example": "This will return the value of a variable called \"Example\":\n\n```javascript\nclient.command({\n    name: \"getGlobalUserVar\",\n    code: `\n    $getGlobalUserVar[Example;$authorID;main]\n    `\n});\n```",
        "tip": null,
        "documentation": "https://aoi.js.org/functions/getglobaluservar",
        "source": "https://github.com/aoijs/aoi.js/tree/v6/src/functions/database/getGlobalUserVar.js",
        "type": "Aoi.Js"
    },
    {
        "function": "$getGuildAutomodNames",
        "description": "$getGuildAutomodNames will return the guild's automod rules.",
        "usage": "$getGuildAutomodNames[guildID?]",
        "parameters": [
            {
                "field": "guildID",
                "type": "number",
                "description": "The ID of the guild.",
                "required": false
            }
        ],
        "example": "This will return the automod rules of the current guild (if any):\n\n```javascript\nclient.command({\n    name: \"getGuildAutomodNames\",\n    code: `\n  $getGuildAutomodNames[$guildID]\n  `\n});\n```",
        "tip": null,
        "documentation": "https://aoi.js.org/functions/getguildautomodnames",
        "source": "https://github.com/aoijs/aoi.js/tree/v6/src/functions/misc/getGuildAutomodNames.js",
        "type": "Aoi.Js"
    },
    {
        "function": "$getGuildBoosters",
        "description": "$getGuildBoosters will fetch and return the automod rules of the specified guild",
        "usage": "$getGuildBoosters[guildID;option?;sep?]",
        "parameters": [
            {
                "field": "guildID",
                "type": "number",
                "description": "The ID of the guild.",
                "required": true
            },
            {
                "field": "option",
                "type": "string",
                "description": "The type of the function response.",
                "required": false
            },
            {
                "field": "sep",
                "type": "string",
                "description": "The separator between each booster.",
                "required": false
            }
        ],
        "example": "```javascript\nclient.command({\n    name: \"getGuildBoosters\",\n    code: `\n    $getGuildBoosters[$guildID;{username} - {id};, ]\n    `\n});\n```",
        "tip": null,
        "documentation": "https://aoi.js.org/functions/getguildboosters",
        "source": "https://github.com/aoijs/aoi.js/tree/v6/src/functions/guild/getGuildBoosters.js",
        "type": "Aoi.Js"
    },
    {
        "function": "$getGuildForumTags",
        "description": "$getGuildForumTags will return the forum's tags.",
        "usage": "$getGuildForumTags[forumId;option?;separator?]",
        "parameters": [
            {
                "field": "forumId",
                "type": "number",
                "description": "The ID of the forum channel.",
                "required": true
            },
            {
                "field": "option",
                "type": "string",
                "description": "The option / format to return.",
                "required": false
            },
            {
                "field": "separator",
                "type": "string",
                "description": "The separator to separate the data.",
                "required": false
            }
        ],
        "example": "This will return the forum tag names:\n\n```javascript\nclient.command({\n    name: \"getGuildForumTags\",\n    code: `\n  $getGuildForumTags[forumId;name;, ]\n  `\n});\n```\n\nThis will return the emojis of the tags and ids:\n\n```javascript\nclient.command({\n    name: \"getGuildForumTags\",\n    code: `\n  $getGuildForumTags[forumId;Name: {name} -> Emoji: {emoji} {emojiId}]\n  `\n});\n```",
        "tip": null,
        "documentation": "https://aoi.js.org/functions/getguildforumtags",
        "source": "https://github.com/aoijs/aoi.js/tree/v6/src/functions/guild/getGuildForumTags.js",
        "type": "Aoi.Js"
    },
    {
        "function": "$getGuildInvite",
        "description": "$getGuildInvite will create a guild invite.",
        "usage": "$getGuildInvite[guildID?;...options]",
        "parameters": [
            {
                "field": "guildID",
                "type": "number",
                "description": "The guild ID of which the invite will be returned of.",
                "required": false
            },
            {
                "field": "options",
                "type": "string",
                "description": "Invite option object.",
                "required": false
            }
        ],
        "example": "This will create an invite of the channel where the command is executed in:\n\n```javascript\nclient.command({\n    name: \"getGuildInvite\",\n    code: `\n  $getGuildInvite[$guildID]\n  `\n});\n```\n\n### Advanced Example\n\nCreate Temporary Invites with limited uses:\n\n```javascript\nclient.command({\n    name: \"getGuildInvite\",\n    code: `\n  $getGuildInvite[$guildID;{\n            \"temporary\": true,\n            \"maxAge\": 650,\n            \"maxUses\": 25,\n            \"unique\": true\n  }]\n  `\n});\n```",
        "tip": null,
        "documentation": "https://aoi.js.org/functions/getguildinvite",
        "source": "https://github.com/aoijs/aoi.js/tree/v6/src/functions/guild/getGuildInvite.js",
        "type": "Aoi.Js"
    },
    {
        "function": "$getGuildTemplate",
        "description": "$getGuildTemplate will return data about a given guild template.",
        "usage": "$getGuildTemplate[template;property]",
        "parameters": [
            {
                "field": "template",
                "type": "string",
                "description": "The Id of the template you want the data returned of.",
                "required": true
            },
            {
                "field": "property",
                "type": "string",
                "description": "The property to be returned.",
                "required": true
            }
        ],
        "example": "This will return the data about a given guild template:\n\n```javascript\nclient.command({\n    name: \"getGuildTemplate\",\n    code: `\n  $getGuildTemplate[guild-template-code;name]\n  `\n});\n```",
        "tip": null,
        "documentation": "https://aoi.js.org/functions/getguildtemplate",
        "source": "https://github.com/aoijs/aoi.js/tree/v6/src/functions/guild/getGuildTemplate.js",
        "type": "Aoi.Js"
    },
    {
        "function": "$getGuildTemplates",
        "description": "$getGuildTemplates will return all guild templates of a specific guild.",
        "usage": "$getGuildTemplates[guildID?;option?;separator?]",
        "parameters": [
            {
                "field": "guildID",
                "type": "number",
                "description": "The Id of the guild you want their templates returned.",
                "required": false
            },
            {
                "field": "option",
                "type": "string",
                "description": "The option it will be returned as. \n1. **code** (default) \n2. **name**",
                "required": false
            },
            {
                "field": "separator",
                "type": "string",
                "description": "The separator which will separate the data returned.",
                "required": false
            }
        ],
        "example": "This will return all guild templates of the current guild:\n\n```javascript\nclient.command({\n    name: \"getGuildTemplates\",\n    code: `\n  $getGuildTemplates[$guildID;code;, ]\n  `\n});\n```",
        "tip": null,
        "documentation": "https://aoi.js.org/functions/getguildtemplates",
        "source": "https://github.com/aoijs/aoi.js/tree/v6/src/functions/undefined/getGuildTemplates.js",
        "type": "Aoi.Js"
    },
    {
        "function": "$getGuildVar",
        "description": "$getGuildVar will return the value of a given guild variable.",
        "usage": "$getGuildVar[varname;guildID?;table?]",
        "parameters": [
            {
                "field": "varname",
                "type": "string",
                "description": "Variable name.",
                "required": true
            },
            {
                "field": "guildID",
                "type": "number",
                "description": "Guild ID.",
                "required": false
            },
            {
                "field": "table",
                "type": "string",
                "description": "Variable table.",
                "required": false
            }
        ],
        "example": "This will return the value of a variable called \"Example\":\n\n```javascript\nclient.command({\n    name: \"getGuildVar\",\n    code: `\n    $getGuildVar[Example;$guildID;main]\n    `\n});\n```",
        "tip": null,
        "documentation": "https://aoi.js.org/functions/getguildvar",
        "source": "https://github.com/aoijs/aoi.js/tree/v6/src/functions/guild/getGuildVar.js",
        "type": "Aoi.Js"
    },
    {
        "function": "$getLeaderboardInfo",
        "description": "$getLeaderboardInfo will return information about a given variable sorted in a leaderboard.",
        "usage": "$getLeaderboardInfo[variable;id;type;option;table?]",
        "parameters": [
            {
                "field": "variable",
                "type": "string",
                "description": "Variable name.",
                "required": true
            },
            {
                "field": "id",
                "type": "number",
                "description": "User/guild/channel/message ID.",
                "required": true
            },
            {
                "field": "type",
                "type": "string",
                "description": "Variable type \n1. **global** \n2. **guild** (default) \n3. **channel** \n4. **message**",
                "required": true
            },
            {
                "field": "option",
                "type": "string",
                "description": "Option to return \n1. **top** \n2. **value** \n3. **tag** \n4. **username**",
                "required": true
            },
            {
                "field": "table",
                "type": "string",
                "description": "The database table to search in.",
                "required": false
            }
        ],
        "example": "This will return the position of the current guild:\n\n```javascript\nclient.command({\n    name: \"getLeaderboardInfo\",\n    code: `\n    $getLeaderboardInfo[Example;$authorId;guild;top]\n    `\n});\n```",
        "tip": null,
        "documentation": "https://aoi.js.org/functions/getleaderboardinfo",
        "source": "https://github.com/aoijs/aoi.js/tree/v6/src/functions/database/getLeaderboardInfo.js",
        "type": "Aoi.Js"
    },
    {
        "function": "$getMentions",
        "description": "$getMentions will return all mentions of a specific type.",
        "usage": "$getMentions[type?;separator?]",
        "parameters": [
            {
                "field": "type",
                "type": "string",
                "description": "The type of mention. \n**1.** role \n**2.** users",
                "required": false
            },
            {
                "field": "separator",
                "type": "string",
                "description": "The separator of the mentions, default = \", \"",
                "required": false
            }
        ],
        "example": "This will return all user mentions:\n\n```javascript\nclient.command({\n    name: \"getMentions\",\n    code: `\n$getMentions[users;, ]\n`\n});\n```",
        "tip": null,
        "documentation": "https://aoi.js.org/functions/getmentions",
        "source": "https://github.com/aoijs/aoi.js/tree/v6/src/functions/misc/getMentions.js",
        "type": "Aoi.Js"
    },
    {
        "function": "$getMessage",
        "description": "$getMessage will return properties about a given message.",
        "usage": "$getMessage[channelID;messageID;option?]",
        "parameters": [
            {
                "field": "channelID",
                "type": "number",
                "description": "ID of the channel where the message is located in.",
                "required": true
            },
            {
                "field": "messageID",
                "type": "number",
                "description": "The ID of the message.",
                "required": true
            },
            {
                "field": "option",
                "type": "string",
                "description": "Which option to fetch.",
                "required": false
            }
        ],
        "example": "This will return the content of your sent message:\n\n```javascript\nclient.command({\n    name: \"getMessage\",\n    code: `\n$getMessage[$channelID;$messageID;content]\n  `\n});\n```",
        "tip": null,
        "documentation": "https://aoi.js.org/functions/getmessage",
        "source": "https://github.com/aoijs/aoi.js/tree/v6/src/functions/misc/getMessage.js",
        "type": "Aoi.Js"
    },
    {
        "function": "$getMessageReactions",
        "description": "$getMessageReactions returns a list of reactions from a specified message in a channel.",
        "usage": "$getMessageReactions[channelID?;messageID;type?;sep?]",
        "parameters": [
            {
                "field": "channelID",
                "type": "string",
                "description": "The ID of the channel where the message is located. Defaults to the current channel if not provided.",
                "required": false
            },
            {
                "field": "messageID",
                "type": "string",
                "description": "The ID of the message to get reactions from.",
                "required": true
            },
            {
                "field": "type",
                "type": "string",
                "description": "The type of data to return: \n1. **emoji** (default) – emoji format \n2. **name** \n3. **id**",
                "required": false
            },
            {
                "field": "sep",
                "type": "string",
                "description": "Separator to separate multiple returned values. Default is `, `.",
                "required": false
            }
        ],
        "example": "This command returns the list of emoji reactions (formatted) on a specific message:\n\n```javascript\nclient.command({\n    name: \"getMessageReactions\",\n    code: `\n  $getMessageReactions[$channelID;112233445566778899;emoji;, ] $comment[Example message ID provided.]\n  `\n});\n```\n\nThis command returns only the names of the emoji reactions:\n\n```javascript\nclient.command({\n    name: \"getMessageReactions\",\n    code: `\n  $getMessageReactions[$channelID;112233445566778899;name] $comment[Example message ID provided.]\n  `\n});\n```",
        "tip": null,
        "documentation": "https://aoi.js.org/functions/getmessagereactions",
        "source": "https://github.com/aoijs/aoi.js/tree/v6/src/functions/components/getMessageReactions.js",
        "type": "Aoi.Js"
    },
    {
        "function": "$getMessageVar",
        "description": "$getMessageVar will return the value of a given message variable.",
        "usage": "$getMessageVar[varname;messageId?;table?]",
        "parameters": [
            {
                "field": "varname",
                "type": "string",
                "description": "Variable name.",
                "required": true
            },
            {
                "field": "messageID",
                "type": "number",
                "description": "Message ID",
                "required": false
            },
            {
                "field": "table",
                "type": "string",
                "description": "Variable table.",
                "required": false
            }
        ],
        "example": "This will return the value of a variable called \"Example\":\n\n```javascript\nclient.command({\n    name: \"getMessageVar\",\n    code: `\n    $getMessageVar[Example;$messageID;main]\n    `\n});\n```",
        "tip": null,
        "documentation": "https://aoi.js.org/functions/getmessagevar",
        "source": "https://github.com/aoijs/aoi.js/tree/v6/src/functions/database/getMessageVar.js",
        "type": "Aoi.Js"
    },
    {
        "function": "$getObject",
        "description": "$getObject will return the previously created object.",
        "usage": "$getObject[objectName;format?]",
        "parameters": [
            {
                "field": "objectName",
                "type": "string",
                "description": "The object name.",
                "required": true
            },
            {
                "field": "format",
                "type": "boolean",
                "description": "Format the output? \n1. **true** (default) 2. **false**",
                "required": false
            }
        ],
        "example": "This will return the object created in `$createObject`:\n\n```javascript\nclient.command({\n    name: \"getObject\",\n    code: `\n    $getObject[Object Name;true]\n    $createObject[Object Name;{\"Leref\": \"Ferel\"}]\n    `\n});\n```",
        "tip": null,
        "documentation": "https://aoi.js.org/functions/getobject",
        "source": "https://github.com/aoijs/aoi.js/tree/v6/src/functions/misc/getObject.js",
        "type": "Aoi.Js"
    },
    {
        "function": "$getObjectKeys",
        "description": "$getObjectKeys will return all keys of all properties within the given object.",
        "usage": "$getObjectKeys[objectName;separator?]",
        "parameters": [
            {
                "field": "objectName",
                "type": "string",
                "description": "Name of the object.",
                "required": true
            },
            {
                "field": "separator",
                "type": "string",
                "description": "The separator.",
                "required": true
            }
        ],
        "example": "This will return `Leref` and `dbd.js`:\n\n```javascript\nclient.command({\n    name: \"getObjectKeys\",\n    code: `\n  $getObjectKeys[Object Name; ]\n  $createObject[Object Name;{\n    \"Leref\": \"Ferel\",\n    \"dbd.js\": \"aoi.js\"\n  }]\n  `\n});\n```",
        "tip": null,
        "documentation": "https://aoi.js.org/functions/getobjectkeys",
        "source": "https://github.com/aoijs/aoi.js/tree/v6/src/functions/misc/getObjectKeys.js",
        "type": "Aoi.Js"
    },
    {
        "function": "$getObjectProperty",
        "description": "$getObjectProperty will return a object property of a given object.",
        "usage": "$getObjectProperty[objectName;property]",
        "parameters": [
            {
                "field": "objectName",
                "type": "string",
                "description": "The object name.",
                "required": true
            },
            {
                "field": "property",
                "type": "string",
                "description": "Name of the properties.",
                "required": true
            }
        ],
        "example": "This will return the object property of \"Leref\" created in `$createObject`:\n\n```javascript\nclient.command({\n    name: \"getObjectProperty\",\n    code: `\n    $getObjectProperty[Object Name;Leref]\n    $createObject[Object Name;{\"Leref\": \"Ferel\"}]\n    `\n});\n```",
        "tip": null,
        "documentation": "https://aoi.js.org/functions/getobjectproperty",
        "source": "https://github.com/aoijs/aoi.js/tree/v6/src/functions/misc/getObjectProperty.js",
        "type": "Aoi.Js"
    },
    {
        "function": "$getObjectValues",
        "description": "$getObjectValues will return all values of all properties within the given object.",
        "usage": "$getObjectValues[objectName;separator?]",
        "parameters": [
            {
                "field": "objectName",
                "type": "string",
                "description": "Name of the object.",
                "required": true
            },
            {
                "field": "separator",
                "type": "string",
                "description": "The separator.",
                "required": true
            }
        ],
        "example": "This will return `Ferel` and `aoi.js`:\n\n```javascript\nclient.command({\n    name: \"getObjectValues\",\n    code: `\n  $getObjectValues[Object Name; ]\n  $createObject[Object Name;{\n    \"Leref\": \"Ferel\",\n    \"dbd.js\": \"aoi.js\"\n  }]\n  `\n});\n```",
        "tip": null,
        "documentation": "https://aoi.js.org/functions/getobjectvalues",
        "source": "https://github.com/aoijs/aoi.js/tree/v6/src/functions/misc/getObjectValues.js",
        "type": "Aoi.Js"
    },
    {
        "function": "$getPollVotes",
        "description": "$getPollVotes will return the users that voted for the answer.",
        "usage": "$getPollVotes[channelID?;messageID?;pollId;format?;sep?]",
        "parameters": [
            {
                "field": "channelID",
                "type": "number",
                "description": "The channel ID where the poll was created.",
                "required": false
            },
            {
                "field": "messageID",
                "type": "number",
                "description": "The message ID of the poll.",
                "required": false
            },
            {
                "field": "pollId",
                "type": "number",
                "description": "ID of the poll answer where the votes will be retrieved from.",
                "required": true
            },
            {
                "field": "format",
                "type": "string",
                "description": "Format for the list.\n1. **username**\n2. **tag**\n3. **id**",
                "required": false
            },
            {
                "field": "sep",
                "type": "string",
                "description": "Separator for each entry (default `,`).",
                "required": false
            }
        ],
        "example": "This will return the username of the usernames that voted for the first answer on the poll, separated by a comma. Replace the `channelID` and `messageID` with actual IDs:\n\n```js\nclient.command({\n  name: \"getPollVotes\",\n  code: `$getPollVotes[channelID;messageID;1;{username};, ]`\n});\n```",
        "tip": null,
        "documentation": "https://aoi.js.org/functions/getpollvotes",
        "source": "https://github.com/aoijs/aoi.js/tree/v6/src/functions/misc/getPollVotes.js",
        "type": "Aoi.Js"
    },
    {
        "function": "$getReactions",
        "description": "$getReactions will return properties about a given reaction on a specific message.",
        "usage": "$getReactions[channelID;messageID;reaction;force?;option?]",
        "parameters": [
            {
                "field": "channelID",
                "type": "number",
                "description": "ID of the channel where the message is located in.",
                "required": true
            },
            {
                "field": "messageID",
                "type": "number",
                "description": "ID of the message.",
                "required": true
            },
            {
                "field": "reaction",
                "type": "string",
                "description": "The reaction its information will be returned of.",
                "required": true
            },
            {
                "field": "force",
                "type": "boolean",
                "description": "1. **true** (default) \n2. **false**",
                "required": false
            },
            {
                "field": "option",
                "type": "string",
                "description": "How it will return the users who reacted to that message \n1. **username** (default) - returns the usernames \n2. **mention** - mentions the users \n3. **id** - returns the user id",
                "required": false
            }
        ],
        "example": "This will mention all users that reacted to your message, in this case, only your bot:\n\n```javascript\nclient.command({\n    name: \"getReactions\",\n    code: `\n$getReactions[$channelID;$messageID;👋;true;mention]\n$addCmdReactions[👋]\n  `\n});\n```",
        "tip": null,
        "documentation": "https://aoi.js.org/functions/getreactions",
        "source": "https://github.com/aoijs/aoi.js/tree/v6/src/functions/components/getReactions.js",
        "type": "Aoi.Js"
    },
    {
        "function": "$getRoleColor",
        "description": "$getRoleColor will return the given role's color.",
        "usage": "$getRoleColor[roleId;guildID?]",
        "parameters": [
            {
                "field": "roleId",
                "type": "number",
                "description": "The ID of the role you want the color to be returned of.",
                "required": true
            },
            {
                "field": "guildID",
                "type": "number",
                "description": "The ID of the guild where the role exists in.",
                "required": false
            }
        ],
        "example": "This will return the role ID of your highest role:\n\n```javascript\nclient.command({\n    name: \"getRoleColor\",\n    code: `\n  $getRoleColor[$userHighestRole]\n  `\n});\n```",
        "tip": null,
        "documentation": "https://aoi.js.org/functions/getrolecolor",
        "source": "https://github.com/aoijs/aoi.js/tree/v6/src/functions/misc/getRoleColor.js",
        "type": "Aoi.Js"
    },
    {
        "function": "$getSelectMenuValues",
        "description": "$getSelectMenuValues returns the value of an option from select menu.",
        "usage": "$getSelectMenuValues[index?;sep?]",
        "parameters": [
            {
                "field": "index",
                "type": "string",
                "description": "The option index from where the value will be fetched.\n1. **all** - returns the value of all options.\n2. **any number** (default `1`)",
                "required": false
            },
            {
                "field": "sep",
                "type": "string",
                "description": "Separator for returned values. (default `,`)",
                "required": false
            }
        ],
        "example": "This will return the ID of all selected users from the option, delimited by comma (`,`):\n\n```js\nclient.command({\n    name: \"select-menu\",\n    code: `\n  Select a user.\n  $addSelectMenu[1;user;yourCustomID;This is a placeholder!;1;5;false]`\n});\n\nclient.interactionCommand({\n    name: \"yourCustomID\",\n    prototype: \"selectMenu\",\n    code: `$interactionReply[$getSelectMenuValues[all;,]]`\n});\n```",
        "tip": null,
        "documentation": "https://aoi.js.org/functions/getselectmenuvalues",
        "source": "https://github.com/aoijs/aoi.js/tree/v6/src/functions/components/getSelectMenuValues.js",
        "type": "Aoi.Js"
    },
    {
        "function": "$getTextSplitLength",
        "description": "$getTextSplitLength will return the amount of split arguments in $textSplit",
        "usage": "$getTextSplitLength",
        "parameters": [],
        "example": "This will return `5` as there are five arguments separated by commas given in `$textSplit`\n\n```javascript\nclient.command({\n    name: \"getTextSplitLength\",\n    code: `\n  $getTextSplitLength\n  $textSplit[Hello, my, name, is, Leref;, ]\n  `\n});\n```",
        "tip": null,
        "documentation": "https://aoi.js.org/functions/gettextsplitlength",
        "source": "https://github.com/aoijs/aoi.js/tree/v6/src/functions/misc/getTextSplitLength.js",
        "type": "Aoi.Js"
    },
    {
        "function": "$getTimeout",
        "description": "$getTimeout returns information about a specific timeout.",
        "usage": "$getTimeout[timeoutId;key?]",
        "parameters": [
            {
                "field": "timeoutId",
                "type": "number",
                "description": "The ID of the timeout.",
                "required": true
            },
            {
                "field": "key",
                "type": "string",
                "description": "The key value that will be returned. \n1. **key** (default) \n2. **duration** \n3. **id**",
                "required": false
            }
        ],
        "example": "This will return the duration of the specified timeout.\n\n```js\nclient.command({\n    name: \"getTimeout\",\n    code: `\n$getTimeout[$get[timeoutID;duration] $comment[Example duration value, 1723905246347]\n$let[timeoutID;$setTimeout[timeoutCommand;100s;{};true]]\n  `\n});\n```",
        "tip": null,
        "documentation": "https://aoi.js.org/functions/gettimeout",
        "source": "https://github.com/aoijs/aoi.js/tree/v6/src/functions/misc/getTimeout.js",
        "type": "Aoi.Js"
    },
    {
        "function": "$getUserVar",
        "description": "$getUserVar will return the value of a given user variable.",
        "usage": "$getUserVar[varname;userID?;id?;table?]",
        "parameters": [
            {
                "field": "varname",
                "type": "string",
                "description": "Variable name.",
                "required": true
            },
            {
                "field": "userID",
                "type": "number",
                "description": "User ID.",
                "required": false
            },
            {
                "field": "id",
                "type": "string",
                "description": "1. **specific guild id** \n2. **dm**",
                "required": false
            },
            {
                "field": "table",
                "type": "string",
                "description": "Variable table.",
                "required": false
            }
        ],
        "example": "This will return the value of a variable called \"Example\":\n\n```javascript\nclient.command({\n    name: \"getUserVar\",\n    code: `\n    $getUserVar[Example;$authorID;$guildID;main]\n    `\n});\n```",
        "tip": null,
        "documentation": "https://aoi.js.org/functions/getuservar",
        "source": "https://github.com/aoijs/aoi.js/tree/v6/src/functions/misc/getUserVar.js",
        "type": "Aoi.Js"
    },
    {
        "function": "$getVar",
        "description": "$getVar will return the value of a global variable.",
        "usage": "$getVar[varname;table?]",
        "parameters": [
            {
                "field": "varname",
                "type": "string",
                "description": "Variable name.",
                "required": true
            },
            {
                "field": "table",
                "type": "string",
                "description": "Variable table.",
                "required": false
            }
        ],
        "example": "This will return the value of a variable called \"Example\":\n\n```javascript\nclient.command({\n    name: \"getVar\",\n    code: `\n    $getVar[Example;main]\n    `\n});\n```",
        "tip": null,
        "documentation": "https://aoi.js.org/functions/getvar",
        "source": "https://github.com/aoijs/aoi.js/tree/v6/src/functions/misc/getVar.js",
        "type": "Aoi.Js"
    },
    {
        "function": "$giveRole",
        "description": "$giveRole will give an specific user a specific role.",
        "usage": "$giveRole[guildID;userID;roleID;reason?]",
        "parameters": [
            {
                "field": "guildID",
                "type": "number",
                "description": "Of which guild the member should receive roles of.",
                "required": true
            },
            {
                "field": "userID",
                "type": "number",
                "description": "The user ID of the guild member.",
                "required": true
            },
            {
                "field": "roleID",
                "type": "number",
                "description": "The ID of the role to give.",
                "required": true
            },
            {
                "field": "reason",
                "type": "string",
                "description": "The reason that will be displayed in the guild's audit logs.",
                "required": false
            }
        ],
        "example": "This will assign you a role called \"Admin\" (if present):\n\n```javascript\nclient.command({\n    name: \"giveRole\",\n    code: `\n  $giveRole[$guildID;$authorID;$findRole[Admin];Some reason.]\n  `\n});\n```",
        "tip": null,
        "documentation": "https://aoi.js.org/functions/giverole",
        "source": "https://github.com/aoijs/aoi.js/tree/v6/src/functions/guild/giveRole.js",
        "type": "Aoi.Js"
    },
    {
        "function": "$giveRoles",
        "description": "$giveRoles will give an specific user multiple or one specific role(s).",
        "usage": "$giveRoles[guildID;userID;reason?;...roles]",
        "parameters": [
            {
                "field": "guildID",
                "type": "number",
                "description": "Of which guild the member should receive roles of.",
                "required": true
            },
            {
                "field": "userID",
                "type": "number",
                "description": "The user ID of the guild member.",
                "required": true
            },
            {
                "field": "reason",
                "type": "string",
                "description": "The reason that will be displayed in the guild's audit logs.",
                "required": false
            },
            {
                "field": "roles",
                "type": "number",
                "description": "The IDs of the roles to give.",
                "required": true
            }
        ],
        "example": "This will assign you two role called \"Admin\" and \"Moderator\" (if present):\n\n```javascript\nclient.command({\n    name: \"giveRoles\",\n    code: `\n  $giveRoles[$guildID;$authorID;Some reason.;$findRole[Admin];$findRole[Moderator]]\n  `\n});\n```",
        "tip": null,
        "documentation": "https://aoi.js.org/functions/giveroles",
        "source": "https://github.com/aoijs/aoi.js/tree/v6/src/functions/guild/giveRoles.js",
        "type": "Aoi.Js"
    },
    {
        "function": "$globalCooldown",
        "description": "$globalCooldown will set a global-based cooldown for a command.",
        "usage": "$globalCooldown[time;errorMessage]",
        "parameters": [
            {
                "field": "time",
                "type": "string",
                "description": "The duration of the cooldown.",
                "required": true
            },
            {
                "field": "errorMessage",
                "type": "string",
                "description": "Error message given when there's remaining time of the cooldown.",
                "required": true
            }
        ],
        "example": "This will return `Hello` and stop anyone from executing the command again for another five minutes:\n\n```javascript\nclient.command({\n    name: \"globalCooldown\",\n    code: `\n  Hello\n  $globalCooldown[5m;Please wait %time% to execute this command again.]\n  `\n});\n```",
        "tip": null,
        "documentation": "https://aoi.js.org/functions/globalcooldown",
        "source": "https://github.com/aoijs/aoi.js/tree/v6/src/functions/misc/globalCooldown.js",
        "type": "Aoi.Js"
    },
    {
        "function": "$globalUserLeaderBoard",
        "description": "$globalUserLeaderBoard will return a leaderboard of a global user variable.",
        "usage": "$globalUserLeaderBoard[variable;type?;custom?;list?;page?;table?]",
        "parameters": [
            {
                "field": "variable",
                "type": "string",
                "description": "Variable name.",
                "required": true
            },
            {
                "field": "type",
                "type": "string",
                "description": "In which order it will be returned \n1. **asc** (ascending / default) \n2. **dsc** (descending)",
                "required": false
            },
            {
                "field": "custom",
                "type": "string",
                "description": "Formatting.",
                "required": false
            },
            {
                "field": "list",
                "type": "number",
                "description": "How many to list.",
                "required": false
            },
            {
                "field": "page",
                "type": "number",
                "description": "Which page to list.",
                "required": false
            },
            {
                "field": "table",
                "type": "string",
                "description": "Variable table.",
                "required": false
            }
        ],
        "example": "This will returns a leaderboard of the \"Example\" variable:\n\n```javascript\nclient.command({\n    name: \"globalUserLeaderBoard\",\n    code: `\n    $globalUserLeaderBoard[Example;asc;{top} - {username} - {value};10;1;main]\n    `\n});\n```",
        "tip": null,
        "documentation": "https://aoi.js.org/functions/globaluserleaderboard",
        "source": "https://github.com/aoijs/aoi.js/tree/v6/src/functions/misc/globalUserLeaderBoard.js",
        "type": "Aoi.Js"
    },
    {
        "function": "$guildAFKChannelID",
        "description": "$guildAFKChannelID will return a guild's AFK voice channel.",
        "usage": "$guildAFKChannelID[guildID?]",
        "parameters": [
            {
                "field": "guildID",
                "type": "number",
                "description": "The ID of the guild.",
                "required": true
            }
        ],
        "example": "This will return the AFK voice channel of your guild:\n\n```javascript\nclient.command({\n    name: \"guildAFKChannelID\",\n    code: `\n  $guildAFKChannelID\n  `\n});\n```",
        "tip": null,
        "documentation": "https://aoi.js.org/functions/guildafkchannelid",
        "source": "https://github.com/aoijs/aoi.js/tree/v6/src/functions/guild/guildAFKChannelID.js",
        "type": "Aoi.Js"
    },
    {
        "function": "$guildAvailable",
        "description": "$guildAvailable will return if the given guild is available on Discord.",
        "usage": "$guildAvailable[guildID?]",
        "parameters": [
            {
                "field": "guildID",
                "type": "number",
                "description": "The ID of the guild.",
                "required": false
            }
        ],
        "example": "This will return `true` or `false` depending on if the guild is available:\n\n```javascript\nclient.command({\n    name: \"guildAvailable\",\n    code: `\n  $guildAvailable[$guildID]\n  `\n});\n```",
        "tip": null,
        "documentation": "https://aoi.js.org/functions/guildavailable",
        "source": "https://github.com/aoijs/aoi.js/tree/v6/src/functions/guild/guildAvailable.js",
        "type": "Aoi.Js"
    },
    {
        "function": "$guildBanner",
        "description": "$guildBanner will return the guild banner of a given guild.",
        "usage": "$guildBanner[guildID?;size?;dynamic?;extension?]",
        "parameters": [
            {
                "field": "guildID",
                "type": "number",
                "description": "The ID of the guild.",
                "required": false
            },
            {
                "field": "size",
                "type": "number",
                "description": "The size of the image.",
                "required": false
            },
            {
                "field": "dynamic",
                "type": "boolean",
                "description": "1. **true** (default) \n2. **false**",
                "required": false
            },
            {
                "field": "extension",
                "type": "string",
                "description": "Image format.",
                "required": false
            }
        ],
        "example": "This will return your guild banner (if unlocked and using):\n\n```javascript\nclient.command({\n    name: \"guildBanner\",\n    code: `\n  $guildBanner[$guildID]\n  `\n});\n```",
        "tip": null,
        "documentation": "https://aoi.js.org/functions/guildbanner",
        "source": "https://github.com/aoijs/aoi.js/tree/v6/src/functions/guild/guildBanner.js",
        "type": "Aoi.Js"
    },
    {
        "function": "$guildBoostCount",
        "description": "$guildBoostCount will return the guild's boost count.",
        "usage": "$guildBoostCount[guildID?]",
        "parameters": [
            {
                "field": "guildID",
                "type": "number",
                "description": "The ID of the guild.",
                "required": false
            }
        ],
        "example": "This will return the amount of boosts a specific guild has:\n\n```javascript\nclient.command({\n    name: \"guildBoostCount\",\n    code: `\n  $guildBoostCount[$guildID]\n  `\n});\n```",
        "tip": null,
        "documentation": "https://aoi.js.org/functions/guildboostcount",
        "source": "https://github.com/aoijs/aoi.js/tree/v6/src/functions/guild/guildBoostCount.js",
        "type": "Aoi.Js"
    },
    {
        "function": "$guildBoostLevel",
        "description": "$guildBoostLevel will return the guild's boost level.",
        "usage": "$guildBoostLevel[guildID?]",
        "parameters": [
            {
                "field": "guildID",
                "type": "number",
                "description": "The ID of the guild.",
                "required": false
            }
        ],
        "example": "This will return the boost level of a specific guild:\n\n```javascript\nclient.command({\n    name: \"guildBoostLevel\",\n    code: `\n  $guildBoostLevel[$guildID]\n  `\n});\n```",
        "tip": null,
        "documentation": "https://aoi.js.org/functions/guildboostlevel",
        "source": "https://github.com/aoijs/aoi.js/tree/v6/src/functions/guild/guildBoostLevel.js",
        "type": "Aoi.Js"
    },
    {
        "function": "$guildBotCount",
        "description": "$guildBotCount will return the amount of Bots in your guild.",
        "usage": "$guildBotCount[guildID?]",
        "parameters": [
            {
                "field": "guildID",
                "type": "number",
                "description": "Guild ID of the guild you want to retrieve the amount of bots.",
                "required": false
            }
        ],
        "example": "This will return the amount of bots in your guild:\n\n```javascript\nclient.command({\n    name: \"guildBotCount\",\n    code: `\n  $guildBotCount\n  `\n});\n```",
        "tip": null,
        "documentation": "https://aoi.js.org/functions/guildbotcount",
        "source": "https://github.com/aoijs/aoi.js/tree/v6/src/functions/guild/guildBotCount.js",
        "type": "Aoi.Js"
    },
    {
        "function": "$guildChannelExists",
        "description": "$guildChannelExists will check if a given guild channel exists.",
        "usage": "$guildChannelExists[guildID;channelResolver]",
        "parameters": [
            {
                "field": "guildID",
                "type": "number",
                "description": "ID of the guild where the guild channel exists in.",
                "required": true
            },
            {
                "field": "channelResolver",
                "type": "number",
                "description": "ID or name of the channel.",
                "required": true
            }
        ],
        "example": "This will check if a guild channel with the name `rules` exists, alternatively, you could use the channel ID instead:\n\n```javascript\nclient.command({\n    name: \"guildChannelExists\",\n    code: `\n  $guildChannelExists[$guildID;rules]\n  `\n});\n```",
        "tip": null,
        "documentation": "https://aoi.js.org/functions/guildchannelexists",
        "source": "https://github.com/aoijs/aoi.js/tree/v6/src/functions/guild/guildChannelExists.js",
        "type": "Aoi.Js"
    },
    {
        "function": "$guildChannels",
        "description": "$guildChannels will return all channels of a specific guild.",
        "usage": "$guildChannels[guildID?;option?;sep?]",
        "parameters": [
            {
                "field": "guildID",
                "type": "number",
                "description": "The ID of the guild.",
                "required": false
            },
            {
                "field": "option",
                "type": "string",
                "description": "The option on how to return the channel \n1. **name** (default) \n2. **id** \n3. **mention**",
                "required": false
            },
            {
                "field": "sep",
                "type": "string",
                "description": "Separator to separate multiple returned values.",
                "required": false
            }
        ],
        "example": "This will return all channels of your guild:\n\n```javascript\nclient.command({\n    name: \"guildChannels\",\n    code: `\n  $guildChannels[$guildID;mention;, ]\n  `\n});\n```",
        "tip": null,
        "documentation": "https://aoi.js.org/functions/guildchannels",
        "source": "https://github.com/aoijs/aoi.js/tree/v6/src/functions/guild/guildChannels.js",
        "type": "Aoi.Js"
    },
    {
        "function": "$guildCommunityUpdatesChannelID",
        "description": "$guildCommunityUpdatesChannelID will return the guild's community updates channel.",
        "usage": "$guildCommunityUpdatesChannelID[guildID?]",
        "parameters": [
            {
                "field": "guildID",
                "type": "number",
                "description": "The ID of the guild.",
                "required": false
            }
        ],
        "example": "This will return the community updates channel ID of the current guild (if any):\n\n```javascript\nclient.command({\n    name: \"guildCommunityUpdatesChannelID\",\n    code: `\n  $guildCommunityUpdatesChannelID[$guildID]\n  `\n});\n```",
        "tip": null,
        "documentation": "https://aoi.js.org/functions/guildcommunityupdateschannelid",
        "source": "https://github.com/aoijs/aoi.js/tree/v6/src/functions/guild/guildCommunityUpdatesChannelID.js",
        "type": "Aoi.Js"
    },
    {
        "function": "$guildContentFilter",
        "description": "$guildContentFilter will return the guild's content filter level.",
        "usage": "$guildContentFilter[guildID?]",
        "parameters": [
            {
                "field": "guildID",
                "type": "number",
                "description": "The ID of the guild.",
                "required": true
            }
        ],
        "example": "This will return the content filter level of a specific guild:\n\n```javascript\nclient.command({\n    name: \"guildContentFilter\",\n    code: `\n  $guildContentFilter[$guildID]\n  `\n});\n```",
        "tip": null,
        "documentation": "https://aoi.js.org/functions/guildcontentfilter",
        "source": "https://github.com/aoijs/aoi.js/tree/v6/src/functions/guild/guildContentFilter.js",
        "type": "Aoi.Js"
    },
    {
        "function": "$guildCooldown",
        "description": "$guildCooldown will set a cooldown for the guild after being used.",
        "usage": "$guildCooldown[time;errorMessage]",
        "parameters": [
            {
                "field": "time",
                "type": "number",
                "description": "The duration of the cooldown.",
                "required": true
            },
            {
                "field": "errorMessage",
                "type": "string",
                "description": "Error message when there's remaining time for the cooldown.",
                "required": true
            }
        ],
        "example": "This will set a cooldown for a command which applies to the guild only and returns the remaining cooldown:\n\n```javascript\nclient.command({\n    name: \"guildCooldown\",\n    code: `\n  hello\n  $guildCooldown[2m;Please wait %time% to execute this command again.]\n  `\n});\n```",
        "tip": null,
        "documentation": "https://aoi.js.org/functions/guildcooldown",
        "source": "https://github.com/aoijs/aoi.js/tree/v6/src/functions/guild/guildCooldown.js",
        "type": "Aoi.Js"
    },
    {
        "function": "$guildCount",
        "description": "$guildCount will return the amount of guilds of where your bot is in.",
        "usage": "$guildCount",
        "parameters": [],
        "example": "This will return the amount of guilds your bot is in:\n\n```javascript\nclient.command({\n    name: \"guildCount\",\n    code: `\n  I'm in $guildCount guilds!\n  `\n});\n```",
        "tip": null,
        "documentation": "https://aoi.js.org/functions/guildcount",
        "source": "https://github.com/aoijs/aoi.js/tree/v6/src/functions/guild/guildCount.js",
        "type": "Aoi.Js"
    },
    {
        "function": "$guildCreatePost",
        "description": "$guildCreatePost will create a post within a guild forum.",
        "usage": "$guildCreatePost[forumId;name;content;autoArchiveDuration?;returnId?;reason?;...appliedTags?]",
        "parameters": [
            {
                "field": "forumId",
                "type": "number",
                "description": "The ID of the forum channel.",
                "required": true
            },
            {
                "field": "name",
                "type": "string",
                "description": "The name of the forum post.",
                "required": true
            },
            {
                "field": "content",
                "type": "string",
                "description": "The content of the start message.",
                "required": true
            },
            {
                "field": "[autoArchiveDuration](https://discord-api-types.dev/api/discord-api-types-v10/enum/ThreadAutoArchiveDuration)",
                "type": "number",
                "description": "The automatic archive duration of the forum post. \n- **1440** (one day) \n- **60** (one hour) \n- **10080** (one week / default) \n- **4320** (three days)",
                "required": false
            },
            {
                "field": "returnId",
                "type": "boolean",
                "description": "Return the ID of the newly created forum post?",
                "required": false
            },
            {
                "field": "reason",
                "type": "string",
                "description": "The reason displayed in the guild's audit logs.",
                "required": false
            },
            {
                "field": "...appliedTags",
                "type": "string",
                "description": "The applied post tags. Optional when the forum channel does not require tags.",
                "required": false
            }
        ],
        "example": "This will create a post in the given forum with the name \"this is a post\" with an embed and a button attached to the message:\n\n```javascript\nclient.command({\n    name: \"guildCreatePost\",\n    code: `\n  $guildCreatePost[forumId;This is a Post!;Hello!  {newEmbed:{title:This is an embed!}} {actionRow:{button:Button:primary:customId:false}};10080;true]\n  `\n});\n```",
        "tip": null,
        "documentation": "https://aoi.js.org/functions/guildcreatepost",
        "source": "https://github.com/aoijs/aoi.js/tree/v6/src/functions/guild/guildCreatePost.js",
        "type": "Aoi.Js"
    },
    {
        "function": "$guildDefaultMessageNotifications",
        "description": "$guildDefaultMessageNotifications will return given guild's default message notification type.",
        "usage": "$guildDefaultMessageNotifications[guildID?]",
        "parameters": [
            {
                "field": "guildID",
                "type": "number",
                "description": "The ID of the guild.",
                "required": false
            }
        ],
        "example": "This will return the guild's default message notification type:\n\n```javascript\nclient.command({\n    name: \"guildDefaultMessageNotifications\",\n    code: `\n  $guildDefaultMessageNotifications\n  `\n});\n```",
        "tip": null,
        "documentation": "https://aoi.js.org/functions/guilddefaultmessagenotifications",
        "source": "https://github.com/aoijs/aoi.js/tree/v6/src/functions/guild/guildDefaultMessageNotifications.js",
        "type": "Aoi.Js"
    },
    {
        "function": "$guildDescription",
        "description": "$guildDescription will return the guild's description.",
        "usage": "$guildDescription[guildID?]",
        "parameters": [
            {
                "field": "guildID",
                "type": "number",
                "description": "The ID of the guild.",
                "required": false
            }
        ],
        "example": "This will return the description of a specific guild:\n\n```javascript\nclient.command({\n    name: \"guildDescription\",\n    code: `\n  $guildDescription[$guildID]\n  `\n});\n```",
        "tip": null,
        "documentation": "https://aoi.js.org/functions/guilddescription",
        "source": "https://github.com/aoijs/aoi.js/tree/v6/src/functions/guild/guildDescription.js",
        "type": "Aoi.Js"
    },
    {
        "function": "$guildEditPost",
        "description": "$guildEditPost will edit a post within a guild forum.",
        "usage": "$guildEditPost[forumId;userID?;...threadTags(?)]",
        "parameters": [
            {
                "field": "forumId",
                "type": "number",
                "description": "The ID of the forum channel.",
                "required": true
            },
            {
                "field": "reason",
                "type": "string",
                "description": "The reason displayed in the guild's audit logs.",
                "required": false
            },
            {
                "field": "returnTags",
                "type": "boolean",
                "description": "Return the thread tags?",
                "required": false
            },
            {
                "field": "...threadTags(?)",
                "type": "string",
                "description": "The applied post tags. Optional when forum channel does not require tags.",
                "required": false
            }
        ],
        "example": "This will create a post in the given forum with the name \"this is a post\" with an embed and a button attached to the message:\n\n```javascript\nclient.command({\n    name: \"guildEditPost\",\n    code: `\n  $guildEditPost[forumId;This is a reason!;false;Tag 1;Tag 2;Tag 3]\n  `\n});\n```",
        "tip": null,
        "documentation": "https://aoi.js.org/functions/guildeditpost",
        "source": "https://github.com/aoijs/aoi.js/tree/v6/src/functions/guild/guildEditPost.js",
        "type": "Aoi.Js"
    },
    {
        "function": "$guildEmojiExists",
        "description": "$guildEmojiExists will check if the given emoji exists in the given guild.",
        "usage": "$guildEmojiExists[emojiResolver;guildId?]",
        "parameters": [
            {
                "field": "emojiResolver",
                "type": "string",
                "description": "Emoji you want to check if it exists.",
                "required": true
            },
            {
                "field": "guildID",
                "type": "number",
                "description": "ID of the guild where the emoji exists.",
                "required": false
            }
        ],
        "example": "This will return `true` as the emoji exists:\n\n```javascript\nclient.command({\n    name: \"guildEmojiExists\",\n    code: `\n  $guildEmojiExists[<:LerefMoney:1003365344724910191>;$guildID]\n  `\n});\n```",
        "tip": null,
        "documentation": "https://aoi.js.org/functions/guildemojiexists",
        "source": "https://github.com/aoijs/aoi.js/tree/v6/src/functions/guild/guildEmojiExists.js",
        "type": "Aoi.Js"
    },
    {
        "function": "$guildEmojis",
        "description": "$guildEmojis will return the emojis of a specific guild.",
        "usage": "$guildEmojis[sep?;guildID?]",
        "parameters": [
            {
                "field": "sep",
                "type": "string",
                "description": "The separator to separate the returned emojis.",
                "required": false
            },
            {
                "field": "guildID",
                "type": "number",
                "description": "The ID of the guild.",
                "required": false
            }
        ],
        "example": "This will return the emojis of your guild:\n\n```javascript\nclient.command({\n    name: \"guildEmojis\",\n    code: `\n  $guildEmojis[, ;$guildID]\n  `\n});\n```",
        "tip": null,
        "documentation": "https://aoi.js.org/functions/guildemojis",
        "source": "https://github.com/aoijs/aoi.js/tree/v6/src/functions/guild/guildEmojis.js",
        "type": "Aoi.Js"
    },
    {
        "function": "$guildExists",
        "description": "$guildExists will check if the given guild exists.",
        "usage": "$guildExists[guildId]",
        "parameters": [
            {
                "field": "guildId",
                "type": "number",
                "description": "Guild ID.",
                "required": true
            }
        ],
        "example": "This will return `true` your guild exists:\n\n```javascript\nclient.command({\n    name: \"guildExists\",\n    code: `\n  $guildExists[$guildID]\n  `\n});\n```",
        "tip": null,
        "documentation": "https://aoi.js.org/functions/guildexists",
        "source": "https://github.com/aoijs/aoi.js/tree/v6/src/functions/guild/guildExists.js",
        "type": "Aoi.Js"
    },
    {
        "function": "$guildFeatures",
        "description": "$guildFeatures will return unlocked guild features.",
        "usage": "$guildFeatures[guildID?]",
        "parameters": [
            {
                "field": "guildID",
                "type": "number",
                "description": "The ID of the guild.",
                "required": false
            }
        ],
        "example": "This will return the unlocked guild features of a guild:\n\n```javascript\nclient.command({\n    name: \"guildFeatures\",\n    code: `\n  $guildFeatures[$guildID;true]\n  `\n});\n```",
        "tip": null,
        "documentation": "https://aoi.js.org/functions/guildfeatures",
        "source": "https://github.com/aoijs/aoi.js/tree/v6/src/functions/guild/guildFeatures.js",
        "type": "Aoi.Js"
    },
    {
        "function": "$guildID",
        "description": "$guildID will return the guild ID of a given guild.",
        "usage": "$guildID[name?]",
        "parameters": [
            {
                "field": "name",
                "type": "string",
                "description": "The guild name you want the ID to be returned of.",
                "required": false
            }
        ],
        "example": "This will return your guild ID:\n\n```javascript\nclient.command({\n    name: \"guildID\",\n    code: `\n  $guildID\n  `\n});\n```",
        "tip": null,
        "documentation": "https://aoi.js.org/functions/guildid",
        "source": "https://github.com/aoijs/aoi.js/tree/v6/src/functions/guild/guildID.js",
        "type": "Aoi.Js"
    },
    {
        "function": "$guildIDS",
        "description": "$guildIDS will return the ID of every guild your bot is in.",
        "usage": "$guildIDS[sep?]",
        "parameters": [
            {
                "field": "sep",
                "type": "string",
                "description": "The separator to separate multiple returned values.",
                "required": false
            }
        ],
        "example": "This will return all guild IDs your bot is in:\n\n```javascript\nclient.command({\n    name: \"guildIDS\",\n    code: `\n  $guildIDS[, ]\n  `\n});\n```",
        "tip": null,
        "documentation": "https://aoi.js.org/functions/guildids",
        "source": "https://github.com/aoijs/aoi.js/tree/v6/src/functions/guild/guildIDS.js",
        "type": "Aoi.Js"
    },
    {
        "function": "$guildIcon",
        "description": "$guildIcon will return the guild's icon.",
        "usage": "$guildIcon[guildID?;size?;dynamic?;extension?]",
        "parameters": [
            {
                "field": "guildID",
                "type": "number",
                "description": "The ID of the guild.",
                "required": false
            },
            {
                "field": "size",
                "type": "number",
                "description": "The size of the image.",
                "required": false
            },
            {
                "field": "dynamic",
                "type": "boolean",
                "description": "1. **true** (default) \n2. **false**",
                "required": false
            },
            {
                "field": "extension",
                "type": "string",
                "description": "Image format.",
                "required": false
            }
        ],
        "example": "This will return the icon of the guild:\n\n```javascript\nclient.command({\n    name: \"guildIcon\",\n    code: `\n  $guildIcon[$guildID;4096;true;webp]\n  `\n});\n```",
        "tip": null,
        "documentation": "https://aoi.js.org/functions/guildicon",
        "source": "https://github.com/aoijs/aoi.js/tree/v6/src/functions/guild/guildIcon.js",
        "type": "Aoi.Js"
    },
    {
        "function": "$guildLeaderboard",
        "description": "$guildLeaderboard will return a leaderboard of a guild variable.",
        "usage": "$guildLeaderboard[variable;type?;custom?;list?;page?;table?]",
        "parameters": [
            {
                "field": "variable",
                "type": "string",
                "description": "Variable name.",
                "required": true
            },
            {
                "field": "type",
                "type": "string",
                "description": "In which order it will be returned \n1. **asc** (ascending / default) \n2. **dsc** (descending)",
                "required": false
            },
            {
                "field": "custom",
                "type": "string",
                "description": "Formatting.",
                "required": false
            },
            {
                "field": "list",
                "type": "number",
                "description": "How many to list.",
                "required": false
            },
            {
                "field": "page",
                "type": "number",
                "description": "Which page to list.",
                "required": false
            },
            {
                "field": "table",
                "type": "string",
                "description": "Variable table.",
                "required": false
            }
        ],
        "example": "This will returns a leaderboard of the \"Example\" variable:\n\n```javascript\nclient.command({\n    name: \"guildLeaderboard\",\n    code: `\n    $guildLeaderboard[Example;asc;{top} - {name} - {value};10;1;main]\n    `\n});\n```",
        "tip": null,
        "documentation": "https://aoi.js.org/functions/guildleaderboard",
        "source": "https://github.com/aoijs/aoi.js/tree/v6/src/functions/guild/guildLeaderboard.js",
        "type": "Aoi.Js"
    },
    {
        "function": "$guildLowestRole",
        "description": "$guildLowestRole will return the lowest role of a specific guild.",
        "usage": "$guildLowestRole[guildID?]",
        "parameters": [
            {
                "field": "guildID",
                "type": "number",
                "description": "The ID of the guild.",
                "required": false
            }
        ],
        "example": "This will return the ID of the lowest guild role:\n\n```javascript\nclient.command({\n    name: \"guildLowestRole\",\n    code: `\n  $guildLowestRole[$guildID]\n  `\n});\n```",
        "tip": null,
        "documentation": "https://aoi.js.org/functions/guildlowestrole",
        "source": "https://github.com/aoijs/aoi.js/tree/v6/src/functions/guild/guildLowestRole.js",
        "type": "Aoi.Js"
    },
    {
        "function": "$guildMFALevel",
        "description": "$guildMFALevel will return the guild's MFA Level.",
        "usage": "$guildMFALevel[guildID?]",
        "parameters": [
            {
                "field": "guildID",
                "type": "number",
                "description": "The ID of the guild.",
                "required": false
            }
        ],
        "example": "This will return the guild's MFA Level:\n\n```javascript\nclient.command({\n    name: \"guildMFALevel\",\n    code: `\n  $guildMFALevel[$guildID]\n  `\n});\n```",
        "tip": null,
        "documentation": "https://aoi.js.org/functions/guildmfalevel",
        "source": "https://github.com/aoijs/aoi.js/tree/v6/src/functions/guild/guildMFALevel.js",
        "type": "Aoi.Js"
    },
    {
        "function": "$guildMaxStageVideoChannelUsers",
        "description": "$guildMaxStageVideoChannelUsers will return the guild's max video channel users.",
        "usage": "$guildMaxStageVideoChannelUsers[guildID?]",
        "parameters": [
            {
                "field": "guildID",
                "type": "number",
                "description": "The ID of the guild.",
                "required": false
            }
        ],
        "example": "This will return the max amount of stage video channel users of the current guild (if any):\n\n```javascript\nclient.command({\n    name: \"guildMaxStageVideoChannelUsers\",\n    code: `\n  $guildMaxStageVideoChannelUsers[$guildID]\n  `\n});\n```",
        "tip": null,
        "documentation": "https://aoi.js.org/functions/guildmaxstagevideochannelusers",
        "source": "https://github.com/aoijs/aoi.js/tree/v6/src/functions/guild/guildMaxStageVideoChannelUsers.js",
        "type": "Aoi.Js"
    },
    {
        "function": "$guildMaxVideoChannelUsers",
        "description": "$guildMaxVideoChannelUsers will return the guild's max video channel users.",
        "usage": "$guildMaxVideoChannelUsers[guildID?]",
        "parameters": [
            {
                "field": "guildID",
                "type": "number",
                "description": "The ID of the guild.",
                "required": false
            }
        ],
        "example": "This will return the max amount of video channel users of the current guild (if any):\n\n```javascript\nclient.command({\n    name: \"guildMaxVideoChannelUsers\",\n    code: `\n  $guildMaxVideoChannelUsers[$guildID]\n  `\n});\n```",
        "tip": null,
        "documentation": "https://aoi.js.org/functions/guildmaxvideochannelusers",
        "source": "https://github.com/aoijs/aoi.js/tree/v6/src/functions/guild/guildMaxVideoChannelUsers.js",
        "type": "Aoi.Js"
    },
    {
        "function": "$guildMaximumMembers",
        "description": "$guildMaximumMembers will return the maximal amount of members a guild can have.",
        "usage": "$guildMaximumMembers[guildID?]",
        "parameters": [
            {
                "field": "guildID",
                "type": "number",
                "description": "The ID of the guild.",
                "required": false
            }
        ],
        "example": "This will return the maximum of members you can have in your guild:\n\n```javascript\nclient.command({\n    name: \"guildMaximumMembers\",\n    code: `\n  You can have: $guildMaximumMembers[$guildID] Members in this guild!\n  `\n});\n```",
        "tip": null,
        "documentation": "https://aoi.js.org/functions/guildmaximummembers",
        "source": "https://github.com/aoijs/aoi.js/tree/v6/src/functions/guild/guildMaximumMembers.js",
        "type": "Aoi.Js"
    },
    {
        "function": "$guildNSFWLevel",
        "description": "$guildNSFWLevel will return the guild's NSFW level.",
        "usage": "$guildNSFWLevel[guildID?]",
        "parameters": [
            {
                "field": "guildID",
                "type": "number",
                "description": "The ID of the guild.",
                "required": true
            }
        ],
        "example": "This will return the guild's NSFW level:\n\n```javascript\nclient.command({\n    name: \"guildNSFWLevel\",\n    code: `\n  $guildNSFWLevel[$guildID]\n  `\n});\n```",
        "tip": null,
        "documentation": "https://aoi.js.org/functions/guildnsfwlevel",
        "source": "https://github.com/aoijs/aoi.js/tree/v6/src/functions/guild/guildNSFWLevel.js",
        "type": "Aoi.Js"
    },
    {
        "function": "$guildName",
        "description": "$guildName will return a guild's name.",
        "usage": "$guildName[guildID?]",
        "parameters": [
            {
                "field": "guildID",
                "type": "number",
                "description": "The ID of the guild.",
                "required": false
            }
        ],
        "example": "This will return the name of your guild:\n\n```javascript\nclient.command({\n    name: \"guildName\",\n    code: `\n  $guildName[$guildID]\n  `\n});\n```",
        "tip": null,
        "documentation": "https://aoi.js.org/functions/guildname",
        "source": "https://github.com/aoijs/aoi.js/tree/v6/src/functions/guild/guildName.js",
        "type": "Aoi.Js"
    },
    {
        "function": "$guildNames",
        "description": "$guildNames will return the name of the guilds your bot is in.",
        "usage": "$guildNames[sep?]",
        "parameters": [
            {
                "field": "sep",
                "type": "string",
                "description": "Separator to separate multiple returned values.",
                "required": false
            }
        ],
        "example": "This will return the names of the guilds your bot is in and separate it by a comma:\n\n```javascript\nclient.command({\n    name: \"guildNames\",\n    code: `\n  $guildNames[, ]\n  `\n});\n```",
        "tip": null,
        "documentation": "https://aoi.js.org/functions/guildnames",
        "source": "https://github.com/aoijs/aoi.js/tree/v6/src/functions/guild/guildNames.js",
        "type": "Aoi.Js"
    },
    {
        "function": "$guildOwnerID",
        "description": "$guildOwnerID will return the ID of the server owner, depending on the given argument.",
        "usage": "$guildOwnerID[guildID?]",
        "parameters": [
            {
                "field": "guildID",
                "type": "number",
                "description": "The guild ID.",
                "required": false
            }
        ],
        "example": "This will return the ID of the server owner where you execute the command in:\n\n```javascript\nclient.command({\n    name: \"guildOwnerID\",\n    code: `\n  $guildOwnerID[$guildID]\n  `\n});\n```",
        "tip": null,
        "documentation": "https://aoi.js.org/functions/guildownerid",
        "source": "https://github.com/aoijs/aoi.js/tree/v6/src/functions/guild/guildOwnerID.js",
        "type": "Aoi.Js"
    },
    {
        "function": "$guildPreferredLocale",
        "description": "$guildPreferredLocale will return a guild's set locale.",
        "usage": "$guildPreferredLocale[guildID?]",
        "parameters": [
            {
                "field": "guildID",
                "type": "number",
                "description": "The ID of the guild.",
                "required": false
            }
        ],
        "example": "This will return the guild's preferred locale:\n\n```javascript\nclient.command({\n    name: \"guildPreferredLocale\",\n    code: `\n  $guildPreferredLocale[$guildID]\n  `\n});\n```",
        "tip": null,
        "documentation": "https://aoi.js.org/functions/guildpreferredlocale",
        "source": "https://github.com/aoijs/aoi.js/tree/v6/src/functions/guild/guildPreferredLocale.js",
        "type": "Aoi.Js"
    },
    {
        "function": "$guildRandomID",
        "description": "$guildRandomID will return a random guild ID.",
        "usage": "$guildRandomID",
        "parameters": [],
        "example": "This will return a random guild ID of the guilds your bot is in:\n\n```javascript\nclient.command({\n    name: \"guildRandomID\",\n    code: `\n  $guildRandomID\n  `\n});\n```",
        "tip": null,
        "documentation": "https://aoi.js.org/functions/guildrandomid",
        "source": "https://github.com/aoijs/aoi.js/tree/v6/src/functions/guild/guildRandomID.js",
        "type": "Aoi.Js"
    },
    {
        "function": "$guildRoleIconURL",
        "description": "$guildRoleIconURL will retrieve the image URL of the role icon.",
        "usage": "$guildRoleIconURL[guildId?;roleId]",
        "parameters": [
            {
                "field": "guildId",
                "type": "number",
                "description": "ID of the guild where the role exists.",
                "required": false
            },
            {
                "field": "roleId",
                "type": "number",
                "description": "ID of the role you want to check if it exists.",
                "required": true
            }
        ],
        "example": "This will return the image URL of the role icon:\n\n```javascript\nclient.command({\n    name: \"guildRoleIconURL\",\n    code: `\n  $guildRoleIconURL[$guildID;900004369355931729]\n  `\n});\n```",
        "tip": null,
        "documentation": "https://aoi.js.org/functions/guildroleiconurl",
        "source": "https://github.com/aoijs/aoi.js/tree/v6/src/functions/guild/guildRoleIconURL.js",
        "type": "Aoi.Js"
    },
    {
        "function": "$guildRoles",
        "description": "$guildRoles will return all roles of a specific guild.",
        "usage": "$guildRoles[guildID?;type?;sep?;removeManagedRoles?;removeBotRoles?;fetch?]",
        "parameters": [
            {
                "field": "guildID",
                "type": "number",
                "description": "The ID of the guild.",
                "required": false
            },
            {
                "field": "type",
                "type": "string",
                "description": "The option on how to return the roles \n1. **name** (default) \n2. **id** \n3. **mention**",
                "required": false
            },
            {
                "field": "sep",
                "type": "string",
                "description": "Separator to separate multiple returned values.",
                "required": false
            },
            {
                "field": "removeManagedRoles",
                "type": "boolean",
                "description": "Remove Managed Roles from the result.",
                "required": false
            },
            {
                "field": "removeBotRoles",
                "type": "boolean",
                "description": "Remove roles associated with bots from the result.",
                "required": false
            },
            {
                "field": "fetch",
                "type": "boolean",
                "description": "Fetch all roles of the guild.",
                "required": false
            }
        ],
        "example": "This will return all roles of your guild by name, separated by commas, excluding managed and bot roles:\n\n```javascript\nclient.command({\n    name: \"guildRoles\",\n    code: `\n   $guildRoles[$guildID;name;, ;true;true]\n  `\n});\n```",
        "tip": null,
        "documentation": "https://aoi.js.org/functions/guildroles",
        "source": "https://github.com/aoijs/aoi.js/tree/v6/src/functions/guild/guildRoles.js",
        "type": "Aoi.Js"
    },
    {
        "function": "$guildRulesChannelID",
        "description": "$guildRulesChannelID will return a guild's set rules channel ID.",
        "usage": "$guildRulesChannelID[guildID?]",
        "parameters": [
            {
                "field": "guildID",
                "type": "number",
                "description": "The ID of the guild.",
                "required": false
            }
        ],
        "example": "This will return the ID of the guild's rules channel (community guilds only):\n\n```javascript\nclient.command({\n    name: \"guildRulesChannelID\",\n    code: `\n  $guildRulesChannelID[$guildID]\n  `\n});\n```",
        "tip": null,
        "documentation": "https://aoi.js.org/functions/guildruleschannelid",
        "source": "https://github.com/aoijs/aoi.js/tree/v6/src/functions/guild/guildRulesChannelID.js",
        "type": "Aoi.Js"
    },
    {
        "function": "$guildSafetyChannelID",
        "description": "$guildSafetyChannelID will return the guild's safety channel.",
        "usage": "$guildSafetyChannelID[guildID?]",
        "parameters": [
            {
                "field": "guildID",
                "type": "number",
                "description": "The ID of the guild.",
                "required": false
            }
        ],
        "example": "This will return the safety channel ID of the current guild (if any):\n\n```javascript\nclient.command({\n    name: \"guildSafetyChannelID\",\n    code: `\n  $guildSafetyChannelID[$guildID]\n  `\n});\n```",
        "tip": null,
        "documentation": "https://aoi.js.org/functions/guildsafetychannelid",
        "source": "https://github.com/aoijs/aoi.js/tree/v6/src/functions/guild/guildSafetyChannelID.js",
        "type": "Aoi.Js"
    },
    {
        "function": "$guildShard",
        "description": "$guildShard will return the guilds of a specific shard.",
        "usage": "$guildShard[option?;sep?;shardId]",
        "parameters": [
            {
                "field": "option",
                "type": "number",
                "description": "Option to return the guilds in \n1. **id** (default) \n2. **name**",
                "required": false
            },
            {
                "field": "sep",
                "type": "string",
                "description": "Separator to separate multiple returned values.",
                "required": false
            },
            {
                "field": "shardId",
                "type": "number",
                "description": "The shard ID.",
                "required": true
            }
        ],
        "example": "This will return the amount guilds of a shard:\n\n```javascript\nclient.command({\n    name: \"guildShard\",\n    code: `\n  $guildShard[name;, ;$shardID]\n  `\n});\n```",
        "tip": null,
        "documentation": "https://aoi.js.org/functions/guildshard",
        "source": "https://github.com/aoijs/aoi.js/tree/v6/src/functions/client/guildShard.js",
        "type": "Aoi.Js"
    },
    {
        "function": "$guildShardID",
        "description": "$guildShardID will return the current shard ID.",
        "usage": "$guildShardID",
        "parameters": [],
        "example": "This will return the current shard ID:\n\n```javascript\nclient.command({\n    name: \"guildShardID\",\n    code: `\n  I'm currently on shard $guildShardID!\n  `\n});\n```",
        "tip": null,
        "documentation": "https://aoi.js.org/functions/guildshardid",
        "source": "https://github.com/aoijs/aoi.js/tree/v6/src/functions/client/guildShardID.js",
        "type": "Aoi.Js"
    },
    {
        "function": "$guildShardPing",
        "description": "$guildShardPing will return the latency of a specific shard.",
        "usage": "$guildShardPing[shardId?]",
        "parameters": [
            {
                "field": "shardId",
                "type": "number",
                "description": "The shard ID.",
                "required": false
            }
        ],
        "example": "This will return the shard latency of the current shard:\n\n```javascript\nclient.command({\n    name: \"guildShardPing\",\n    code: `\n  $guildShardPing[$shardId]MS\n  `\n});\n```",
        "tip": null,
        "documentation": "https://aoi.js.org/functions/guildshardping",
        "source": "https://github.com/aoijs/aoi.js/tree/v6/src/functions/client/guildShardPing.js",
        "type": "Aoi.Js"
    },
    {
        "function": "$guildSplash",
        "description": "$guildSplash will return a guild's invite background (if unlocked).",
        "usage": "$guildSplash[guildID?;size?;dynamic?;extension?]",
        "parameters": [
            {
                "field": "guildID",
                "type": "number",
                "description": "The ID of the guild.",
                "required": false
            },
            {
                "field": "size",
                "type": "number",
                "description": "The size of the image.",
                "required": false
            },
            {
                "field": "dynamic",
                "type": "boolean",
                "description": "1. **true** (default) \n2. **false**",
                "required": false
            },
            {
                "field": "extension",
                "type": "string",
                "description": "Image format.",
                "required": false
            }
        ],
        "example": "This will return the guild's invite background (if unlocked):\n\n```javascript\nclient.command({\n    name: \"guildSplash\",\n    code: `\n  $guildSplash[$guildID]\n  `\n});\n```",
        "tip": null,
        "documentation": "https://aoi.js.org/functions/guildsplash",
        "source": "https://github.com/aoijs/aoi.js/tree/v6/src/functions/guild/guildSplash.js",
        "type": "Aoi.Js"
    },
    {
        "function": "$guildSystemChannelID",
        "description": "$guildSystemChannelID will return the ID of the guild's system channel.",
        "usage": "$guildSystemChannelID[guildID?]",
        "parameters": [
            {
                "field": "guildID",
                "type": "number",
                "description": "The guild ID.",
                "required": false
            }
        ],
        "example": "This will return the guild's system channel ID:\n\n```javascript\nclient.command({\n    name: \"guildSystemChannelID\",\n    code: `\n  $guildSystemChannelID[$guildID]\n  `\n});\n```",
        "tip": null,
        "documentation": "https://aoi.js.org/functions/guildsystemchannelid",
        "source": "https://github.com/aoijs/aoi.js/tree/v6/src/functions/guild/guildSystemChannelID.js",
        "type": "Aoi.Js"
    },
    {
        "function": "$guildVanityURL",
        "description": "$guildVanityURL will return a guild's vanity URL.",
        "usage": "$guildVanityURL[guildID?;fetchFirst?]",
        "parameters": [
            {
                "field": "guildID",
                "type": "number",
                "description": "The guild ID.",
                "required": false
            },
            {
                "field": "fetchFirst",
                "type": "boolean",
                "description": "Whether to fetch fresh vanity URL data from API.",
                "required": false
            }
        ],
        "example": "This will return the vanity URL of your guild, fetching fresh data:\n\n```javascript\nclient.command({\n    name: \"guildVanityURL\",\n    code: `\n  $guildVanityURL[$guildID;true]\n  `\n});\n```",
        "tip": null,
        "documentation": "https://aoi.js.org/functions/guildvanityurl",
        "source": "https://github.com/aoijs/aoi.js/tree/v6/src/functions/guild/guildVanityURL.js",
        "type": "Aoi.Js"
    },
    {
        "function": "$guildVanityUses",
        "description": "$guildVanityUses will return the uses of a vanity URL.",
        "usage": "$guildVanityUses[guildID?;fetchFirst?]",
        "parameters": [
            {
                "field": "guildID",
                "type": "number",
                "description": "The guild ID.",
                "required": false
            },
            {
                "field": "fetchFirst",
                "type": "boolean",
                "description": "Whether to fetch fresh vanity URL data from API.",
                "required": false
            }
        ],
        "example": "This will return the uses of your guild's vanity URL, fetching fresh data:\n\n```javascript\nclient.command({\n    name: \"guildVanityUses\",\n    code: `\n  $guildVanityUses[$guildID;true]\n  `\n});\n```",
        "tip": null,
        "documentation": "https://aoi.js.org/functions/guildvanityuses",
        "source": "https://github.com/aoijs/aoi.js/tree/v6/src/functions/guild/guildVanityUses.js",
        "type": "Aoi.Js"
    },
    {
        "function": "$guildVerificationLevel",
        "description": "$guildVerificationLevel will return the guild's verification level.",
        "usage": "$guildVerificationLevel[guildID?]",
        "parameters": [
            {
                "field": "guildID",
                "type": "number",
                "description": "The ID of the guild.",
                "required": false
            }
        ],
        "example": "This will return the guild's verification Level:\n\n```javascript\nclient.command({\n    name: \"guildVerificationLevel\",\n    code: `\n  $guildVerificationLevel[$guildID]\n  `\n});\n```",
        "tip": null,
        "documentation": "https://aoi.js.org/functions/guildverificationlevel",
        "source": "https://github.com/aoijs/aoi.js/tree/v6/src/functions/guild/guildVerificationLevel.js",
        "type": "Aoi.Js"
    },
    {
        "function": "$guildWidgetChannelID",
        "description": "$guildWidgetChannelID will return the guild's widget channel ID.",
        "usage": "$guildWidgetChannelID[guildID?]",
        "parameters": [
            {
                "field": "guildID",
                "type": "number",
                "description": "The ID of the guild.",
                "required": false
            }
        ],
        "example": "This will return the widget channel ID of the current guild (if any):\n\n```javascript\nclient.command({\n    name: \"guildWidgetChannelID\",\n    code: `\n  $guildWidgetChannelID[$guildID]\n  `\n});\n```",
        "tip": null,
        "documentation": "https://aoi.js.org/functions/guildwidgetchannelid",
        "source": "https://github.com/aoijs/aoi.js/tree/v6/src/functions/guild/guildWidgetChannelID.js",
        "type": "Aoi.Js"
    },
    {
        "function": "$handleError",
        "description": "$handleError will return information about an occurred error.",
        "usage": "$handleError[option]",
        "parameters": [
            {
                "field": "option",
                "type": "string",
                "description": "What to return the data of. \n1. **function** - function name \n2. **command** - command name \n3. **error** - error that occurred",
                "required": true
            }
        ],
        "example": "**You require `events: [\"onFunctionError\"]` in your main file in order to use this function!**\n\n```javascript\nclient.functionErrorCommand({\n    channel: \"channelID (optional)\",\n    code: `Something went wrong in your \"$handleError[command]\" command! The function \"$handleError[function]\" returned the error \"$handleError[error]\"!`\n});\n```",
        "tip": null,
        "documentation": "https://aoi.js.org/functions/handleerror",
        "source": "https://github.com/aoijs/aoi.js/tree/v6/src/functions/misc/handleError.js",
        "type": "Aoi.Js"
    },
    {
        "function": "$hasAnyPerm",
        "description": "$hasAnyPerm will check if the user has one of the required permissions.",
        "usage": "$hasAnyPerm[guildID;userID;...perms]",
        "parameters": [
            {
                "field": "guildID",
                "type": "number",
                "description": "ID of the guild where the client checks the permissions.",
                "required": true
            },
            {
                "field": "userID",
                "type": "number",
                "description": "ID of the user.",
                "required": false
            },
            {
                "field": "...perms",
                "type": "string",
                "description": "Permissions.",
                "required": true
            }
        ],
        "example": "This will return `true` when the author has `manage messages` or `kick` permissions and return `false` when they don't\nhave any of those:\n\n```javascript\nclient.command({\n    name: \"hasAnyPerm\",\n    code: `\n  $hasAnyPerm[$guildID;$authorID;kick;managemessages]\n  `\n});\n```",
        "tip": null,
        "documentation": "https://aoi.js.org/functions/hasanyperm",
        "source": "https://github.com/aoijs/aoi.js/tree/v6/src/functions/guild/hasAnyPerm.js",
        "type": "Aoi.Js"
    },
    {
        "function": "$hasAnyRole",
        "description": "$hasAnyRole will check if the provided user has any of the roles listed in the roles argument.",
        "usage": "$hasAnyRole[guildID;userID;...roles]",
        "parameters": [
            {
                "field": "guildID",
                "type": "number",
                "description": "ID of the guild where the roles are present in.",
                "required": true
            },
            {
                "field": "userID",
                "type": "number",
                "description": "ID of the user.",
                "required": true
            },
            {
                "field": "...roles",
                "type": "number",
                "description": "The roles that will be checked for.",
                "required": true
            }
        ],
        "example": "This will return `true` when the user has any of the listed roles:\n\n```javascript\nclient.command({\n    name: \"hasAnyRole\",\n    code: `\n  $hasAnyRole[$guildID;$authorID;$findRole[Owner];$findRole[Admin]]\n  `\n});\n```",
        "tip": null,
        "documentation": "https://aoi.js.org/functions/hasanyrole",
        "source": "https://github.com/aoijs/aoi.js/tree/v6/src/functions/guild/hasAnyRole.js",
        "type": "Aoi.Js"
    },
    {
        "function": "$hasAttachment",
        "description": "$hasAttachment will return either true or false depending on if the message has an attachment.",
        "usage": "$hasAttachment[messageId?;channelId?]",
        "parameters": [
            {
                "field": "messageId",
                "type": "number",
                "description": "Which hasAttachment argument will be returned, leave it empty to return the whole hasAttachment.",
                "required": false
            },
            {
                "field": "channelId",
                "type": "number",
                "description": "Which hasAttachment argument will be returned, leave it empty to return the whole hasAttachment.",
                "required": false
            }
        ],
        "example": "This will check if your message has an attachment attached:\n\n```javascript\nclient.command({\n    name: \"hasAttachment\",\n    code: `\n  Your message has an attachment? \n  --> $hasAttachment[$messageId;$channelId]\n  `\n});\n```",
        "tip": null,
        "documentation": "https://aoi.js.org/functions/hasattachment",
        "source": "https://github.com/aoijs/aoi.js/tree/v6/src/functions/misc/hasAttachment.js",
        "type": "Aoi.Js"
    },
    {
        "function": "$hasComponents",
        "description": "$hasComponents checks if a message has components, returns boolean.",
        "usage": "$hasComponents[channelID?;messageID?;type?]",
        "parameters": [
            {
                "field": "channelID",
                "type": "number",
                "description": "The channel ID of where the message is.",
                "required": false
            },
            {
                "field": "messageID",
                "type": "number",
                "description": "The ID of the message.",
                "required": false
            },
            {
                "field": "type",
                "type": "string",
                "description": "[Component Types.](https://discord-api-types.dev/api/discord-api-types-v10/enum/ComponentType)",
                "required": false
            }
        ],
        "example": "This will return `false` since the message does not have a button:\n\n```js\nclient.command({\n    name: \"hasComponents\",\n    code: `$hasComponents[$channelID;$messageID;Button]`\n});\n```",
        "tip": null,
        "documentation": "https://aoi.js.org/functions/hascomponents",
        "source": "https://github.com/aoijs/aoi.js/tree/v6/src/functions/components/hasComponents.js",
        "type": "Aoi.Js"
    },
    {
        "function": "$hasEmbeds",
        "description": "$hasEmbeds will check if there are embeds attached to the message.",
        "usage": "$hasEmbeds[messageID;channelID]",
        "parameters": [
            {
                "field": "messageID",
                "type": "number",
                "description": "ID of the message to check if it contains an embed.",
                "required": true
            },
            {
                "field": "channelID",
                "type": "number",
                "description": "ID of the channel where the message is located in.",
                "required": true
            }
        ],
        "example": "This will return `false` as there are no embeds attached to your message:\n\n```javascript\nclient.command({\n    name: \"hasEmbeds\",\n    code: `\n  $hasEmbeds[$messageID;$channelID]\n  `\n});\n```",
        "tip": null,
        "documentation": "https://aoi.js.org/functions/hasembeds",
        "source": "https://github.com/aoijs/aoi.js/tree/v6/src/functions/embeds/hasEmbeds.js",
        "type": "Aoi.Js"
    },
    {
        "function": "$hasGuildTemplate",
        "description": "$hasGuildTemplate will check if the given guild has a guild template created.",
        "usage": "$hasGuildTemplate[guildId?]",
        "parameters": [
            {
                "field": "guildId",
                "type": "number",
                "description": "The guild Id to check for.",
                "required": false
            }
        ],
        "example": "This will check if the given guild has a guild template created.\n\n```javascript\nclient.command({\n    name: \"hasGuildTemplate\",\n    code: `\n  $hasGuildTemplate[$guildId]\n  `\n});\n```",
        "tip": null,
        "documentation": "https://aoi.js.org/functions/hasguildtemplate",
        "source": "https://github.com/aoijs/aoi.js/tree/v6/src/functions/guild/hasGuildTemplate.js",
        "type": "Aoi.Js"
    },
    {
        "function": "$hasPerms",
        "description": "$hasPerms will check if the user has the required permission.",
        "usage": "$hasPerms[guildID;userID;...perms]",
        "parameters": [
            {
                "field": "guildID",
                "type": "number",
                "description": "ID of the guild where the client checks the permissions.",
                "required": true
            },
            {
                "field": "userID",
                "type": "number",
                "description": "ID of the user.",
                "required": false
            },
            {
                "field": "...perms",
                "type": "string",
                "description": "Permissions.",
                "required": true
            }
        ],
        "example": "This will return `true` when the author has `kick` permissions and return `false` when they don't have those:\n\n```javascript\nclient.command({\n    name: \"hasPerms\",\n    code: `\n  $hasPerms[$guildID;$authorID;kick]\n  `\n});\n```",
        "tip": null,
        "documentation": "https://aoi.js.org/functions/hasperms",
        "source": "https://github.com/aoijs/aoi.js/tree/v6/src/functions/misc/hasPerms.js",
        "type": "Aoi.Js"
    },
    {
        "function": "$hasPermsInChannel",
        "description": "$hasPermsInChannel will check if the user has one of the required permission in the given channel.",
        "usage": "$hasPermsInChannel[channelID;userOrRoleID;...perms]",
        "parameters": [
            {
                "field": "channelD",
                "type": "number",
                "description": "ID of the channel where the client checks the permissions.",
                "required": true
            },
            {
                "field": "userOrRoleID",
                "type": "number",
                "description": "ID of the user or role.",
                "required": true
            },
            {
                "field": "...perms",
                "type": "string",
                "description": "Permissions.",
                "required": true
            }
        ],
        "example": "This will return `true` when the author has `send messages` permissions and return `false` when they don't have those:\n\n```javascript\nclient.command({\n    name: \"hasPermsInChannel\",\n    code: `\n  $hasPermsInChannel[$channelID;$authorID;sendmessages]\n  `\n});\n```",
        "tip": null,
        "documentation": "https://aoi.js.org/functions/haspermsinchannel",
        "source": "https://github.com/aoijs/aoi.js/tree/v6/src/functions/guild/hasPermsInChannel.js",
        "type": "Aoi.Js"
    },
    {
        "function": "$hasPremium",
        "description": "$hasPremium will check if the provided user or guild is subscribed to premium",
        "usage": "$hasPremium[skuID;id?;type?]",
        "parameters": [
            {
                "field": "skuID",
                "type": "number",
                "description": "Your generated [SKU ID](https://discord.com/developers/docs/resources/sku).",
                "required": true
            },
            {
                "field": "id",
                "type": "number",
                "description": "User or guild ID.",
                "required": false
            },
            {
                "field": "type",
                "type": "string",
                "description": "Entitlement type. \n1. **user** (default) \n2. **guild**",
                "required": false
            }
        ],
        "example": "This will check if the provided user is subscribed to [premium](https://discord.com/developers/docs/monetization/overview).\n\n```javascript\nclient.command({\n    name: \"hasPremium\",\n    code: `\n   $hasPremium[123456789;$authorID;user] \n   $comment[Example value of SKU ID]\n  `\n});\n```",
        "tip": null,
        "documentation": "https://aoi.js.org/functions/haspremium",
        "source": "https://github.com/aoijs/aoi.js/tree/v6/src/functions/misc/hasPremium.js",
        "type": "Aoi.Js"
    },
    {
        "function": "$hasRoles",
        "description": "$hasRoles check if the provided user has the roles listed in the roles argument.",
        "usage": "$hasRoles[guildID;userID;...roles]",
        "parameters": [
            {
                "field": "guildID",
                "type": "number",
                "description": "ID of the guild where the roles are present in.",
                "required": true
            },
            {
                "field": "userID",
                "type": "number",
                "description": "ID of the user which has the roles.",
                "required": true
            },
            {
                "field": "...roles",
                "type": "number",
                "description": "The roles that will be checked for.",
                "required": true
            }
        ],
        "example": "This will return `true` when the user has the listed roles:\n\n```javascript\nclient.command({\n    name: \"hasRoles\",\n    code: `\n  $hasRoles[$guildID;$authorID;$findRole[Owner]]\n  `\n});\n```",
        "tip": null,
        "documentation": "https://aoi.js.org/functions/hasroles",
        "source": "https://github.com/aoijs/aoi.js/tree/v6/src/functions/guild/hasRoles.js",
        "type": "Aoi.Js"
    },
    {
        "function": "$guildHighestRole",
        "description": "$guildHighestRole will return the highest guild role of a specific guild.",
        "usage": "$guildHighestRole[guildID?;option?]",
        "parameters": [
            {
                "field": "guildID",
                "type": "number",
                "description": "The ID of the guild.",
                "required": false
            },
            {
                "field": "option",
                "type": "string",
                "description": "The option on how to return the role \n1. **name** (default) \n2. **id** \n3. **mention**",
                "required": false
            }
        ],
        "example": "This will return the name of the highest role of your guild:\n\n```javascript\nclient.command({\n    name: \"guildHighestRole\",\n    code: `\n  $guildHighestRole[$guildID;name]\n  `\n});\n```",
        "tip": null,
        "documentation": "https://aoi.js.org/functions/highestguildrole",
        "source": "https://github.com/aoijs/aoi.js/tree/v6/src/functions/guild/guildHighestRole.js",
        "type": "Aoi.Js"
    },
    {
        "function": "$hoistedRole",
        "description": "$hoistedRole will return the highest hoisted role of an user.",
        "usage": "$hoistedRole[userID?;guildID?;option?]",
        "parameters": [
            {
                "field": "userID",
                "type": "number",
                "description": "The ID of the user.",
                "required": false
            },
            {
                "field": "guildID",
                "type": "number",
                "description": "the ID of the guild.",
                "required": false
            },
            {
                "field": "option",
                "type": "string",
                "description": "The option how to return the role \n1. **name** \n2. **id** (default) \n3. **mention**",
                "required": false
            }
        ],
        "example": "This will return the name of your highest hoisted role:\n\n```javascript\nclient.command({\n    name: \"hoistedRole\",\n    code: `\n  $hoistedRole[$authorID;$guildID;name]\n  `\n});\n```",
        "tip": null,
        "documentation": "https://aoi.js.org/functions/hoistedrole",
        "source": "https://github.com/aoijs/aoi.js/tree/v6/src/functions/undefined/hoistedRole.js",
        "type": "Aoi.Js"
    },
    {
        "function": "$hour",
        "description": "$hour will return the current hour in UTC.",
        "usage": "$hour",
        "parameters": [],
        "example": "This will returns the current hour:\n\n```javascript\nclient.command({\n    name: \"hour\",\n    code: `\n    $hour\n    `\n});\n```\n\nYou can change the timezone using `$timezone`:\n\n```javascript\nclient.command({\n    name: \"hour\",\n    code: `\n    $hour \n    $timezone[America/New_York]\n    ` // returns current hour in New York\n});\n```",
        "tip": null,
        "documentation": "https://aoi.js.org/functions/hour",
        "source": "https://github.com/aoijs/aoi.js/tree/v6/src/functions/misc/hour.js",
        "type": "Aoi.Js"
    },
    {
        "function": "$httpRequest",
        "description": "$httpRequest either posts to or retrieves data from an API.",
        "usage": "$httpRequest[URL;method;body?;property?;error?;...header?]",
        "parameters": [
            {
                "field": "URL",
                "type": "string",
                "description": "URL you want to get/send data to/from.",
                "required": true
            },
            {
                "field": "method",
                "type": "string",
                "description": "Method \n1. **GET** (default) \n2. **POST** \n3. **PUT**",
                "required": true
            },
            {
                "field": "body",
                "type": "string",
                "description": "Content.",
                "required": false
            },
            {
                "field": "property",
                "type": "string",
                "description": "Property to return (get method).",
                "required": false
            },
            {
                "field": "error",
                "type": "string",
                "description": "Error to return when request fails.",
                "required": false
            },
            {
                "field": "...header",
                "type": "string",
                "description": "Header.",
                "required": false
            }
        ],
        "example": "This will return a random dog fact using the `GET` method:\n\n```javascript\nclient.command({\n    name: \"httpRequest\",\n    code: `\n    $httpRequest[https://some-random-api.ml/facts/dog;GET;;fact;Something went wrong.]\n    `\n});\n```",
        "tip": null,
        "documentation": "https://aoi.js.org/functions/httprequest",
        "source": "https://github.com/aoijs/aoi.js/tree/v6/src/functions/misc/httpRequest.js",
        "type": "Aoi.Js"
    },
    {
        "function": "$humanizeMs",
        "description": "$humanizeMs will convert MS to human-readable time.",
        "usage": "$humanizeMs[time]",
        "parameters": [
            {
                "field": "time",
                "type": "number",
                "description": "Time in MS.",
                "required": true
            }
        ],
        "example": "This will return `6mon 1w 4d 16h 34m` converted from `16782516189` MS:\n\n```javascript\nclient.command({\n    name: \"humanizeMs\",\n    code: `\n    $humanizeMs[16782516189]\n    `\n});\n```",
        "tip": null,
        "documentation": "https://aoi.js.org/functions/humanizems",
        "source": "https://github.com/aoijs/aoi.js/tree/v6/src/functions/misc/humanizeMs.js",
        "type": "Aoi.Js"
    },
    {
        "function": "$if",
        "description": "$if will check a condition and return either true or false depending on the condition being true or false.",
        "usage": "$if[condition;true;false?]",
        "parameters": [
            {
                "field": "condition",
                "type": "string",
                "description": "Condition to check.",
                "required": true
            },
            {
                "field": "true",
                "type": "string",
                "description": "What to return when the condition is true.",
                "required": true
            },
            {
                "field": "false",
                "type": "string",
                "description": "What to return when the condition is false.",
                "required": false
            }
        ],
        "example": "This will return `That's false!` as `1` doesn't equal `2`:\n\n```javascript\nclient.command({\n    name: \"if\",\n    code: `\n    $if[1==2;That's true!;That's false!]\n    `\n});\n```\n\nThis will do the exact same just different usage of `$if` by using `$if: \"old\"`:\n\n```javascript\nclient.command({\n    name: \"if\",\n    $if: \"old\",\n    code: `\n    $if[1==2]\n    That's true!\n    $else\n    That's false!\n    $endif\n    `\n});\n```",
        "tip": null,
        "documentation": "https://aoi.js.org/functions/if",
        "source": "https://github.com/aoijs/aoi.js/tree/v6/src/functions/condition/if.js",
        "type": "Aoi.Js"
    },
    {
        "function": "$ifAwaited",
        "description": "$ifAwaited will check a condition and executed an awaited command depending on the condition being true or false.",
        "usage": "$ifAwaited[condition;true;false?]",
        "parameters": [
            {
                "field": "condition",
                "type": "string",
                "description": "Condition to check",
                "required": true
            },
            {
                "field": "true",
                "type": "string",
                "description": "What to do when the condition is true.",
                "required": true
            },
            {
                "field": "false",
                "type": "string",
                "description": "What to do when the condition is false.",
                "required": false
            }
        ],
        "example": "This will execute the `awaitedCommand` awaited command as the statement is true:\n\n```javascript\nclient.command({\n    name: \"ifAwaited\",\n    code: `\n    $ifAwaited[1==1;{execute:awaitedCommand}]\n    `\n});\n\nclient.awaitedCommand({\n    name: \"awaitedCommand\",\n    code: `\n    $sendMessage[That's true!;false]\n    `\n});\n```",
        "tip": null,
        "documentation": "https://aoi.js.org/functions/ifawaited",
        "source": "https://github.com/aoijs/aoi.js/tree/v6/src/functions/condition/ifAwaited.js",
        "type": "Aoi.Js"
    },
    {
        "function": "$image",
        "description": "$image will add an image to an embed.",
        "usage": "$image[index?;URL]",
        "parameters": [
            {
                "field": "index",
                "type": "number",
                "description": "Embed index",
                "required": false
            },
            {
                "field": "URL",
                "type": "string",
                "description": "Embed Image URL. (bottom image)",
                "required": true
            }
        ],
        "example": "This will create an embed with an image, title and footer:\n\n```javascript\nclient.command({\n    name: \"embed\",\n    code: `\n  $title[Hello!]\n  $image[$userAvatar]\n  $footer[Hello again!;$userAvatar]\n  `\n});\n```",
        "tip": null,
        "documentation": "https://aoi.js.org/functions/image",
        "source": "https://github.com/aoijs/aoi.js/tree/v6/src/functions/misc/image.js",
        "type": "Aoi.Js"
    },
    {
        "function": "$index",
        "description": "$index will return the current index of a loop.",
        "usage": "$index",
        "parameters": [],
        "example": "This will create a loop and return the index, starting with `0` instead of `1`:\n\n```js\nclient.command({\n    name: \"loop\",\n    code: `\n    $loop[5;{ \"channel\": \"$channelID\" };index]\n    `\n});\n```\n\nWe use `$index` to retrieve the current index:\n\n```js\nclient.awaitedCommand({\n    name: \"index\",\n    code: `\n    $channelSendMessage[$awaitData[channel];The current loop index is: $index]\n    ` // returns 5 messages counting from 0 to 4\n});\n```",
        "tip": null,
        "documentation": "https://aoi.js.org/functions/index",
        "source": "https://github.com/aoijs/aoi.js/tree/v6/src/functions/misc/index.js",
        "type": "Aoi.Js"
    },
    {
        "function": "$indexOf",
        "description": "$indexOf will return the index of the given character.",
        "usage": "$indexOf[string;char]",
        "parameters": [
            {
                "field": "[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String)",
                "type": "string",
                "description": "The text the bot will be checking the index of.",
                "required": true
            },
            {
                "field": "char",
                "type": "string",
                "description": "The characters the bot will be checking for.",
                "required": true
            }
        ],
        "example": "This will return `8` as it's the first occurring position of the character `w`:\n\n```javascript\nclient.command({\n    name: \"indexOf\",\n    code: `\n  $indexOf[Hello, what is wrong with you?;w]\n  `\n});\n```",
        "tip": null,
        "documentation": "https://aoi.js.org/functions/indexof",
        "source": "https://github.com/aoijs/aoi.js/tree/v6/src/functions/misc/indexOf.js",
        "type": "Aoi.Js"
    },
    {
        "function": "$indexOfArg",
        "description": "$indexOfArg will return the index of the given query.",
        "usage": "$indexOfArg[string;query]",
        "parameters": [
            {
                "field": "[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String)",
                "type": "string",
                "description": "The text the bot will be checking the index of.",
                "required": true
            },
            {
                "field": "query",
                "type": "string",
                "description": "The query the bot will be checking for.",
                "required": true
            }
        ],
        "example": "This will return `3` as `great` is the third argument in the query:\n\n```javascript\nclient.command({\n    name: \"indexOfArgs\",\n    code: `\n  $indexOfArgs[aoi.js is great for users who are new to Discord's API!;great]\n  `\n});\n```",
        "tip": null,
        "documentation": "https://aoi.js.org/functions/indexofarg",
        "source": "https://github.com/aoijs/aoi.js/tree/v6/src/functions/misc/indexOfArg.js",
        "type": "Aoi.Js"
    },
    {
        "function": "$interactionAttachment",
        "description": "$interactionAttachment returns the URL of the attachment option's value.",
        "usage": "$interactionAttachment[option]",
        "parameters": [
            {
                "field": "option",
                "type": "string",
                "description": "The name of the attachment option.",
                "required": true
            }
        ],
        "example": "This will return the URL of the attached file in the `attachment` option:\n\n```js\n$createApplicationCommand[$guildID;exampleslash;Simple example slash command.;true;true;slash;[{\n    \"name\": \"attachment\",\n    \"description\": \"Example attachment option.\",\n    \"required\": true,\n    \"type\": 11\n}]]\n```\n\n```js\nclient.interactionCommand({\n    name: \"exampleslash\",\n    prototype: \"slash\",\n    code: `$interactionReply[Your attachment: $interactionAttachment[attachment]]`\n});\n```",
        "tip": null,
        "documentation": "https://aoi.js.org/functions/interactionattachment",
        "source": "https://github.com/aoijs/aoi.js/tree/v6/src/functions/components/interactionAttachment.js",
        "type": "Aoi.Js"
    },
    {
        "function": "$interactionData",
        "description": "$interactionData will return given arguments of an interaction.",
        "usage": "$interactionData[data]",
        "parameters": [
            {
                "field": "data",
                "type": "string",
                "description": "Data to retrieve.",
                "required": true
            }
        ],
        "example": "```aoi\n$interactionData[customId]\n// returns the custom ID of the interaction.\n```\n\n```aoi\n$interactionData[author.id]\n// returns the author ID of the interaction.\n```\n\n```aoi\n$interactionData[message.id]\n// returns the message ID of the interaction.\n```\n\n```aoi\n$interactionData[channel.id]\n// returns the channel ID of the interaction.\n```\n\nThat are just a few example, there are a lot more.",
        "tip": null,
        "documentation": "https://aoi.js.org/functions/interactiondata",
        "source": "https://github.com/aoijs/aoi.js/tree/v6/src/functions/components/interactionData.js",
        "type": "Aoi.Js"
    },
    {
        "function": "$interactionDefer",
        "description": "$interactionDefer defers an Interaction of the last 15 minutes.",
        "usage": "$interactionDefer[ephemeral]",
        "parameters": [
            {
                "field": "ephemeral",
                "type": "boolean",
                "description": "Visible to the command author only?",
                "required": true
            }
        ],
        "example": "```javascript\nclient.command({\n    name: \"exampleButton\",\n    type: \"interaction\",\n    prototype: \"button\",\n    code: `\n   $interactionFollowUp[This is the second message!] \n   $interactionFollowUp[This is the first message!] \n   $interactionDefer[true]`\n});\n```",
        "tip": null,
        "documentation": "https://aoi.js.org/functions/interactiondefer",
        "source": "https://github.com/aoijs/aoi.js/tree/v6/src/functions/components/interactionDefer.js",
        "type": "Aoi.Js"
    },
    {
        "function": "$interactionDeferUpdate",
        "description": "$interactionDeferUpdate defers the interaction message that will be updated.",
        "usage": "$interactionDeferUpdate[ephemeral]",
        "parameters": [
            {
                "field": "ephemeral",
                "type": "boolean",
                "description": "Visible to the command author only?",
                "required": true
            }
        ],
        "example": "```javascript\nclient.command({\n    name: \"exampleButton\",\n    type: \"interaction\",\n    prototype: \"button\",\n    code: ` \n   $interactionFollowUp[This is the first message!]\n   $interactionEdit[This is the second message!]\n   $interactionDeferUpdate[true]`\n});\n```",
        "tip": null,
        "documentation": "https://aoi.js.org/functions/interactiondeferupdate",
        "source": "https://github.com/aoijs/aoi.js/tree/v6/src/functions/components/interactionDeferUpdate.js",
        "type": "Aoi.Js"
    },
    {
        "function": "$interactionDelete",
        "description": "$interactionDelete will delete a reply of an interaction.",
        "usage": "$interactionDelete",
        "parameters": [],
        "example": "This will delete the interaction after 5 seconds.\n\n```javascript\nmodule.exports = [\n    {\n        name: \"interactionDelete\",\n        type: \"interaction\",\n        prototype: \"button\",\n        code: `\n  $interactionDelete\n  $wait[5s]\n  $interactionReply[Hello, World!]\n  `\n    }\n];\n```",
        "tip": null,
        "documentation": "https://aoi.js.org/functions/interactiondelete",
        "source": "https://github.com/aoijs/aoi.js/tree/v6/src/functions/components/interactionDelete.js",
        "type": "Aoi.Js"
    },
    {
        "function": "$interactionEdit",
        "description": "$interactionEdit will return edit an interaction.",
        "usage": "$interactionEdit[content;allowedMentions?]",
        "parameters": [
            {
                "field": "content",
                "type": "string",
                "description": "New message content.",
                "required": true
            },
            {
                "field": "allowedMentions",
                "type": "string",
                "description": "Allowed mentions? \n1. **everyone** \n2. **roles** \n3. **users**",
                "required": false
            }
        ],
        "example": "```javascript\nmodule.exports = [\n    {\n        name: \"interactionEdit\",\n        type: \"interaction\",\n        prototype: \"slash\",\n        code: ` $interactionEdit[Bye, World!]`\n    }\n];\n```\n\n```javascript\nmodule.exports = [\n    {\n        name: \"interactionEdit\",\n        type: \"interaction\",\n        prototype: \"slash\",\n        code: ` $interactionEdit[Bye, World! {newEmbed:{title:Hello!}{description:This is an embed!}}]`\n    }\n];\n```",
        "tip": null,
        "documentation": "https://aoi.js.org/functions/interactionedit",
        "source": "https://github.com/aoijs/aoi.js/tree/v6/src/functions/components/interactionEdit.js",
        "type": "Aoi.Js"
    },
    {
        "function": "$interactionFollowUp",
        "description": "$interactionFollowUp can be used for JSON requests, song information or playing tracks, since these things takes more than 3 seconds.",
        "usage": "$interactionFollowUp[content?;ephemeral?;returnID?]",
        "parameters": [
            {
                "field": "content",
                "type": "string",
                "description": "New message content.",
                "required": true
            },
            {
                "field": "ephemeral",
                "type": "boolean",
                "description": "Visible to the command author only? \n1. **true** \n2. **false** (default)",
                "required": false
            },
            {
                "field": "returnID",
                "type": "boolean",
                "description": "Return message ID? \n1. **true** \n2. **false** (default)",
                "required": false
            }
        ],
        "example": "```javascript\nmodule.exports = [\n    {\n        name: \"interactionFollowUp\",\n        type: \"interaction\",\n        prototype: \"slash\",\n        code: `\n  $interactionFollowUp[Bye, world!]\n  $interactionDefer[true]\n  `\n    }\n];\n```\n\n```javascript\nmodule.exports = [\n    {\n        name: \"interactionFollowUp\",\n        type: \"interaction\",\n        prototype: \"slash\",\n        code: `\n  $interactionFollowUp[Bye, world! {newEmbed:{title:Hello!}{description:This is an embed!}}]\n  $interactionDefer[true]\n  `\n    }\n];\n```",
        "tip": null,
        "documentation": "https://aoi.js.org/functions/interactionfollowup",
        "source": "https://github.com/aoijs/aoi.js/tree/v6/src/functions/components/interactionFollowUp.js",
        "type": "Aoi.Js"
    },
    {
        "function": "$interactionLocale",
        "description": "$interactionLocale` will return the language preference of the account that executed the interaction.",
        "usage": "$interactionLocale",
        "parameters": [],
        "example": null,
        "tip": null,
        "documentation": "https://aoi.js.org/functions/interactionlocale",
        "source": "https://github.com/aoijs/aoi.js/tree/v6/src/functions/components/interactionLocale.js",
        "type": "Aoi.Js"
    },
    {
        "function": "$interactionModal",
        "description": "$interactionModal create an user interactive modal.",
        "usage": "$interactionModal[title;customID;components]",
        "parameters": [
            {
                "field": "title",
                "type": "string",
                "description": "The title of the modal which will be displayed as Modal Header.",
                "required": true
            },
            {
                "field": "customID",
                "type": "string",
                "description": "The component custom ID.",
                "required": true
            },
            {
                "field": "components",
                "type": "string",
                "description": "The modal text components.",
                "required": true
            }
        ],
        "example": "This will create a button and modal which will send the entered data to the same channel and give an ephemeral response\nto the user who submitted the form:\n\nPlease note that you require \"**events: [\"onMessage\", \"onInteractionCreate\"]**\" in your main file (also known as, in\nmost cases, index.js)\n\n```js\nclient.command({\n    name: \"interactionModal\",\n    code: `\n$addButton[1;Press Me!;primary;exampleID;false]\nPretty Example!`\n}); // Create a button which will trigger the modal.\n\nmodule.exports = [\n    {\n        name: \"exampleID\",\n        type: \"interaction\",\n        prototype: \"button\", // Using \"prototype\" as this interaction belongs to a button.\n        code: `\n$interactionModal[Example!;customID;\n  {actionRow:\n    {textInput:What's your name?:1:nameInput:true:Your pretty name!:2:200}\n  }\n  {actionRow:\n    {textInput:What's your age?:1:ageInput:true:You young soul!:1:3}\n  }\n  {actionRow:\n    {textInput:What's your gender?:2:genderInput:true:Anything will work!:1:10}\n  }\n]`\n    }\n]; /* The modal itself, we use {textInput} to accept user input.\n\nThe correct usage of {textInput} would be:\n\n{textInput:title:type (1 : small text field, 2 : big text field):customID:required ( true, false ):placeholder:minVal:maxVal}\n\n*/\n\nmodule.exports = [\n    {\n        name: \"customID\",\n        type: \"interaction\",\n        prototype: \"modal\", // Using \"prototype\" as this interaction belongs to a modal.\n        code: `\n$interactionReply[Thanks for submitting this form!;everyone;true]\n\n$title[$username submitted a form!;$userAvatar]\n$addField[Their name is..;$textInputValue[nameInput]]\n$addField[Their age is..;$textInputValue[ageInput]]\n$addField[Their gender is..;$textInputValue[genderInput]]`\n    }\n]; /* Will return the values entered earlier from the modal. Using $textInputValue to retrieve those.\n\nAlternatively you could use $channelSendMessage[channelID;content] to send the data to another channel.\n$channelSendMessage[$channelID;{newEmbed:{title:$username submitted a form!:$userAvatar}{field:Their name is..:$textInputValue[nameInput]}{field:Their age is..:$textInputValue[ageInput]}{field:Their gender is..:$textInputValue[genderInput]}}]\n*/\n```",
        "tip": null,
        "documentation": "https://aoi.js.org/functions/interactionmodal",
        "source": "https://github.com/aoijs/aoi.js/tree/v6/src/functions/components/interactionModal.js",
        "type": "Aoi.Js"
    },
    {
        "function": "$interactionPing",
        "description": "$interactionPing will return the latency of an interaction.",
        "usage": "$interactionPing",
        "parameters": [],
        "example": "This will return the latency of an interaction:\n\n```javascript\nclient.command({\n    name: \"interactionPing\",\n    code: `\n $addButton[1;Test;primary;testButton;false]\n Click me!\n  `\n});\n\nmodule.exports = [\n    {\n        name: \"testButton\",\n        type: \"interaction\",\n        prototype: \"button\",\n        code: `\n  $interactionUpdate[This took me: $interactionPing MS!]\n  `\n    }\n];\n```",
        "tip": null,
        "documentation": "https://aoi.js.org/functions/interactionping",
        "source": "https://github.com/aoijs/aoi.js/tree/v6/src/functions/components/interactionPing.js",
        "type": "Aoi.Js"
    },
    {
        "function": "$interactionReply",
        "description": "$interactionReply allows you to send an interaction message reply.",
        "usage": "$interactionReply[content?;allowedMentions?;ephemeral?;returnID?]",
        "parameters": [
            {
                "field": "content",
                "type": "string",
                "description": "New message content.",
                "required": true
            },
            {
                "field": "allowedMentions",
                "type": "string",
                "description": "Allowed mentions? \n1. **everyone** \n2. **roles** \n3. **users**",
                "required": false
            },
            {
                "field": "ephemeral",
                "type": "boolean",
                "description": "Visible to the command author only? \n1. **true** \n2. **false** (default)",
                "required": false
            },
            {
                "field": "returnID",
                "type": "boolean",
                "description": "Return message ID? \n1. **true** \n2. **false** (default)",
                "required": false
            }
        ],
        "example": "```javascript\nclient.interactionCommand({\n    name: \"interactionReply\",\n    prototype: \"slash\", // button/selectMenu/slash\n    code: `\n  $interactionReply[Hello, world!;everyone;false;false]\n  `\n});\n```\n\n```javascript\nclient.interactionCommand({\n    name: \"interactionReply\",\n    prototype: \"slash\", // button/selectMenu/slash\n    code: `\n  $interactionReply[Hello, world! {newEmbed:{title:Hello!}{description:This is an embed!}};everyone;false;false]\n  `\n});\n```",
        "tip": null,
        "documentation": "https://aoi.js.org/functions/interactionreply",
        "source": "https://github.com/aoijs/aoi.js/tree/v6/src/functions/components/interactionReply.js",
        "type": "Aoi.Js"
    },
    {
        "function": "$interactionUpdate",
        "description": "$interactionUpdate will update an existing interaction.",
        "usage": "$interactionUpdate[content]",
        "parameters": [
            {
                "field": "content",
                "type": "string",
                "description": "New message content.",
                "required": true
            }
        ],
        "example": "```javascript\nmodule.exports = [{\n  name: \"interactionUpdate\",\n  type: \"interaction\",\n  prototype: \"slash\",\n  code: `\n  $interactionReply[Hello, World! {actionRow:{button:Example Button!:primary:customID:false}};everyone;false]\n  `\n}];\n```\n\n```js\nmodule.exports = [\n    {\n        name: \"customID\",\n        type: \"interaction\",\n        prototype: \"button\",\n        code: `\n  $interactionUpdate[Bye, world.]\n  `\n    }\n];\n```\n\n```js\nmodule.exports = [\n    {\n        name: \"customID\",\n        type: \"interaction\",\n        prototype: \"button\",\n        code: `\n  $interactionUpdate[Bye, world. {newEmbed:{title:Hello!}{description:This is an embed!}}]\n  `\n    }\n];\n```",
        "tip": null,
        "documentation": "https://aoi.js.org/functions/interactionupdate",
        "source": "https://github.com/aoijs/aoi.js/tree/v6/src/functions/components/interactionUpdate.js",
        "type": "Aoi.Js"
    },
    {
        "function": "$isAutoComplete",
        "description": "$isAutoComplete will return either true or false depending on the entered slash command option being auto completed or not. (autoCompleteRespond function)",
        "usage": "$isAutoComplete",
        "parameters": [],
        "example": "This will create a slash command with the \"autoComplete\" feature:\n\nPlease note that you require \"**events: [\"onMessage\", \"onInteractionCreate\"]**\" in your main file (also known as, in\nmost cases, index.js)\n\n```javascript\nclient.command({\n    name: \"createSlashCommand\",\n    code: `\n  $createApplicationCommand[global;example;Awesome example interaction command with auto-complete!;true;true;slash;[{\n  \"name\": \"option\", \n  \"description\": \"test\",\n  \"required\": false,\n  \"type\": 3, \n  \"autocomplete\": true\n}]]`\n});\n```\n\nChecking if autoComplete equals `true` if so it will respond with the given respond (addition of the code above):\n\n```javascript\nclient.command({\n    name: \"example\",\n    prototype: \"slash\",\n    $if: \"old\",\n    code: `\n  $if[$isAutocomplete==true]\n  $autoCompleteRespond[First option;You selected the first option, therefore I'm responding with this!;Second option;You selected the first second, therefore I'm responding with this!]\n  $else\n  $interactionReply[$slashOption[option]]\n  $endif\n  `\n});\n```\n\nCreate the slash-commands with another option:\n\n```javascript\nclient.command({\n    name: \"createSlashCommand\",\n    code: `\n  $createApplicationCommand[global;example;Awesome example interaction command with auto-complete!;true;slash;[{\n  \"name\": \"option\",\n  \"description\": \"test\",\n  \"required\": false, \n  \"type\": 3,\n  \"autocomplete\": true \n}, {\n  \"name\": \"anotheroption\",\n  \"description\": \"test\",\n  \"required\": false,\n  \"type\": 3\n}]]`\n});\n```\n\nUsing JSON and checking if autoComplete equals `true` if so it will respond with the given respond (addition of the\ncode above):\n\n```javascript\nclient.command({\n    name: \"example\",\n    prototype: \"slash\",\n    $if: \"old\",\n    code: `\n  $if[$isAutocomplete==true]\n  $autoCompleteRespond[[{ \n    \"name\" : \"First Option\",\n    \"value\" : \"You selected the first option, therefore I\\'m responding with this!\"\n  }, {\n    \"name\" : \"Second Option\",\n    \"value\" : \"You selected the second option, therefore I\\'m responding with this!\"\n  }]]\n  $else\n  $interactionReply[$slashOption[option]]\n  $endif\n  `\n});\n```",
        "tip": null,
        "documentation": "https://aoi.js.org/functions/isautocomplete",
        "source": "https://github.com/aoijs/aoi.js/tree/v6/src/functions/misc/isAutoComplete.js",
        "type": "Aoi.Js"
    },
    {
        "function": "$isBanned",
        "description": "$isBanned checks if a given user is banned in a specific guild.",
        "usage": "$isBanned[guildID;userID]",
        "parameters": [
            {
                "field": "guildID",
                "type": "number",
                "description": "ID of the guild where to check if the user is banned or not.",
                "required": true
            },
            {
                "field": "userID",
                "type": "number",
                "description": "ID of the user that will be checked if they're banned or not.",
                "required": true
            }
        ],
        "example": "This will return `false` as you're not banned in this guild:\n\n```javascript\nclient.command({\n    name: \"isBanned\",\n    code: `\n  $isBanned[$guildID;$authorID]\n  `\n});\n```",
        "tip": null,
        "documentation": "https://aoi.js.org/functions/isbanned",
        "source": "https://github.com/aoijs/aoi.js/tree/v6/src/functions/misc/isBanned.js",
        "type": "Aoi.Js"
    },
    {
        "function": "$isBoosting",
        "description": "$isBoosting will check if the given user is boosting the given guild.",
        "usage": "$isBoosting[userID?;guildID?]",
        "parameters": [
            {
                "field": "userID",
                "type": "number",
                "description": "User ID to check if they're boosting.",
                "required": false
            },
            {
                "field": "guildID",
                "type": "number",
                "description": "The guild ID of where they boosted the server.",
                "required": false
            }
        ],
        "example": "This will return `false` or `true` depending on if you boosted this server:\n\n```javascript\nclient.command({\n    name: \"isBoosting\",\n    code: `\n  $isBoosting[$authorID;$guildID]\n  `\n});\n```",
        "tip": null,
        "documentation": "https://aoi.js.org/functions/isboosting",
        "source": "https://github.com/aoijs/aoi.js/tree/v6/src/functions/misc/isBoosting.js",
        "type": "Aoi.Js"
    },
    {
        "function": "$isBot",
        "description": "$isBot will check if the given user is a bot.",
        "usage": "$isBot[userID?]",
        "parameters": [
            {
                "field": "userID",
                "type": "number",
                "description": "User id to check if they're a bot.",
                "required": false
            }
        ],
        "example": "This will return `true` as your bot is, obviously, a bot:\n\n```javascript\nclient.command({\n    name: \"isBot\",\n    code: `\n  $isBot[$clientID]\n  `\n});\n```",
        "tip": null,
        "documentation": "https://aoi.js.org/functions/isbot",
        "source": "https://github.com/aoijs/aoi.js/tree/v6/src/functions/misc/isBot.js",
        "type": "Aoi.Js"
    },
    {
        "function": "$isBotVerified",
        "description": "$isBotVerified checks if the given bot is verified by Discord.",
        "usage": "$isBotVerified[clientId?]",
        "parameters": [
            {
                "field": "clientId",
                "type": "number",
                "description": "The ID of the bot you want to check its verification status.",
                "required": false
            }
        ],
        "example": "This will check if your bot is verified and return either `true` or `false`:\n\n```javascript\nclient.command({\n    name: \"isBotVerified\",\n    code: `\n  $isBotVerified[$clientId]\n  `\n});\n```",
        "tip": null,
        "documentation": "https://aoi.js.org/functions/isbotverified",
        "source": "https://github.com/aoijs/aoi.js/tree/v6/src/functions/misc/isBotVerified.js",
        "type": "Aoi.Js"
    },
    {
        "function": "$isButtonInteraction",
        "description": "$isButtonInteraction will return either true or false depending on the type of the interaction.",
        "usage": "$isButtonInteraction",
        "parameters": [],
        "example": "This will return `true` because the function is used within a `button` interaction command.\n\n```js\nclient.command({\n    name: \"isButtonInteraction\",\n    code: ` \n    Hello!\n    $addButton[1;Click Me!;primary;ButtonID;false]\n    `\n    },{\n    name: \"ButtonID\",\n    type: \"interaction\",\n    prototype: \"button\",\n    code:`\n\t$isButtonInteraction\n    $interactionReply[Hello World!;everyone;false]\n     `\n    });\n\n  ```",
        "tip": null,
        "documentation": "https://aoi.js.org/functions/isbuttoninteraction",
        "source": "https://github.com/aoijs/aoi.js/tree/v6/src/functions/components/isButtonInteraction.js",
        "type": "Aoi.Js"
    },
    {
        "function": "$isChannelManageable",
        "description": "$isChannelManageable will check if the channel is manageable or not.",
        "usage": "$isChannelManageable[channelID?]",
        "parameters": [
            {
                "field": "channelID",
                "type": "number",
                "description": "ID of the channel to check if the channel is manageable or not.",
                "required": false
            }
        ],
        "example": "This will return `true` or `false` depending on if the channel you're executing the command in is manageable:\n\n```javascript\nclient.command({\n    name: \"isChannelManageable\",\n    code: `\n  $isChannelManageable[$channelID]\n  `\n});\n```",
        "tip": null,
        "documentation": "https://aoi.js.org/functions/ischannelmanageable",
        "source": "https://github.com/aoijs/aoi.js/tree/v6/src/functions/guild/isChannelManageable.js",
        "type": "Aoi.Js"
    },
    {
        "function": "$isCommandInteraction",
        "description": "$isCommandInteraction will return either true or false depending on the type of the interaction.",
        "usage": "$isCommandInteraction",
        "parameters": [],
        "example": "This will return `true` because the function is used within a interaction command.\n\n```js\nclient.command({\n    name: \"isCommandInteraction\",\n    code: ` \n    Hello!\n    $addButton[1;Click Me!;primary;ButtonID;false]\n    `\n    },{\n    name: \"ButtonID\",\n    type: \"interaction\",\n    prototype: \"button\",\n    code:`\n\t  $isCommandInteraction\n    $interactionReply[Hello World!;everyone;false]\n  `\n});```",
        "tip": null,
        "documentation": "https://aoi.js.org/functions/iscommandinteraction",
        "source": "https://github.com/aoijs/aoi.js/tree/v6/src/functions/components/isCommandInteraction.js",
        "type": "Aoi.Js"
    },
    {
        "function": "$isComponentInteraction",
        "description": "$isComponentInteraction will return either true or false depending on the type of the interaction.",
        "usage": "$isComponentInteraction",
        "parameters": [],
        "example": "This will return `true` because the `button` is a component interaction command.\n\n```js\nclient.command({\n    name: \"isComponentInteraction\",\n    code: ` \n    Hello!\n    $addButton[1;Click Me!;primary;ButtonID;false]\n    `\n    },{\n    name: \"ButtonID\",\n    type: \"interaction\",\n    prototype: \"button\",\n    code:`\n\t$isComponentInteraction\n    $interactionReply[Hello World!;everyone;false]\n     `\n    });\n\n  ```",
        "tip": null,
        "documentation": "https://aoi.js.org/functions/iscomponentinteraction",
        "source": "https://github.com/aoijs/aoi.js/tree/v6/src/functions/components/isComponentInteraction.js",
        "type": "Aoi.Js"
    },
    {
        "function": "$isConsumed",
        "description": "$consume will check if the specified consumable has been consumed",
        "usage": "$isConsumed[consumableId;userID?]",
        "parameters": [
            {
                "field": "consumableId",
                "type": "number",
                "description": "Your consumable ID.",
                "required": true
            },
            {
                "field": "userID",
                "type": "number",
                "description": "The user ID you want to check.",
                "required": false
            }
        ],
        "example": "This will check if the provided `consumableId` has been marked as used for this user:\n\n```javascript\nclient.command({\n    name: \"isConsumed\",\n    code: `\n   $isConsumed[12345678;$authorID]\n   $comment[Example value of consumableId]\n  `\n});\n```",
        "tip": null,
        "documentation": "https://aoi.js.org/functions/isconsumed",
        "source": "https://github.com/aoijs/aoi.js/tree/v6/src/functions/misc/isConsumed.js",
        "type": "Aoi.Js"
    },
    {
        "function": "$isContextMenuInteraction",
        "description": "$isContextMenuInteraction will return either true or false depending on the type of the interaction.",
        "usage": "$isContextMenuInteraction",
        "parameters": [],
        "example": null,
        "tip": null,
        "documentation": "https://aoi.js.org/functions/iscontextmenuinteraction",
        "source": "https://github.com/aoijs/aoi.js/tree/v6/src/functions/components/isContextMenuInteraction.js",
        "type": "Aoi.Js"
    },
    {
        "function": "$isCustomEmoji",
        "description": "$isCustomEmoji will check if the given emoji is a custom emoji or not.",
        "usage": "$isCustomEmoji[emojiResolver;guildID?]",
        "parameters": [
            {
                "field": "emojiResolver",
                "type": "string",
                "description": "Emoji you want to check if it is a custom emoji.",
                "required": true
            },
            {
                "field": "guildID",
                "type": "number",
                "description": "ID of the guild where the emoji was created in.",
                "required": false
            }
        ],
        "example": "This will return `true` as\nthe ![emoji](https://cdn.discordapp.com/emojis/1003365344724910191.webp?size=16&quality=lossless) emoji is indeed a\ncustom emoji:\n\n```javascript\nclient.command({\n    name: \"isCustomEmoji\",\n    code: `\n  $isCustomEmoji[<:LerefMoney:1003365344724910191>;773352845738115102]\n  `\n});\n```",
        "tip": null,
        "documentation": "https://aoi.js.org/functions/iscustomemoji",
        "source": "https://github.com/aoijs/aoi.js/tree/v6/src/functions/misc/isCustomEmoji.js",
        "type": "Aoi.Js"
    },
    {
        "function": "$isDM",
        "description": "$isDM will check if the given channel is a DM or not.",
        "usage": "$isDM[channelID?]",
        "parameters": [
            {
                "field": "channelID",
                "type": "number",
                "description": "ID of the channel that you want to check.",
                "required": false
            }
        ],
        "example": "This will return either `true` or `false` depending on if you're executing the command in a DM or not:\n\n```javascript\nclient.command({\n    name: \"isDM\",\n    code: `\n  $isDM[$channelID]\n  `\n});\n```",
        "tip": null,
        "documentation": "https://aoi.js.org/functions/isdm",
        "source": "https://github.com/aoijs/aoi.js/tree/v6/src/functions/misc/isDM.js",
        "type": "Aoi.Js"
    },
    {
        "function": "$isDeafen",
        "description": "$isDeafen will check if a certain user is deafened or not.",
        "usage": "$isDeafen[userID?;guildID?]",
        "parameters": [
            {
                "field": "userID",
                "type": "number",
                "description": "User ID you want to check if they're deafened,",
                "required": false
            },
            {
                "field": "guildID",
                "type": "number",
                "description": "The guild ID where you want to check if they're deafened.",
                "required": false
            }
        ],
        "example": "This will return `false` or `true` depending on if you're currently deafened or not:\n\n```javascript\nclient.command({\n    name: \"isDeafen\",\n    code: `\n  $isDeafen[$authorID;$guildID]\n  `\n});\n```",
        "tip": null,
        "documentation": "https://aoi.js.org/functions/isdeafen",
        "source": "https://github.com/aoijs/aoi.js/tree/v6/src/functions/guild/isDeafen.js",
        "type": "Aoi.Js"
    },
    {
        "function": "$isEveryoneMentioned",
        "description": "$isEveryoneMentioned will check if everyone or here is mentioned.",
        "usage": "$isEveryoneMentioned",
        "parameters": [],
        "example": "This will check if you mentioned `@here` or `@everyone`:\n\n```javascript\nclient.command({\n    name: \"isEveryoneMentioned\",\n    code: `\n  You did not mention @ everyone!\n  $onlyIf[$isEveryoneMentioned==false;You tried to mention @ everyone!]\n  `\n});\n```",
        "tip": null,
        "documentation": "https://aoi.js.org/functions/iseveryonementioned",
        "source": "https://github.com/aoijs/aoi.js/tree/v6/src/functions/misc/isEveryoneMentioned.js",
        "type": "Aoi.Js"
    },
    {
        "function": "$isGuildDeafened",
        "description": "$isGuildDeafened is similar but not to confuse with `$isDeafen` this will check if the user is server deafened.",
        "usage": "$isGuildDeafened[userID?;guildID?]",
        "parameters": [
            {
                "field": "userID",
                "type": "number",
                "description": "The ID of the user you want to check if they're server deafened.",
                "required": false
            },
            {
                "field": "guildID",
                "type": "number",
                "description": "The ID of the guild where they're server deafened in.",
                "required": false
            }
        ],
        "example": "This will return either `true` or `false` depending on if you're server deafened or not:\n\n```javascript\nclient.command({\n    name: \"isGuildDeafened\",\n    code: `\n  $isGuildDeafened\n  `\n});\n```",
        "tip": null,
        "documentation": "https://aoi.js.org/functions/isguilddeafened",
        "source": "https://github.com/aoijs/aoi.js/tree/v6/src/functions/guild/isGuildDeafened.js",
        "type": "Aoi.Js"
    },
    {
        "function": "$isGuildMuted",
        "description": "$isGuildMuted is similar but not to confuse with `$isMuted` this will check if the user is server muted.",
        "usage": "$isGuildMuted[userID?;guildID?]",
        "parameters": [
            {
                "field": "userID",
                "type": "number",
                "description": "The ID of the user you want to check if they're server muted.",
                "required": false
            },
            {
                "field": "guildID",
                "type": "number",
                "description": "The ID of the guild where they're server muted in.",
                "required": false
            }
        ],
        "example": "This will return either `true` or `false` depending on if you're server muted or not:\n\n```javascript\nclient.command({\n    name: \"isGuildMuted\",\n    code: `\n  $isGuildMuted[$authorID;$guildID]\n  `\n});\n```",
        "tip": null,
        "documentation": "https://aoi.js.org/functions/isguildmuted",
        "source": "https://github.com/aoijs/aoi.js/tree/v6/src/functions/guild/isGuildMuted.js",
        "type": "Aoi.Js"
    },
    {
        "function": "$isGuildPartnered",
        "description": "$isGuildPartnered checks if the given guild is partnered with Discord.",
        "usage": "$isGuildPartnered[guildID?]",
        "parameters": [
            {
                "field": "guildID",
                "type": "number",
                "description": "The ID of the guild you want to check its partnership status of.",
                "required": true
            }
        ],
        "example": "This will check if your server is partnered and return either `true` or `false`:\n\n```javascript\nclient.command({\n    name: \"isGuildPartnered\",\n    code: `\n  $isGuildPartnered[$guildID]\n  `\n});\n```",
        "tip": null,
        "documentation": "https://aoi.js.org/functions/isguildpartnered",
        "source": "https://github.com/aoijs/aoi.js/tree/v6/src/functions/guild/isGuildPartnered.js",
        "type": "Aoi.Js"
    },
    {
        "function": "$isGuildVerified",
        "description": "$isGuildVerified checks if the given guild is verified by Discord.",
        "usage": "$isGuildVerified[guildID?]",
        "parameters": [
            {
                "field": "guildID",
                "type": "number",
                "description": "The ID of the guild where you want to check its verification status of.",
                "required": false
            }
        ],
        "example": "This will check if your server is verified and return either `true` or `false`:\n\n```javascript\nclient.command({\n    name: \"isGuildVerified\",\n    code: `\n  $isGuildVerified[$guildID]\n  `\n});\n```",
        "tip": null,
        "documentation": "https://aoi.js.org/functions/isguildverified",
        "source": "https://github.com/aoijs/aoi.js/tree/v6/src/functions/guild/isGuildVerified.js",
        "type": "Aoi.Js"
    },
    {
        "function": "$isHoisted",
        "description": "$isHoisted will check if a specific role is hoisted.",
        "usage": "$isHoisted[roleID;guildID?]",
        "parameters": [
            {
                "field": "roleID",
                "type": "number",
                "description": "ID of the role you want to check if it's hoisted or not.",
                "required": true
            },
            {
                "field": "guildID",
                "type": "number",
                "description": "The ID of the guild where you want to check if the role is hoisted or not.",
                "required": false
            }
        ],
        "example": "This will check if a role called `Owner` is hoisted in your server:\n\n```javascript\nclient.command({\n    name: \"isHoisted\",\n    code: `\n  $isHoisted[$findRole[Owner];$guildID]\n  `\n});\n```",
        "tip": null,
        "documentation": "https://aoi.js.org/functions/ishoisted",
        "source": "https://github.com/aoijs/aoi.js/tree/v6/src/functions/misc/isHoisted.js",
        "type": "Aoi.Js"
    },
    {
        "function": "$isInteger",
        "description": "$isInteger will check if the given number is an integer or not.",
        "usage": "$isInteger[number]",
        "parameters": [
            {
                "field": "number",
                "type": "number",
                "description": "Number you want to check if its an number or not.",
                "required": true
            }
        ],
        "example": "This checks if your message contains an integer and returns `true` or `false`:\n\n```javascript\nclient.command({\n    name: \"isInteger\",\n    code: `\n  $isInteger[$message]\n  `\n});\n```",
        "tip": null,
        "documentation": "https://aoi.js.org/functions/isinteger",
        "source": "https://github.com/aoijs/aoi.js/tree/v6/src/functions/misc/isInteger.js",
        "type": "Aoi.Js"
    },
    {
        "function": "$isInteractionDeferred",
        "description": "$isInteractionDeferred will return true or false depending on whether the interaction has been deferred to or not.",
        "usage": "$isInteractionDeferred",
        "parameters": [],
        "example": "This will return `true` because the interaction has been deferred.\n\n```js\nclient.interactionCommand({\n    name: \"isInteractionDeferred\",\n    prototype: \"slash\",\n    code: `\n$isInteractionDeferred\n$interactionFollowUp[Hello World!]\n$interactionDefer[false]\n`\n});\n```",
        "tip": null,
        "documentation": "https://aoi.js.org/functions/isinteractiondeferred",
        "source": "https://github.com/aoijs/aoi.js/tree/v6/src/functions/components/isInteractionDeferred.js",
        "type": "Aoi.Js"
    },
    {
        "function": "$isInteractionRepliable",
        "description": "$isInteractionRepliable will return true or false depending on whether the interaction replies to or not.",
        "usage": "$isInteractionRepliable",
        "parameters": [],
        "example": "This will return `true` because the interaction is able reply.\n\n```js\nclient.interactionCommand({\n    name: \"isInteractionRepliable\",\n    prototype: \"slash\",\n    code: `\n$isInteractionRepliable\n$interactionReply[I just replied!]\n`\n});\n```",
        "tip": null,
        "documentation": "https://aoi.js.org/functions/isinteractionrepliable",
        "source": "https://github.com/aoijs/aoi.js/tree/v6/src/functions/components/isInteractionRepliable.js",
        "type": "Aoi.Js"
    },
    {
        "function": "$isInteractionReplied",
        "description": "$isInteractionReplied will return true or false depending on whether the interaction has been replied to or not.",
        "usage": "$isInteractionReplied",
        "parameters": [],
        "example": "This will return `true` because the interaction has been replied to previously.\n\n```js\nclient.interactionCommand({\n    name: \"isInteractionReplied\",\n    prototype: \"slash\",\n    code: `\n$isInteractionReplied \n$interactionReply[I just replied!]\n`\n});\n```",
        "tip": null,
        "documentation": "https://aoi.js.org/functions/isinteractionreplied",
        "source": "https://github.com/aoijs/aoi.js/tree/v6/src/functions/components/isInteractionReplied.js",
        "type": "Aoi.Js"
    },
    {
        "function": "$isMentionable",
        "description": "$isMentionable check if a given role is mentionable.",
        "usage": "$isMentionable[roleID;guildID?]",
        "parameters": [
            {
                "field": "roleID",
                "type": "number",
                "description": "The role ID to check if it's mentionable or not.",
                "required": true
            },
            {
                "field": "guildID",
                "type": "number",
                "description": "ID of the guild where the role is present in.",
                "required": false
            }
        ],
        "example": "This will check if a role with the name `Owner` is mentionable and returns either `true` or `false`:\n\n```javascript\nclient.command({\n    name: \"isMentionable\",\n    code: `\n  $isMentionable[$findRole[Owner];$guildID]\n  `\n});\n```",
        "tip": null,
        "documentation": "https://aoi.js.org/functions/ismentionable",
        "source": "https://github.com/aoijs/aoi.js/tree/v6/src/functions/misc/isMentionable.js",
        "type": "Aoi.Js"
    },
    {
        "function": "$isMentioned",
        "description": "$isMentioned checks if the query contains a mention.",
        "usage": "$isMentioned[query]",
        "parameters": [
            {
                "field": "query",
                "type": "string",
                "description": "Where you want to check if a user/role/channel was mentioned.",
                "required": true
            }
        ],
        "example": "This will return `true` as you were mentioned within the message:\n\n```javascript\nclient.command({\n    name: \"isMentioned\",\n    code: `\n  $isMentioned[<@$authorID>]\n  `\n});\n```",
        "tip": null,
        "documentation": "https://aoi.js.org/functions/ismentioned",
        "source": "https://github.com/aoijs/aoi.js/tree/v6/src/functions/misc/isMentioned.js",
        "type": "Aoi.Js"
    },
    {
        "function": "$isMuted",
        "description": "$isMuted will check if a specific user is muted within a voice channel.",
        "usage": "$isMuted[userID?;guildID?]",
        "parameters": [
            {
                "field": "userID",
                "type": "number",
                "description": "ID of the user you want to check if they're muted.",
                "required": true
            },
            {
                "field": "guildID",
                "type": "number",
                "description": "ID of the guild where the user is muted in.",
                "required": true
            }
        ],
        "example": "This will check if you're currently muted in a voice channel and returns either `true` or `false`:\n\n```javascript\nclient.command({\n    name: \"isMuted\",\n    code: `\n  $isMuted[$authorID;$guildID]\n  `\n});\n```",
        "tip": null,
        "documentation": "https://aoi.js.org/functions/ismuted",
        "source": "https://github.com/aoijs/aoi.js/tree/v6/src/functions/guild/isMuted.js",
        "type": "Aoi.Js"
    },
    {
        "function": "$isNumber",
        "description": "$isNumber will check if the given argument is a number.",
        "usage": "$isNumber[num]",
        "parameters": [
            {
                "field": "num",
                "type": "number",
                "description": "Argument you want to check if its a number.",
                "required": true
            }
        ],
        "example": "This will return `true` as `255` is a valid number:\n\n```javascript\nclient.command({\n    name: \"isNumber\",\n    code: `\n  $isNumber[255]\n  `\n});\n```",
        "tip": null,
        "documentation": "https://aoi.js.org/functions/isnumber",
        "source": "https://github.com/aoijs/aoi.js/tree/v6/src/functions/misc/isNumber.js",
        "type": "Aoi.Js"
    },
    {
        "function": "$isRoleEditable",
        "description": "$isRoleEditable will check if the role is editable.",
        "usage": "$isRoleEditable[roleID;guildID?]",
        "parameters": [
            {
                "field": "roleID",
                "type": "number",
                "description": "ID of the role you want to check if its editable.",
                "required": true
            },
            {
                "field": "guildID",
                "type": "number",
                "description": "The ID of the guild where the role exists.",
                "required": false
            }
        ],
        "example": "This will check if a role called `Owner` is editable:\n\n```javascript\nclient.command({\n    name: \"isRoleEditable\",\n    code: `\n  $isRoleEditable[$findRole[Owner];$guildID]\n  `\n});\n```",
        "tip": null,
        "documentation": "https://aoi.js.org/functions/isroleeditable",
        "source": "https://github.com/aoijs/aoi.js/tree/v6/src/functions/guild/isRoleEditable.js",
        "type": "Aoi.Js"
    },
    {
        "function": "$isRoleManaged",
        "description": "$isRoleManaged will check if a certain role is managed by Discord.",
        "usage": "$isRoleManaged[roleID;guildID?]",
        "parameters": [
            {
                "field": "roleID",
                "type": "number",
                "description": "ID of the role you want to check if it's managed by Discord or not.",
                "required": true
            },
            {
                "field": "guildID",
                "type": "number",
                "description": "ID of the guild where the role exists.",
                "required": false
            }
        ],
        "example": "This will check if a role called `Server Booster` is managed by Discord and return either `true` or `false`:\n\n```javascript\nclient.command({\n    name: \"isRoleManaged\",\n    code: `\n  $isRoleManaged[$findRole[Server Booster];$guildID]\n  `\n});\n```",
        "tip": null,
        "documentation": "https://aoi.js.org/functions/isrolemanaged",
        "source": "https://github.com/aoijs/aoi.js/tree/v6/src/functions/guild/isRoleManaged.js",
        "type": "Aoi.Js"
    },
    {
        "function": "$isSelectMenuInteraction",
        "description": "$isSelectMenuInteraction will return either true or false depending on the type of the interaction.",
        "usage": "$isSelectMenuInteraction",
        "parameters": [],
        "example": "This will return `true` because the function is used within a `selectMenu` interaction command.\n\n```javascript\nclient.command({\n    name: \"isSelectMenuInteraction\",\n    code: `\n    Hello!\n    $addSelectMenu[1;string;SelectMenu;This is a placeholder!;1;1;false;A Option:Description of option A:optionID]\n    `\n    },{\n    name: \"SelectMenu\",\n    type: \"interaction\",\n    prototype: \"selectMenu\",\n    code:`\n    $isSelectMenuInteraction\n    $interactionReply[Bye;everyone;false]\n  `\n});\n```",
        "tip": null,
        "documentation": "https://aoi.js.org/functions/isselectmenuinteraction",
        "source": "https://github.com/aoijs/aoi.js/tree/v6/src/functions/components/isSelectMenuInteraction.js",
        "type": "Aoi.Js"
    },
    {
        "function": "$isSelfDeafened",
        "description": "$isSelfDeafened is similar but not to confuse with `$isDeafen` this will check if the user deafened themselves.",
        "usage": "$isSelfDeafened[userID?;guildID?]",
        "parameters": [
            {
                "field": "userID",
                "type": "number",
                "description": "ID of the user you want to check if they're deafened.",
                "required": false
            },
            {
                "field": "guildID",
                "type": "number",
                "description": "ID of the guild where they're deafened in.",
                "required": false
            }
        ],
        "example": "This will return either `true` or `false` depending on if you're deafened or not:\n\n```javascript\nclient.command({\n    name: \"isSelfDeafened\",\n    code: `\n  $isSelfDeafened\n  `\n});\n```",
        "tip": null,
        "documentation": "https://aoi.js.org/functions/isselfdeafened",
        "source": "https://github.com/aoijs/aoi.js/tree/v6/src/functions/guild/isSelfDeafened.js",
        "type": "Aoi.Js"
    },
    {
        "function": "$isSelfMuted",
        "description": "$isSelfMuted is similar but not to confuse with `$isMuted` this will check if the user muted themselves.",
        "usage": "$isSelfMuted[userID?;guildID?]",
        "parameters": [
            {
                "field": "userID",
                "type": "number",
                "description": "ID of the user you want to check if they're muted.",
                "required": false
            },
            {
                "field": "guildID",
                "type": "number",
                "description": "ID of the guild where they're muted in.",
                "required": false
            }
        ],
        "example": "This will return either `true` or `false` depending on if you're muted (voice channel) or not:\n\n```javascript\nclient.command({\n    name: \"isSelfDeafened\",\n    code: `\n  $isSelfDeafened\n  `\n});\n```",
        "tip": null,
        "documentation": "https://aoi.js.org/functions/isselfmuted",
        "source": "https://github.com/aoijs/aoi.js/tree/v6/src/functions/guild/isSelfMuted.js",
        "type": "Aoi.Js"
    },
    {
        "function": "$isStreaming",
        "description": "$isStreaming will check if one user is streaming in a voice channel.",
        "usage": "$isStreaming[userID?;guildID?]",
        "parameters": [
            {
                "field": "userID",
                "type": "number",
                "description": "ID of the user you want to check if they're streaming.",
                "required": false
            },
            {
                "field": "guildID",
                "type": "number",
                "description": "ID of the channel where they're streaming in.",
                "required": false
            }
        ],
        "example": "This will return either `true` or `false` depending on if you're streaming (voice channel) or not:\n\n```javascript\nclient.command({\n    name: \"isStreaming\",\n    code: `\n  $isStreaming[$authorID;$guildID]\n  `\n});\n```",
        "tip": null,
        "documentation": "https://aoi.js.org/functions/isstreaming",
        "source": "https://github.com/aoijs/aoi.js/tree/v6/src/functions/misc/isStreaming.js",
        "type": "Aoi.Js"
    },
    {
        "function": "$isThread",
        "description": "$isThread will check if the given channel is a thread or not.",
        "usage": "$isThread[channelID?]",
        "parameters": [
            {
                "field": "channelID",
                "type": "number",
                "description": "ID of the channel that you want to check.",
                "required": false
            }
        ],
        "example": "This will return either `true` or `false` depending on if you're executing the command in a thread:\n\n```javascript\nclient.command({\n    name: \"isThread\",\n    code: `\n  $isThread[$channelID]\n  `\n});\n```",
        "tip": null,
        "documentation": "https://aoi.js.org/functions/isthread",
        "source": "https://github.com/aoijs/aoi.js/tree/v6/src/functions/guild/isThread.js",
        "type": "Aoi.Js"
    },
    {
        "function": "$isTicket",
        "description": "$isTicket will return either true or false depending on the channel being a ticket channel.",
        "usage": "$isTicket[channelID?]",
        "parameters": [
            {
                "field": "channelID",
                "type": "number",
                "description": "Channel ID.",
                "required": false
            }
        ],
        "example": "This will check if the current channel is a ticket channel created by `$newTicket`:\n\n```javascript\nclient.command({\n    name: \"isTicket\",\n    code: `\n    $isTicket[$channelID]\n    `\n});\n```",
        "tip": null,
        "documentation": "https://aoi.js.org/functions/isticket",
        "source": "https://github.com/aoijs/aoi.js/tree/v6/src/functions/misc/isTicket.js",
        "type": "Aoi.Js"
    },
    {
        "function": "$isTimeout",
        "description": "$isTimeout will check if the user is timed out with Discord's built-in timeout feature.",
        "usage": "$isTimeout[guildID?;userID?]",
        "parameters": [
            {
                "field": "guildID",
                "type": "number",
                "description": "The ID of the guild where they're timed out in.",
                "required": false
            },
            {
                "field": "userID",
                "type": "number",
                "description": "The ID of the user that's timed out.",
                "required": false
            }
        ],
        "example": "This will check if you're timed out and either return `true` or `false`:\n\n```javascript\nclient.command({\n    name: \"isTimeout\",\n    code: `\n  $isTimeout[$guildID;$authorID]\n  `\n});\n```",
        "tip": null,
        "documentation": "https://aoi.js.org/functions/istimeout",
        "source": "https://github.com/aoijs/aoi.js/tree/v6/src/functions/misc/isTimeout.js",
        "type": "Aoi.Js"
    },
    {
        "function": "$isUnicodeEmoji",
        "description": "$isUnicodeEmoji will check if the given emoji is an unicode emoji.",
        "usage": "$isUnicodeEmoji[emojiResolver]",
        "parameters": [
            {
                "field": "emojiResolver",
                "type": "string",
                "description": "Unicode emoji.",
                "required": true
            }
        ],
        "example": "This will return `true` as \"🤓\" is a valid unicode emoji:\n\n```javascript\nclient.command({\n    name: \"isUnicodeEmoji\",\n    code: `\n  $isUnicodeEmoji[🤓]\n  `\n});\n```",
        "tip": null,
        "documentation": "https://aoi.js.org/functions/isunicodeemoji",
        "source": "https://github.com/aoijs/aoi.js/tree/v6/src/functions/misc/isUnicodeEmoji.js",
        "type": "Aoi.Js"
    },
    {
        "function": "$isUserDmEnabled",
        "description": "$isUserDmEnabled will check if the user's Direct Messages are either disabled or enabled.",
        "usage": "$isUserDmEnabled[userID]",
        "parameters": [
            {
                "field": "userID",
                "type": "number",
                "description": "ID of the user you want to check if their dms are enabled or not.",
                "required": true
            }
        ],
        "example": "This will return either `true` or `false` depending on if your Direct Messages are enabled or disabled:\n\n```javascript\nclient.command({\n    name: \"isUserDmEnabled\",\n    code: `\n  $isUserDmEnabled[$authorID]\n  `\n});\n```",
        "tip": null,
        "documentation": "https://aoi.js.org/functions/isuserdmenabled",
        "source": "https://github.com/aoijs/aoi.js/tree/v6/src/functions/misc/isUserDmEnabled.js",
        "type": "Aoi.Js"
    },
    {
        "function": "$isValidColor",
        "description": "$isValidColor will check if a given color is valid, based on regex.",
        "usage": "$isValidColor[color]",
        "parameters": [
            {
                "field": "color",
                "type": "string",
                "description": "The color you want to check, can be hex or decimal.",
                "required": true
            }
        ],
        "example": "This will check if the given color `ff0000` is valid:\n\n```js\nclient.command({\n    name: \"isValidColor\",\n    code: `\n  $isValidColor[ff0000]` // returns: true\n});\n```",
        "tip": null,
        "documentation": "https://aoi.js.org/functions/isvalidcolor",
        "source": "https://github.com/aoijs/aoi.js/tree/v6/src/functions/misc/isValidColor.js",
        "type": "Aoi.Js"
    },
    {
        "function": "$isValidHex",
        "description": "$isValidHex will check if the given hex / decimal color is valid.",
        "usage": "$isValidHex[colorResolver]",
        "parameters": [
            {
                "field": "colorResolver",
                "type": "string",
                "description": "Hex / decimal color string.",
                "required": true
            }
        ],
        "example": "This will return `true` as `#30dbd8` is a valid hex color:\n\n```javascript\nclient.command({\n    name: \"isValidHex\",\n    code: `\n  $isValidHex[#30dbd8]\n  `\n});\n```\n\nThis will return `true` as well as `80` is a valid hexadecimal color:\n\n```javascript\nclient.command({\n    name: \"isValidHex\",\n    code: `\n  $isValidHex[80]\n  `\n});\n```",
        "tip": null,
        "documentation": "https://aoi.js.org/functions/isvalidhex",
        "source": "https://github.com/aoijs/aoi.js/tree/v6/src/functions/misc/isValidHex.js",
        "type": "Aoi.Js"
    },
    {
        "function": "$isValidImageLink",
        "description": "$isValidImageLink will check if the given image link is valid.",
        "usage": "$isValidImageLink[URL]",
        "parameters": [
            {
                "field": "URL",
                "type": "string",
                "description": "Direct Image link.",
                "required": true
            }
        ],
        "example": "This will return `true` as the given image link is valid:\n\n```javascript\nclient.command({\n    name: \"isValidImageLink\",\n    code: `\n  $isValidImageLink[https://cdn.discordapp.com/attachments/...]\n  `\n});\n```",
        "tip": null,
        "documentation": "https://aoi.js.org/functions/isvalidimagelink",
        "source": "https://github.com/aoijs/aoi.js/tree/v6/src/functions/misc/isValidImageLink.js",
        "type": "Aoi.Js"
    },
    {
        "function": "$isValidInvite",
        "description": "$isValidInvite will check if the given invite is valid.",
        "usage": "$isValidInvite[inviteResolver]",
        "parameters": [
            {
                "field": "inviteResolver",
                "type": "string",
                "description": "Guild invite link.",
                "required": true
            }
        ],
        "example": "This will return `true` as `https://discord.gg/aoi-js-server-akarui-development-team-773352845738115102` is a valid\ninvite:\n\n```javascript\nclient.command({\n    name: \"isValidInvite\",\n    code: `\n  $isValidInvite[https://discord.gg/aoi-js-server-akarui-development-team-773352845738115102]\n  `\n});\n```",
        "tip": null,
        "documentation": "https://aoi.js.org/functions/isvalidinvite",
        "source": "https://github.com/aoijs/aoi.js/tree/v6/src/functions/misc/isValidInvite.js",
        "type": "Aoi.Js"
    },
    {
        "function": "$isValidLink",
        "description": "$isValidLink will check if the given link is valid.",
        "usage": "$isValidLink[URL]",
        "parameters": [
            {
                "field": "URL",
                "type": "string",
                "description": "Any kind of URL.",
                "required": true
            }
        ],
        "example": "This will return `true` as the given link is valid:\n\n```javascript\nclient.command({\n    name: \"isValidLink\",\n    code: `\n  $isValidLink[https://aoi.js.org/docs/]\n  `\n});\n```",
        "tip": null,
        "documentation": "https://aoi.js.org/functions/isvalidlink",
        "source": "https://github.com/aoijs/aoi.js/tree/v6/src/functions/misc/isValidLink.js",
        "type": "Aoi.Js"
    },
    {
        "function": "$isValidObject",
        "description": "$isValidObject checks if the given json is a valid object.",
        "usage": "$isValidObject[object]",
        "parameters": [
            {
                "field": "object",
                "type": "object",
                "description": "JSON object.",
                "required": true
            }
        ],
        "example": "This will return `true` as the given object is a valid JSON object:\n\n```javascript\nclient.command({\n    name: \"isValidObject\",\n    code: `\n  $isValidObject[{\"name\":\"Leref\", \"aoijs\":\"nice\"}]\n  `\n});\n```",
        "tip": null,
        "documentation": "https://aoi.js.org/functions/isvalidobject",
        "source": "https://github.com/aoijs/aoi.js/tree/v6/src/functions/misc/isValidObject.js",
        "type": "Aoi.Js"
    },
    {
        "function": "$isVariableExist",
        "description": "$isVariableExist checks if a given variable exists in a given table.",
        "usage": "$isVariableExist[variable;table?]",
        "parameters": [
            {
                "field": "variable",
                "type": "string",
                "description": "The variable name.",
                "required": true
            },
            {
                "field": "table",
                "type": "string",
                "description": "The table name.",
                "required": false
            }
        ],
        "example": "This will either true or false depending on if a variable called `Example` exists:\n\n```javascript\nclient.command({\n    name: \"isVariableExist\",\n    code: `\n  $isVariableExist[Example;main]\n  `\n});\n```",
        "tip": null,
        "documentation": "https://aoi.js.org/functions/isvariableexist",
        "source": "https://github.com/aoijs/aoi.js/tree/v6/src/functions/database/isVariableExist.js",
        "type": "Aoi.Js"
    },
    {
        "function": "$isVideoOn",
        "description": "$isVideoOn checks if the given user has their video on in a voice channel.",
        "usage": "$isVideoOn[userID?;guildID?]",
        "parameters": [
            {
                "field": "userID",
                "type": "number",
                "description": "ID of the user who turned video on.",
                "required": false
            },
            {
                "field": "guildID",
                "type": "number",
                "description": "ID of the guild you want to check if they have their video on.",
                "required": false
            }
        ],
        "example": "This will check if you're currently using the video feature in a voice channel:\n\n```javascript\nclient.command({\n    name: \"isVideoOn\",\n    code: `\n  $isVideoOn[$authorID;$guildID]\n  `\n});\n```",
        "tip": null,
        "documentation": "https://aoi.js.org/functions/isvideoon",
        "source": "https://github.com/aoijs/aoi.js/tree/v6/src/functions/guild/isVideoOn.js",
        "type": "Aoi.Js"
    },
    {
        "function": "$isVoice",
        "description": "$isVoice will check if the given channel is a voice channel or not.",
        "usage": "$isVoice[channelID]",
        "parameters": [
            {
                "field": "channelID",
                "type": "number",
                "description": "ID of the channel that you want to check if it's a Voice Channel.",
                "required": true
            }
        ],
        "example": "This will return either `true` or `false` depending on what you use as argument:\n\n```javascript\nclient.command({\n    name: \"isVoice\",\n    code: `\n  $isVoice[$channelID]\n  `\n});\n```",
        "tip": null,
        "documentation": "https://aoi.js.org/functions/isvoice",
        "source": "https://github.com/aoijs/aoi.js/tree/v6/src/functions/guild/isVoice.js",
        "type": "Aoi.Js"
    },
    {
        "function": "$isWidgetEnabled",
        "description": "$isWidgetEnabled will return either true or false depending on if the widget of the guild is enabled.",
        "usage": "$isWidgetEnabled[guildID?]",
        "parameters": [
            {
                "field": "guildID",
                "type": "number",
                "description": "The ID of the guild.",
                "required": false
            }
        ],
        "example": "This will return true or false depending on if the widget is enabled in the current guild:\n\n```javascript\nclient.command({\n    name: \"isWidgetEnabled\",\n    code: `\n  $isWidgetEnabled[$guildID]\n  `\n});\n```",
        "tip": null,
        "documentation": "https://aoi.js.org/functions/iswidgetenabled",
        "source": "https://github.com/aoijs/aoi.js/tree/v6/src/functions/misc/isWidgetEnabled.js",
        "type": "Aoi.Js"
    },
    {
        "function": "$joinSplitText",
        "description": "$joinSplitText will join all text split elements by a given separator.",
        "usage": "$joinSplitText[sep?]",
        "parameters": [
            {
                "field": "sep",
                "type": "number",
                "description": "Separator to separate multiple returned values.",
                "required": false
            }
        ],
        "example": "This will join all text split elements with a comma:\n\n```javascript\nclient.command({\n    name: \"joinSplitText\",\n    code: `\n    $joinSplitText[, ]\n    $textSplit[Hello:Bye:Leref;:]\n    `\n});\n```",
        "tip": null,
        "documentation": "https://aoi.js.org/functions/joinsplittext",
        "source": "https://github.com/aoijs/aoi.js/tree/v6/src/functions/misc/joinSplitText.js",
        "type": "Aoi.Js"
    },
    {
        "function": "$joinThread",
        "description": "$joinThread will make the bot join a specific thread.",
        "usage": "$joinThread[channelID;threadID]",
        "parameters": [
            {
                "field": "channelID",
                "type": "number",
                "description": "The channel ID of where the thread is located in.",
                "required": true
            },
            {
                "field": "threadID",
                "type": "number",
                "description": "The ID of the thread.",
                "required": true
            }
        ],
        "example": "This will create a thread in the current channel and add the bot to it:\n\n```javascript\nclient.command({\n    name: \"joinThread\",\n    code: `\n  $joinThread[$channelID;$get[threadID]]\n  $let[threadID;$createThread[$channelID;Example!;1440;public;$messageID;true]]\n  `\n});\n```",
        "tip": null,
        "documentation": "https://aoi.js.org/functions/jointhread",
        "source": "https://github.com/aoijs/aoi.js/tree/v6/src/functions/guild/joinThread.js",
        "type": "Aoi.Js"
    },
    {
        "function": "$jsonRequest",
        "description": "$jsonRequest will send a GET request to a given URL.",
        "usage": "$jsonRequest[URL;property?;error?;...header?]",
        "parameters": [
            {
                "field": "URL",
                "type": "string",
                "description": "URL you want to get/send data to/from",
                "required": true
            },
            {
                "field": "property",
                "type": "string",
                "description": "Property to return (get method)",
                "required": false
            },
            {
                "field": "error",
                "type": "string",
                "description": "Error to return when request fails",
                "required": false
            },
            {
                "field": "...header",
                "type": "object",
                "description": "Header as JSON",
                "required": false
            }
        ],
        "example": "This will return a random dog fact:\n\n```javascript\nclient.command({\n    name: \"jsonRequest\",\n    code: `\n    $jsonRequest[https://some-random-api.ml/facts/dog;fact;Something went wrong.]\n    `\n});\n```",
        "tip": null,
        "documentation": "https://aoi.js.org/functions/jsonrequest",
        "source": "https://github.com/aoijs/aoi.js/tree/v6/src/functions/misc/jsonRequest.js",
        "type": "Aoi.Js"
    },
    {
        "function": "$kick",
        "description": "$kick will remove a user from a given guild.",
        "usage": "$kick[guildID;userID;reason?]",
        "parameters": [
            {
                "field": "guildID",
                "type": "number",
                "description": "The ID of the guild where the user shall be removed from.",
                "required": true
            },
            {
                "field": "userID",
                "type": "number",
                "description": "The ID of the user which will be removed from the guild.",
                "required": true
            },
            {
                "field": "reason",
                "type": "string",
                "description": "The reason which will be displayed in the guild's audit logs.",
                "required": false
            }
        ],
        "example": "This will kick someone from your guild:\n\n```javascript\nclient.command({\n    name: \"kick\",\n    code: `\n  <@$findMember[$message;false]> has been kicked!\n  $kick[$guildID;$findMember[$message;false];Example reason!]\n  `\n});\n```",
        "tip": null,
        "documentation": "https://aoi.js.org/functions/kick",
        "source": "https://github.com/aoijs/aoi.js/tree/v6/src/functions/guild/kick.js",
        "type": "Aoi.Js"
    },
    {
        "function": "$killClient",
        "description": "$killClient will forcefully shutdown your bot.",
        "usage": "$killClient",
        "parameters": [],
        "example": "This will forcefully shutdown your bot:\n\n```javascript\nclient.command({\n    name: \"killClient\",\n    code: `\n    $killClient\n    `\n});\n```",
        "tip": null,
        "documentation": "https://aoi.js.org/functions/killclient",
        "source": "https://github.com/aoijs/aoi.js/tree/v6/src/functions/client/killClient.js",
        "type": "Aoi.Js"
    },
    {
        "function": "$killShard",
        "description": "$killShard will kill a given shard.",
        "usage": "$killShard[shardID]",
        "parameters": [
            {
                "field": "shardID",
                "type": "number",
                "description": "The shard ID.",
                "required": true
            }
        ],
        "example": "This will kill the current shard (requires [**sharding**](https://aoi.js.org/guides/client/sharding)):\n\n```javascript\nclient.command({\n    name: \"killShard\",\n    code: `\n  $killShard[$shardID]\n  `\n});\n```",
        "tip": null,
        "documentation": "https://aoi.js.org/functions/killshard",
        "source": "https://github.com/aoijs/aoi.js/tree/v6/src/functions/client/killShard.js",
        "type": "Aoi.Js"
    },
    {
        "function": "$leaveThread",
        "description": "$leaveThread will make the bot leave a specific thread.",
        "usage": "$leaveThread[channelID;threadID]",
        "parameters": [
            {
                "field": "channelID",
                "type": "number",
                "description": "The ID of the channel of where the thread is located in.",
                "required": true
            },
            {
                "field": "threadID",
                "type": "number",
                "description": "The ID of the thread.",
                "required": true
            }
        ],
        "example": "This will create a thread and make the bot leave after creation:\n\n```javascript\nclient.command({\n    name: \"leaveThread\",\n    code: `\n  $leaveThread[$channelID;$get[threadID]]\n  $let[threadID;$createThread[$channelID;Example!;1440;public;$messageID;true]]\n  `\n});\n```",
        "tip": null,
        "documentation": "https://aoi.js.org/functions/leavethread",
        "source": "https://github.com/aoijs/aoi.js/tree/v6/src/functions/guild/leaveThread.js",
        "type": "Aoi.Js"
    },
    {
        "function": "$lerefAvatar",
        "description": "$lerefAvatar will return the Avatar of the creator of aoi.js",
        "usage": "$lerefAvatar",
        "parameters": [],
        "example": "This will return the creator's Avatar:\n\n```javascript\nclient.command({\n    name: \"lerefAvatar\",\n    code: `\n    $lerefAvatar\n    `\n});\n```",
        "tip": null,
        "documentation": "https://aoi.js.org/functions/lerefavatar",
        "source": "https://github.com/aoijs/aoi.js/tree/v6/src/functions/misc/lerefAvatar.js",
        "type": "Aoi.Js"
    },
    {
        "function": "$let",
        "description": "$let is used for storing temporary variables.",
        "usage": "$let[varname;value]",
        "parameters": [
            {
                "field": "varname",
                "type": "string",
                "description": "Name of the temporary variable.",
                "required": true
            },
            {
                "field": "value",
                "type": "string",
                "description": "Value of the temporary variable you want to save.",
                "required": true
            }
        ],
        "example": "This will return `Ayaka` from `$get`:\n\n```javascript\nclient.command({\n    name: \"let\",\n    code: `\n$get[genius]\n$let[genius;Ayaka]\n`\n});\n```",
        "tip": null,
        "documentation": "https://aoi.js.org/functions/let",
        "source": "https://github.com/aoijs/aoi.js/tree/v6/src/functions/database/let.js",
        "type": "Aoi.Js"
    },
    {
        "function": "$lockThread",
        "description": "$lockThread will lock a specified thread.",
        "usage": "$lockThread[channelID;threadID;reason?]",
        "parameters": [
            {
                "field": "channelID",
                "type": "number",
                "description": "The ID of the channel where the thread is a parent of.",
                "required": true
            },
            {
                "field": "threadID",
                "type": "number",
                "description": "The ID of the thread which will be locked.",
                "required": true
            },
            {
                "field": "reason",
                "type": "string",
                "description": "The reason which will be displayed in the guild's audit logs.",
                "required": false
            }
        ],
        "example": "This will lock a given thread:\n\n```javascript\nclient.command({\n    name: \"lockThread\",\n    code: `\n  $lockThread[$channelID;threadID;Example reason!]\n  `\n});\n```",
        "tip": null,
        "documentation": "https://aoi.js.org/functions/lockthread",
        "source": "https://github.com/aoijs/aoi.js/tree/v6/src/functions/guild/lockThread.js",
        "type": "Aoi.Js"
    },
    {
        "function": "$log",
        "description": "$log will log a given message in your bot's console.",
        "usage": "$log[content]",
        "parameters": [
            {
                "field": "content",
                "type": "string",
                "description": "Content of the message to log.",
                "required": true
            }
        ],
        "example": "This will log \"Aoi.js is great!\" in your bot's console:\n\n```javascript\nclient.command({\n    name: \"log\",\n    code: `\n    $log[Aoi.js is great!]\n    `\n});\n```",
        "tip": null,
        "documentation": "https://aoi.js.org/functions/log",
        "source": "https://github.com/aoijs/aoi.js/tree/v6/src/functions/misc/log.js",
        "type": "Aoi.Js"
    },
    {
        "function": "$loop",
        "description": "$loop will execute awaited commands a given amount of times.",
        "usage": "$loop[time;awaitData;...awaitedCmds]",
        "parameters": [
            {
                "field": "time",
                "type": "string",
                "description": "How often to execute the loop.",
                "required": true
            },
            {
                "field": "awaitData",
                "type": "object",
                "description": "Awaited Data.",
                "required": true
            },
            {
                "field": "...awaitedCmds",
                "type": "string",
                "description": "Awaited Commands to execute.",
                "required": true
            }
        ],
        "example": "This will execute a loop that will edit the sent message 5 times with the given content in `awaitData`:\n\n```javascript\nclient.command({\n    name: \"loop\",\n    code: `\n    $loop[5;{ \"message\": \"$get[messageID]\", \"channel\": \"$channelID\" };editMessage]\n    $let[messageID;$sendMessage[My ping is: $pingMS;true]]\n    `\n});\n```\n\nWe use `$awaitData` to retrieve the given properties in the `awaitData` field in the loop command.\n\n```javascript\nclient.awaitedCommand({\n    name: \"editMessage\",\n    code: `\n    $editMessage[$awaitData[message];$pingMS;$awaitData[channel]]\n    $wait[5s]\n    `\n});\n```",
        "tip": null,
        "documentation": "https://aoi.js.org/functions/loop",
        "source": "https://github.com/aoijs/aoi.js/tree/v6/src/functions/misc/loop.js",
        "type": "Aoi.Js"
    },
    {
        "function": "$map",
        "description": "$map will execute awaited commands for given elements.",
        "usage": "$map[text;split;awaitedCmds;sep?]",
        "parameters": [
            {
                "field": "text",
                "type": "string",
                "description": "Text.",
                "required": true
            },
            {
                "field": "split",
                "type": "string",
                "description": "true",
                "required": false
            },
            {
                "field": "awaitedCmds",
                "type": "string",
                "description": "Awaited Commands to execute.",
                "required": true
            },
            {
                "field": "sep",
                "type": "string",
                "description": "Separator.",
                "required": false
            }
        ],
        "example": null,
        "tip": null,
        "documentation": "https://aoi.js.org/functions/map",
        "source": "https://github.com/aoijs/aoi.js/tree/v6/src/functions/misc/map.js",
        "type": "Aoi.Js"
    },
    {
        "function": "$math",
        "description": "$math will return a calculated result of the given argument.",
        "usage": "$math[equation]",
        "parameters": [
            {
                "field": "equation",
                "type": "string",
                "description": "Calculation (/\\*-+())",
                "required": true
            }
        ],
        "example": "This will return `205` as `15+5/2*26+(5+120)` equals it:\n\n```javascript\nclient.command({\n    name: \"math\",\n    code: `\n  $math[15+5/2*26+(5+120)]\n  `\n});\n```",
        "tip": null,
        "documentation": "https://aoi.js.org/functions/math",
        "source": "https://github.com/aoijs/aoi.js/tree/v6/src/functions/math/math.js",
        "type": "Aoi.Js"
    },
    {
        "function": "$max",
        "description": "$max will returns the biggest number from the provided numbers.",
        "usage": "$max[...numbers]",
        "parameters": [
            {
                "field": "numbers",
                "type": "number",
                "description": "The numbers where the biggest number will be searched.",
                "required": true
            }
        ],
        "example": "This will return `91` since its the biggest number provided:\n\n```js\nclient.command({\n    name: \"max\",\n    code: `$max[17;42;91;5;63;28;55;10;77;36]`\n});\n```",
        "tip": null,
        "documentation": "https://aoi.js.org/functions/max",
        "source": "https://github.com/aoijs/aoi.js/tree/v6/src/functions/misc/max.js",
        "type": "Aoi.Js"
    },
    {
        "function": "$maxRam",
        "description": "$maxRam will return the bot's maximum amount of Ram.",
        "usage": "$maxRam",
        "parameters": [],
        "example": "This will return your bot's maximum amount of available Ram:\n\n```javascript\nclient.command({\n    name: \"maxRam\",\n    code: `\n  $maxRam\n  `\n});\n```",
        "tip": null,
        "documentation": "https://aoi.js.org/functions/maxram",
        "source": "https://github.com/aoijs/aoi.js/tree/v6/src/functions/misc/maxRam.js",
        "type": "Aoi.Js"
    },
    {
        "function": "$memberAvatar",
        "description": "$memberAvatar will return the profile picture of a guild member.",
        "usage": "$memberAvatar[guildID?;userID?;size?;dynamic?;format?]",
        "parameters": [
            {
                "field": "guildID",
                "type": "number",
                "description": "The ID of the guild.",
                "required": false
            },
            {
                "field": "userID",
                "type": "number",
                "description": "The ID of the user.",
                "required": false
            },
            {
                "field": "size",
                "type": "number",
                "description": "The size of the image.",
                "required": false
            },
            {
                "field": "dynamic",
                "type": "boolean",
                "description": "1. **true** (default) \n2. **false**",
                "required": false
            },
            {
                "field": "format",
                "type": "string",
                "description": "Image format.",
                "required": false
            }
        ],
        "example": "This will return your profile picture:\n\n```javascript\nclient.command({\n    name: \"memberAvatar\",\n    code: `\n  $memberAvatar[$guildID;$authorID;2048;true;webp]\n  `\n});\n```",
        "tip": null,
        "documentation": "https://aoi.js.org/functions/memberavatar",
        "source": "https://github.com/aoijs/aoi.js/tree/v6/src/functions/guild/memberAvatar.js",
        "type": "Aoi.Js"
    },
    {
        "function": "$memberDisplayColor",
        "description": "$memberDisplayColor will return the display color of a given user.",
        "usage": "$memberDisplayColor[guildID?;userID?]",
        "parameters": [
            {
                "field": "guildID",
                "type": "number",
                "description": "The ID of the guild.",
                "required": false
            },
            {
                "field": "userID",
                "type": "number",
                "description": "The ID of the user.",
                "required": false
            }
        ],
        "example": "This will return your display color:\n\n```javascript\nclient.command({\n    name: \"memberDisplayColor\",\n    code: `\n  $memberDisplayColor[$guildID;$authorID]\n  `\n});\n```",
        "tip": null,
        "documentation": "https://aoi.js.org/functions/memberdisplaycolor",
        "source": "https://github.com/aoijs/aoi.js/tree/v6/src/functions/guild/memberDisplayColor.js",
        "type": "Aoi.Js"
    },
    {
        "function": "$memberDisplayName",
        "description": "$memberDisplayName will return the display name of a given user.",
        "usage": "$memberDisplayName[guildID?;userID?]",
        "parameters": [
            {
                "field": "guildID",
                "type": "number",
                "description": "The ID of the guild.",
                "required": false
            },
            {
                "field": "userID",
                "type": "number",
                "description": "The ID of the user.",
                "required": false
            }
        ],
        "example": "This will return your display name, if you have none, it'll return your Discord username:\n\n```javascript\nclient.command({\n    name: \"memberDisplayName\",\n    code: `\n  $memberDisplayName[$guildID;$authorID]\n  `\n});\n```",
        "tip": null,
        "documentation": "https://aoi.js.org/functions/memberdisplayname",
        "source": "https://github.com/aoijs/aoi.js/tree/v6/src/functions/guild/memberDisplayName.js",
        "type": "Aoi.Js"
    },
    {
        "function": "$memberExists",
        "description": "$memberExists will check if a given user is member of the given guild.",
        "usage": "$memberExists[userID;guildID?]",
        "parameters": [
            {
                "field": "userID",
                "type": "number",
                "description": "ID of the user you want to check if they're currently a member of the given server",
                "required": true
            },
            {
                "field": "guildID",
                "type": "number",
                "description": "the server where the user is present in",
                "required": false
            }
        ],
        "example": "This will return `true` as you're currently in this guild:\n\n```javascript\nclient.command({\n    name: \"memberExists\",\n    code: `\n  $memberExists[$authorid;$guildID]\n  `\n});\n```",
        "tip": null,
        "documentation": "https://aoi.js.org/functions/memberexists",
        "source": "https://github.com/aoijs/aoi.js/tree/v6/src/functions/guild/memberExists.js",
        "type": "Aoi.Js"
    },
    {
        "function": "$memberJoinDate",
        "description": "$memberJoinDate will return a members join date in MS.",
        "usage": "$memberJoinDate[userID?;guildID?]",
        "parameters": [
            {
                "field": "userID",
                "type": "number",
                "description": "The ID of the user.",
                "required": false
            },
            {
                "field": "guildID",
                "type": "number",
                "description": "The ID of the guild.",
                "required": false
            }
        ],
        "example": "This will return your join date in MS and parsed date:\n\n```javascript\nclient.command({\n    name: \"memberJoinDate\",\n    code: `\n  $memberJoinDate[$authorID;$guildID] -> $parseDate[$memberJoinDate[$authorID;$guildID]]\n  `\n});\n```",
        "tip": null,
        "documentation": "https://aoi.js.org/functions/memberjoindate",
        "source": "https://github.com/aoijs/aoi.js/tree/v6/src/functions/guild/memberJoinDate.js",
        "type": "Aoi.Js"
    },
    {
        "function": "$memberJoinPosition",
        "description": "$memberJoinPosition will return a member's join position.",
        "usage": "$memberJoinPosition[userID?;guildID?]",
        "parameters": [
            {
                "field": "userID",
                "type": "number",
                "description": "The ID of the user.",
                "required": false
            },
            {
                "field": "guildID",
                "type": "number",
                "description": "The ID of the guild.",
                "required": false
            }
        ],
        "example": "This will return your join position, if you're the owner then it'd be `1`:\n\n```javascript\nclient.command({\n    name: \"memberJoinPosition\",\n    code: `\n  $memberJoinPosition[$authorID;$guildID]\n  `\n});\n```",
        "tip": null,
        "documentation": "https://aoi.js.org/functions/memberjoinposition",
        "source": "https://github.com/aoijs/aoi.js/tree/v6/src/functions/guild/memberJoinPosition.js",
        "type": "Aoi.Js"
    },
    {
        "function": "$memberPremiumSince",
        "description": "$memberPremiumSince will return the timestamp of when the user started boosting the guild.",
        "usage": "$memberPremiumSince[userID?;guildID?]",
        "parameters": [
            {
                "field": "userID",
                "type": "number",
                "description": "The user ID.",
                "required": false
            },
            {
                "field": "guildID",
                "type": "number",
                "description": "The guild ID.",
                "required": false
            }
        ],
        "example": "This will return the timestamp of when you started boosting the guild:\n\n```js\nclient.command({\n    name: \"memberPremiumSince\",\n    code: `$memberPremiumSince[$authorID;$guildID]`\n});\n```",
        "tip": null,
        "documentation": "https://aoi.js.org/functions/memberpremiumsince",
        "source": "https://github.com/aoijs/aoi.js/tree/v6/src/functions/guild/memberPremiumSince.js",
        "type": "Aoi.Js"
    },
    {
        "function": "$membersCount",
        "description": "$membersCount will return a guild's member count.",
        "usage": "$membersCount[guildID?;presence?;countBot?]",
        "parameters": [
            {
                "field": "guildID",
                "type": "number",
                "description": "The ID of the guild.",
                "required": false
            },
            {
                "field": "presence",
                "type": "string",
                "description": "The presence of the users \n1. **all** (default) \n2. **dnd** \n3. **idle** \n4. **offline** \n5. **online**",
                "required": false
            },
            {
                "field": "countBot",
                "type": "boolean",
                "description": "Count bots? \n1. **true** (default) \n2. **false**",
                "required": false
            }
        ],
        "example": "This will return the amount of offline users (including bots) in your guild:\n\n```javascript\nclient.command({\n    name: \"membersCount\",\n    code: `\n  $membersCount[$guildID;offline;true]\n  `\n});\n```",
        "tip": null,
        "documentation": "https://aoi.js.org/functions/memberscount",
        "source": "https://github.com/aoijs/aoi.js/tree/v6/src/functions/guild/membersCount.js",
        "type": "Aoi.Js"
    },
    {
        "function": "$mentionType",
        "description": "$mentionType will return the type of the mention.",
        "usage": "$mentionType[content]",
        "parameters": [
            {
                "field": "content",
                "type": "string",
                "description": "The mention whose mention type will be returned.",
                "required": true
            }
        ],
        "example": "This will return `users` as you're an user:\n\n```javascript\nclient.command({\n    name: \"mentionType\",\n    code: `\n  $mentionType[<@$authorID>]\n  `\n});\n```",
        "tip": null,
        "documentation": "https://aoi.js.org/functions/mentiontype",
        "source": "https://github.com/aoijs/aoi.js/tree/v6/src/functions/misc/mentionType.js",
        "type": "Aoi.Js"
    },
    {
        "function": "$mentioned",
        "description": "$mentioned will return the mentioned user's ID.",
        "usage": "$mentioned[index;returnSelf?]",
        "parameters": [
            {
                "field": "index",
                "type": "number",
                "description": "The index of the argument.",
                "required": true
            },
            {
                "field": "returnSelf",
                "type": "boolean",
                "description": "Return the author's ID if user was not found.",
                "required": false
            }
        ],
        "example": "This will return the ID of the **first** mention, if you attempt to mention someone in this command, or else it will\nreturn your ID:\n\n```javascript\nclient.command({\n    name: \"mentioned\",\n    code: `\n  $mentioned[1;true]\n  `\n});\n```",
        "tip": null,
        "documentation": "https://aoi.js.org/functions/mentioned",
        "source": "https://github.com/aoijs/aoi.js/tree/v6/src/functions/misc/mentioned.js",
        "type": "Aoi.Js"
    },
    {
        "function": "$mentionedChannels",
        "description": "$mentionedChannels will return the ID of a channel retrieved from the mention.",
        "usage": "$mentionedChannels[index;returnSelf?]",
        "parameters": [
            {
                "field": "index",
                "type": "number",
                "description": "The index of the argument.",
                "required": true
            },
            {
                "field": "returnSelf",
                "type": "boolean",
                "description": "Return the ID of the channel where the command was executed in when channel was not found.",
                "required": false
            }
        ],
        "example": "This will return the ID of the **first** mention, if you attempt to mention any channel in this command, or else it will\nreturn the channel ID of the channel where the command was executed in:\n\n```javascript\nclient.command({\n    name: \"mentionedChannels\",\n    code: `\n  $mentionedChannels[1;true]\n  `\n});\n```",
        "tip": null,
        "documentation": "https://aoi.js.org/functions/mentionedchannels",
        "source": "https://github.com/aoijs/aoi.js/tree/v6/src/functions/guild/mentionedChannels.js",
        "type": "Aoi.Js"
    },
    {
        "function": "$mentionedChannelsCount",
        "description": "$mentionedChannelsCount will return the amount of channel mentions within a message.",
        "usage": "$mentionedChannelsCount",
        "parameters": [],
        "example": "This will return the amount of channel mentions in the given text:\n\n```javascript\nclient.command({\n    name: \"mentionedChannelsCount\",\n    code: `\n  $mentionedChannelsCount\n  <#837531672341381190> <#869210515065426012> <#805852932938661900>\n  `\n});\n```",
        "tip": null,
        "documentation": "https://aoi.js.org/functions/mentionedchannelscount",
        "source": "https://github.com/aoijs/aoi.js/tree/v6/src/functions/guild/mentionedChannelsCount.js",
        "type": "Aoi.Js"
    },
    {
        "function": "$mentionedRoles",
        "description": "$mentionedRoles will return the ID of a role retrieved from a message, this works similar as `$mentioned`.",
        "usage": "$mentionedRoles[index]",
        "parameters": [
            {
                "field": "index",
                "type": "number",
                "description": "The index of the argument.",
                "required": true
            }
        ],
        "example": "This will return the ID of the **first** role mention if you attempt to mention any role in this command:\n\n```javascript\nclient.command({\n    name: \"mentionedRoles\",\n    code: `\n  $mentionedRoles[1]\n  `\n});\n```",
        "tip": null,
        "documentation": "https://aoi.js.org/functions/mentionedroles",
        "source": "https://github.com/aoijs/aoi.js/tree/v6/src/functions/misc/mentionedRoles.js",
        "type": "Aoi.Js"
    },
    {
        "function": "$mentionedRolesCount",
        "description": "$mentionedRolesCount will return the amount of role mentions within a message.",
        "usage": "$mentionedRolesCount",
        "parameters": [],
        "example": "This will return the amount of role mentions in the given text:\n\n```javascript\nclient.command({\n    name: \"mentionedRolesCount\",\n    code: `\n  You have: $mentionedRolesCount role mentions in your message!\n`\n});\n```",
        "tip": null,
        "documentation": "https://aoi.js.org/functions/mentionedrolescount",
        "source": "https://github.com/aoijs/aoi.js/tree/v6/src/functions/guild/mentionedRolesCount.js",
        "type": "Aoi.Js"
    },
    {
        "function": "$mentionedUsersCount",
        "description": "$mentionedUsersCount will return the amount of user mentions within a message.",
        "usage": "$mentionedUsersCount",
        "parameters": [],
        "example": "This will return the amount of user mentions in the given text:\n\n```javascript\nclient.command({\n    name: \"mentionedUsersCount\",\n    code: `\n  Amount of user mentions: $mentionedUsersCount\n`\n});\n```",
        "tip": null,
        "documentation": "https://aoi.js.org/functions/mentioneduserscount",
        "source": "https://github.com/aoijs/aoi.js/tree/v6/src/functions/misc/mentionedUsersCount.js",
        "type": "Aoi.Js"
    },
    {
        "function": "$message",
        "description": "$message will return given arguments of a message.",
        "usage": "$message[index?]",
        "parameters": [
            {
                "field": "index",
                "type": "number",
                "description": "Which message argument will be returned, leave it empty to return the whole message.",
                "required": false
            }
        ],
        "example": "This will return your given message:\n\n```javascript\nclient.command({\n    name: \"message\",\n    code: `\n  You said: \"$message\"\n  ` // [prefix]message Hello!\n});\n```",
        "tip": null,
        "documentation": "https://aoi.js.org/functions/message",
        "source": "https://github.com/aoijs/aoi.js/tree/v6/src/functions/misc/message.js",
        "type": "Aoi.Js"
    },
    {
        "function": "$messageAttachment",
        "description": "$messageAttachment will return a message attachment depending on the given index.",
        "usage": "$messageAttachment[index?]",
        "parameters": [
            {
                "field": "index",
                "type": "number",
                "description": "The index of which message attachment will be returned.",
                "required": false
            }
        ],
        "example": "This will return your given attachment:\n\n```javascript\nclient.command({\n    name: \"messageAttachment\",\n    code: `\n  You had the following attachment in your message: $messageAttachment\n  `\n});\n```",
        "tip": null,
        "documentation": "https://aoi.js.org/functions/messageattachment",
        "source": "https://github.com/aoijs/aoi.js/tree/v6/src/functions/misc/messageAttachment.js",
        "type": "Aoi.Js"
    },
    {
        "function": "$messageExists",
        "description": "$messageExists will check if a specific message exists.",
        "usage": "$messageExists[messageID;channelID?]",
        "parameters": [
            {
                "field": "messageID",
                "type": "number",
                "description": "the id of the message",
                "required": true
            },
            {
                "field": "channelID",
                "type": "number",
                "description": "the channel id where the message is located",
                "required": false
            }
        ],
        "example": "This will return `false` as the message doesn't exist in the given channel:\n\n```javascript\nclient.command({\n    name: \"messageExists\",\n    code: `\n  $messageExists[1058998634823299143;$channelID]\n  `\n});\n```",
        "tip": null,
        "documentation": "https://aoi.js.org/functions/messageexists",
        "source": "https://github.com/aoijs/aoi.js/tree/v6/src/functions/misc/messageExists.js",
        "type": "Aoi.Js"
    },
    {
        "function": "$messageFlags",
        "description": "$messageFlags will return a message's flags.",
        "usage": "$messageFlags[messageID;sep?;channelID?]",
        "parameters": [
            {
                "field": "messageID",
                "type": "number",
                "description": "The ID of the message.",
                "required": true
            },
            {
                "field": "sep",
                "type": "string",
                "description": "Separator to separate returned values.",
                "required": false
            },
            {
                "field": "channelID",
                "type": "number",
                "description": "ID of the channel where the message is located in.",
                "required": false
            }
        ],
        "example": "This will the message flags of your initial command message:\n\n```javascript\nclient.command({\n    name: \"messageFlags\",\n    code: `\n  $messageFlags[$messageID;, ;$channelID]\n  `\n});\n```",
        "tip": null,
        "documentation": "https://aoi.js.org/functions/messageflags",
        "source": "https://github.com/aoijs/aoi.js/tree/v6/src/functions/misc/messageFlags.js",
        "type": "Aoi.Js"
    },
    {
        "function": "$messageID",
        "description": "$messageID will return the message ID.",
        "usage": "$messageID",
        "parameters": [],
        "example": "This will return the message ID of the message with which you executed the command:\n\n```javascript\nclient.command({\n    name: \"messageID\",\n    code: `\n  The message ID of your the message you just sent is: \"$messageID\"\n  `\n});\n```",
        "tip": null,
        "documentation": "https://aoi.js.org/functions/messageid",
        "source": "https://github.com/aoijs/aoi.js/tree/v6/src/functions/misc/messageID.js",
        "type": "Aoi.Js"
    },
    {
        "function": "$messagePing",
        "description": "$messagePing will return the latency of the message.",
        "usage": "$messagePing",
        "parameters": [],
        "example": "This will return the latency of your message:\n\n```javascript\nclient.command({\n    name: \"messagePing\",\n    code: `\n  $messagePing\n  `\n});\n```",
        "tip": null,
        "documentation": "https://aoi.js.org/functions/messageping",
        "source": "https://github.com/aoijs/aoi.js/tree/v6/src/functions/misc/messagePing.js",
        "type": "Aoi.Js"
    },
    {
        "function": "$messagePublish",
        "description": "$messagePublish will publish a message in an announcement channel.",
        "usage": "$messagePublish[messageID;channelID?]",
        "parameters": [
            {
                "field": "messageID",
                "type": "number",
                "description": "The ID of the message which should be published.",
                "required": true
            },
            {
                "field": "channelID",
                "type": "number",
                "description": "The ID of the channel where the given message is located in.",
                "required": false
            }
        ],
        "example": "This will publish a message (will only work in announcement channels):\n\n```javascript\nclient.command({\n    name: \"messagePublish\",\n    code: `\n  $messagePublish[$get[msgID];$channelID]\n  $let[msgID;$sendMessage[Hello!;true]]\n  `\n});\n```",
        "tip": null,
        "documentation": "https://aoi.js.org/functions/messagepublish",
        "source": "https://github.com/aoijs/aoi.js/tree/v6/src/functions/misc/messagePublish.js",
        "type": "Aoi.Js"
    },
    {
        "function": "$messageSlice",
        "description": "$messageSlice will slice a message.",
        "usage": "$messageSlice[from;to?]",
        "parameters": [
            {
                "field": "from",
                "type": "number",
                "description": "Starting point where to slice the message.",
                "required": true
            },
            {
                "field": "to",
                "type": "number",
                "description": "Ending point where slicing ends.",
                "required": false
            }
        ],
        "example": "This will slice the message from the first message to the fifth message:\n\n```javascript\nclient.command({\n    name: \"messageSlice\",\n    code: `\n  $messageSlice[1;5]\n  `\n});\n```",
        "tip": null,
        "documentation": "https://aoi.js.org/functions/messageslice",
        "source": "https://github.com/aoijs/aoi.js/tree/v6/src/functions/misc/messageSlice.js",
        "type": "Aoi.Js"
    },
    {
        "function": "$messageType",
        "description": "$messageType will return the type of a given message.",
        "usage": "$messageType[messageID?;channelID?]",
        "parameters": [
            {
                "field": "messageID",
                "type": "number",
                "description": "ID of the message.",
                "required": false
            },
            {
                "field": "channelID",
                "type": "number",
                "description": "ID of the channel where the message is located in.",
                "required": false
            }
        ],
        "example": "This will return the message type of the message which executed the command:\n\n```javascript\nclient.command({\n    name: \"messageType\",\n    code: `\n  $messageType[$messageID;$channelID]\n  `\n});\n```",
        "tip": null,
        "documentation": "https://aoi.js.org/functions/messagetype",
        "source": "https://github.com/aoijs/aoi.js/tree/v6/src/functions/misc/messageType.js",
        "type": "Aoi.Js"
    },
    {
        "function": "$messageURL",
        "description": "$messageURL will return the URL of a given message.",
        "usage": "$messageURL[messageID?;channelID?]",
        "parameters": [
            {
                "field": "messageID",
                "type": "number",
                "description": "ID of the message.",
                "required": false
            },
            {
                "field": "channelID",
                "type": "number",
                "description": "ID of the channel where the message is located in.",
                "required": false
            }
        ],
        "example": "This will return the message URL of the message which executed the command:\n\n```javascript\nclient.command({\n    name: \"messageURL\",\n    code: `\n  $messageURL[$messageID;$channelID]\n  `\n});\n```",
        "tip": null,
        "documentation": "https://aoi.js.org/functions/messageurl",
        "source": "https://github.com/aoijs/aoi.js/tree/v6/src/functions/misc/messageURL.js",
        "type": "Aoi.Js"
    },
    {
        "function": "$messageWebhookID",
        "description": "$messageWebhookID will return the ID of the webhook which sent the given message.",
        "usage": "$messageWebhookID[messageID?;channelID?]",
        "parameters": [
            {
                "field": "messageID",
                "type": "number",
                "description": "ID of the message.",
                "required": false
            },
            {
                "field": "channelID",
                "type": "number",
                "description": "ID of the message where the message is located in.",
                "required": false
            }
        ],
        "example": "This will return the ID of a webhook, make sure to replace \"messageID\" with an actual message ID sent from a webhook:\n\n```javascript\nclient.command({\n    name: \"messageWebhookID\",\n    code: `\n  $messageWebhookID[messageID;$channelID] //replace messageID\n  `\n});\n```",
        "tip": null,
        "documentation": "https://aoi.js.org/functions/messagewebhookid",
        "source": "https://github.com/aoijs/aoi.js/tree/v6/src/functions/misc/messageWebhookID.js",
        "type": "Aoi.Js"
    },
    {
        "function": "$min",
        "description": "$min returns the smallest number from the provided numbers.",
        "usage": "$min[...numbers]",
        "parameters": [
            {
                "field": "numbers",
                "type": "number",
                "description": "The numbers where the smallest number will be searched.",
                "required": true
            }
        ],
        "example": "This will return `5` since it's the smallest number provided:\n\n```js\nclient.command({\n    name: \"min\",\n    code: `$min[17;42;91;5;63;28;55;10;77;36]`\n});\n```",
        "tip": null,
        "documentation": "https://aoi.js.org/functions/min",
        "source": "https://github.com/aoijs/aoi.js/tree/v6/src/functions/misc/min.js",
        "type": "Aoi.Js"
    },
    {
        "function": "$minute",
        "description": "$minute will return the current minute in UTC.",
        "usage": "$minute",
        "parameters": [],
        "example": "This will returns the current minute:\n\n```javascript\nclient.command({\n    name: \"minute\",\n    code: `\n    $minute\n    `\n});\n```\n\nYou can change the timezone using `$timezone`:\n\n```javascript\nclient.command({\n    name: \"minute\",\n    code: `\n    $minute \n    $timezone[America/New_York]\n    ` // returns current minute in New York\n});\n```",
        "tip": null,
        "documentation": "https://aoi.js.org/functions/minute",
        "source": "https://github.com/aoijs/aoi.js/tree/v6/src/functions/misc/minute.js",
        "type": "Aoi.Js"
    },
    {
        "function": "$modifyApplicationCommand",
        "description": "$modifyApplicationCommand will modify an existing application command.",
        "usage": "$modifyApplicationCommand[guildID/global;appID;name:description:type:options:defaultPermission;...options]",
        "parameters": [
            {
                "field": "guild/global",
                "type": "number",
                "description": "Application command type.\n1. **global**\n2. **specific guildID**",
                "required": true
            },
            {
                "field": "appID",
                "type": "number",
                "description": "Application command ID.",
                "required": true
            },
            {
                "field": "...options",
                "type": "string",
                "description": "New data for the application command.",
                "required": true
            }
        ],
        "example": null,
        "tip": null,
        "documentation": "https://aoi.js.org/functions/modifyapplicationcommand",
        "source": "https://github.com/aoijs/aoi.js/tree/v6/src/functions/misc/modifyApplicationCommand.js",
        "type": "Aoi.Js"
    },
    {
        "function": "$modifyChannelPerms",
        "description": "$modifyChannelPerms will modify a given channels permission overrides.",
        "usage": "$modifyChannelPerms[channelID;roruID;...perms]",
        "parameters": [
            {
                "field": "channelID",
                "type": "number",
                "description": "The channel ID of which you're trying to modify its permissions.",
                "required": true
            },
            {
                "field": "roruID",
                "type": "number",
                "description": "The ID of an user or role. ( `$guildID` represents the `@everyone` role. )",
                "required": true
            },
            {
                "field": "...perms",
                "type": "string",
                "description": "The permissions that will be changed.",
                "required": true
            }
        ],
        "example": "This will allow `@everyone` to send messages and add reactions in the current channel:\n\n```javascript\nclient.command({\n    name: \"modifyChannelPerms\",\n    code: `\n  $modifyChannelPerms[$channelID;$guildID;+sendmessages;+addreactions]\n  `\n});\n```",
        "tip": null,
        "documentation": "https://aoi.js.org/functions/modifychannelperms",
        "source": "https://github.com/aoijs/aoi.js/tree/v6/src/functions/guild/modifyChannelPerms.js",
        "type": "Aoi.Js"
    },
    {
        "function": "$modifyEmoji",
        "description": "$modifyEmoji will modify a given custom emoji.",
        "usage": "$modifyEmoji[guildID;emojiID;name;...roles?]",
        "parameters": [
            {
                "field": "guildID",
                "type": "number",
                "description": "The ID of the guild of where the emoji is located in.",
                "required": true
            },
            {
                "field": "emojiID",
                "type": "number",
                "description": "The Emoji ID.",
                "required": true
            },
            {
                "field": "name",
                "type": "string",
                "description": "The new emoji name.",
                "required": true
            },
            {
                "field": "...roles",
                "type": "number",
                "description": "Roles that will be able to use that emoji.",
                "required": false
            }
        ],
        "example": "This will edit a existing emoji / change its name to \"Example\":\n\n```javascript\nclient.command({\n    name: \"modifyEmoji\",\n    code: `\n  $modifyEmoji[$guildID;emojiID;Example]\n  `\n});\n```",
        "tip": null,
        "documentation": "https://aoi.js.org/functions/modifyemoji",
        "source": "https://github.com/aoijs/aoi.js/tree/v6/src/functions/misc/modifyEmoji.js",
        "type": "Aoi.Js"
    },
    {
        "function": "$modifyRole",
        "description": "$modifyRole will modify a given role.",
        "usage": "$modifyRole[guildID;roleID;...data]",
        "parameters": [
            {
                "field": "guildID",
                "type": "number",
                "description": "The guild ID of where the role is located in.",
                "required": true
            },
            {
                "field": "roleID",
                "type": "number",
                "description": "The role ID to modify.",
                "required": true
            },
            {
                "field": "...data",
                "type": "string",
                "description": "New role data.",
                "required": true
            }
        ],
        "example": "This will edit an existing role / change its name to \"Awesome!\":\n\n```javascript\nclient.command({\n    name: \"modifyRole\",\n    code: `\n  $modifyRole[$guildID;roleID;{\n    \"name\": \"Awesome!\"\n  }]\n  `\n});\n```",
        "tip": null,
        "documentation": "https://aoi.js.org/functions/modifyrole",
        "source": "https://github.com/aoijs/aoi.js/tree/v6/src/functions/misc/modifyRole.js",
        "type": "Aoi.Js"
    },
    {
        "function": "$modifyRolePerms",
        "description": "$modifyRolePerms will modify a given role's permissions.",
        "usage": "$modifyRolePerms[guildID;roleID;...perms]",
        "parameters": [
            {
                "field": "guildID",
                "type": "number",
                "description": "The guild ID of where the role is located in.",
                "required": true
            },
            {
                "field": "roleID",
                "type": "number",
                "description": "Role ID of the role which will be modified. / `$guildID` represents the `@everyone` role",
                "required": true
            },
            {
                "field": "...perms",
                "type": "string",
                "description": "Permissions to modify.",
                "required": true
            }
        ],
        "example": "This will edit a existing role's permission and allow the \"@everyone\" role to send messages and add reactions.\n\n```javascript\nclient.command({\n    name: \"modifyRolePerms\",\n    code: `\n  $modifyRolePerms[$guildID;$guildID;+sendmessages;+addreactions]\"\n  }]\n  `\n});\n```",
        "tip": null,
        "documentation": "https://aoi.js.org/functions/modifyroleperms",
        "source": "https://github.com/aoijs/aoi.js/tree/v6/src/functions/misc/modifyRolePerms.js",
        "type": "Aoi.Js"
    },
    {
        "function": "$modifyWebhook",
        "description": "$modifyWebhook will modify a given webhook.",
        "usage": "$modifyWebhook[webhookID;name;avatar;channelID?;reason?]",
        "parameters": [
            {
                "field": "webhookID",
                "type": "number",
                "description": "The webhook ID to modify.",
                "required": true
            },
            {
                "field": "name",
                "type": "string",
                "description": "New webhook name.",
                "required": true
            },
            {
                "field": "avatar",
                "type": "string",
                "description": "New webhook avatar.",
                "required": true
            },
            {
                "field": "channelID",
                "type": "number",
                "description": "ID of the channel where the webhook is located in.",
                "required": false
            },
            {
                "field": "reason",
                "type": "string",
                "description": "Reason that will be displayed in the guild's audit logs.",
                "required": false
            }
        ],
        "example": "This will modify a existing webhook and change it's avatar to your user avatar:\n\n```javascript\nclient.command({\n    name: \"modifyWebhook\",\n    code: `\n  $modifyWebhook[webhookID;Hello!;$userAvatar[$authorID];$channelID;Testing!]\n  `\n});\n```",
        "tip": null,
        "documentation": "https://aoi.js.org/functions/modifywebhook",
        "source": "https://github.com/aoijs/aoi.js/tree/v6/src/functions/misc/modifyWebhook.js",
        "type": "Aoi.Js"
    },
    {
        "function": "$modulo",
        "description": "$modulo operation / the remainder when dividing.",
        "usage": "$modulo[num;num]",
        "parameters": [
            {
                "field": "num",
                "type": "number",
                "description": "Numbers to return the remainder of.",
                "required": true
            }
        ],
        "example": "This will return `2` as it's the remainder of `5 % 3`:\n\n```javascript\nclient.command({\n    name: \"modulo\",\n    code: `\n  $modulo[5;3]\n  `\n});\n```",
        "tip": null,
        "documentation": "https://aoi.js.org/functions/modulo",
        "source": "https://github.com/aoijs/aoi.js/tree/v6/src/functions/misc/modulo.js",
        "type": "Aoi.Js"
    },
    {
        "function": "$month",
        "description": "$month will return the current month.",
        "usage": "$month",
        "parameters": [],
        "example": "This will return the current month:\n\n```javascript\nclient.command({\n    name: \"month\",\n    code: `\n    $month\n    `\n});\n```",
        "tip": null,
        "documentation": "https://aoi.js.org/functions/month",
        "source": "https://github.com/aoijs/aoi.js/tree/v6/src/functions/misc/month.js",
        "type": "Aoi.Js"
    },
    {
        "function": "$moveUser",
        "description": "$moveUser will move a given user between two Voice Channels.",
        "usage": "$moveUser[guildID;userID;channelID;reason?]",
        "parameters": [
            {
                "field": "guildID",
                "type": "number",
                "description": "The guild ID of where the voice channel is located in.",
                "required": true
            },
            {
                "field": "userID",
                "type": "number",
                "description": "The user ID of the user to move.",
                "required": true
            },
            {
                "field": "channelID",
                "type": "number",
                "description": "The Voice Channel ID of where the user will be moved to.",
                "required": true
            },
            {
                "field": "reason",
                "type": "string",
                "description": "Reason that will be displayed in the guild's audit logs.",
                "required": false
            }
        ],
        "example": "This will move a user to another Voice Channel:\n\n```javascript\nclient.command({\n    name: \"moveUser\",\n    code: `\n  $moveUser[$guildID;userID;new voice channel ID;Testing!]\n  `\n});\n```",
        "tip": null,
        "documentation": "https://aoi.js.org/functions/moveuser",
        "source": "https://github.com/aoijs/aoi.js/tree/v6/src/functions/misc/moveUser.js",
        "type": "Aoi.Js"
    },
    {
        "function": "$multi",
        "description": "$multi operation / multiplication.",
        "usage": "$multi[num;num]",
        "parameters": [
            {
                "field": "num",
                "type": "number",
                "description": "Numbers you want to multiply.",
                "required": true
            }
        ],
        "example": "This will return `72` as `8*9` equals that:\n\n```javascript\nclient.command({\n    name: \"multi\",\n    code: `\n  $multi[8;9]\n  `\n});\n```",
        "tip": null,
        "documentation": "https://aoi.js.org/functions/multi",
        "source": "https://github.com/aoijs/aoi.js/tree/v6/src/functions/misc/multi.js",
        "type": "Aoi.Js"
    },
    {
        "function": "$muteUser",
        "description": "$muteUser will mute or unmute a given user in a Voice Channel.",
        "usage": "$muteUser[guildID;userID;mute?;reason?]",
        "parameters": [
            {
                "field": "guildID",
                "type": "number",
                "description": "The guild ID of where the user is located.",
                "required": true
            },
            {
                "field": "userID",
                "type": "number",
                "description": "The user ID of the user to mute/unmute.",
                "required": true
            },
            {
                "field": "mute",
                "type": "boolean",
                "description": "Mute or unmute the user. \n1. **true** (mute / default) \n2. **false** (unmute)",
                "required": false
            },
            {
                "field": "reason",
                "type": "string",
                "description": "Reason that will be displayed in the guild's audit logs.",
                "required": false
            }
        ],
        "example": "This will server mute yourself (must be in a voice channel):\n\n```javascript\nclient.command({\n    name: \"muteUser\",\n    code: `\n  $muteUser[$guildID;$authorID;true]\n  `\n});\n```",
        "tip": null,
        "documentation": "https://aoi.js.org/functions/muteuser",
        "source": "https://github.com/aoijs/aoi.js/tree/v6/src/functions/guild/muteUser.js",
        "type": "Aoi.Js"
    },
    {
        "function": "$newApplicationCmd",
        "description": "$newApplicationCmd gets the data from application Callbacks (update and create one).",
        "usage": "$newApplicationCmd[option]",
        "parameters": [
            {
                "field": "option",
                "type": "string",
                "description": "Option to retrieve.",
                "required": true
            }
        ],
        "example": "```js\nclient.applicationCmdUpdateCommand({\n    channel: \"channelid\",\n    code: `\n    Slash command was updated!\n- Name: $newApplicationCmd[name]\n- ID: $newApplicationCmd[id]\n- Application ID: $newApplicationCmd[applicationID]`\n});\n```\n\n-   This code will execute when **slash command is updated** (Modified)",
        "tip": null,
        "documentation": "https://aoi.js.org/functions/newapplicationcmd",
        "source": "https://github.com/aoijs/aoi.js/tree/v6/src/functions/events/newApplicationCmd.js",
        "type": "Aoi.Js"
    },
    {
        "function": "$newChannel",
        "description": "$newChannel holds data of the updated channel, used in channel update, delete and create events, or else any data will be empty.",
        "usage": "$newChannel[option]",
        "parameters": [
            {
                "field": "option",
                "type": "string",
                "description": "Option to retrieve.",
                "required": true
            }
        ],
        "example": "```js\nclient.channelCreateCommand({\n    channel: \"channelid\",\n    code: `\n    New channel has been created!\n- Name: $newChannel[name]\n- ID: $newChannel[id]\n- <#$newChannel[id]>`\n});\n```\n\n-   This code will execute when **channel is created**.\n\n---\n\n```js\nclient.channelDeleteCommand({\n    channel: \"channelid\",\n    code: `\n    Channel has been deleted!\n- Name: $oldChannel[name]\n- ID: $oldChannel[id]`\n});\n```\n\n-   This code will execute when **channel is deleted**.\n\n---\n\n```js\nclient.channelUpdateCommand({\n    channel: \"channelid\",\n    code: `\n    Channel has been updated!\n- New name: $newChannel[name]\n - Old name: $oldChannel[name]`\n});\n```\n\n-   This code will execute when **channel is updated**.\n\n---",
        "tip": null,
        "documentation": "https://aoi.js.org/functions/newchannel",
        "source": "https://github.com/aoijs/aoi.js/tree/v6/src/functions/events/newChannel.js",
        "type": "Aoi.Js"
    },
    {
        "function": "$newEmoji",
        "description": "$newEmoji holds data for the emoji after it was updated/ deleted. (emojiUpdate and emojiDelete event)",
        "usage": "$newEmoji[option]",
        "parameters": [
            {
                "field": "option",
                "type": "string",
                "description": "Option to retrieve.",
                "required": true
            }
        ],
        "example": null,
        "tip": null,
        "documentation": "https://aoi.js.org/functions/newemoji",
        "source": "https://github.com/aoijs/aoi.js/tree/v6/src/functions/events/newEmoji.js",
        "type": "Aoi.Js"
    },
    {
        "function": "$newEntitlementData",
        "description": "$newEntitlementData will return the new entitlement data",
        "usage": "$newEntitlementData[option]",
        "parameters": [
            {
                "field": "option",
                "type": "string",
                "description": "The data to return.",
                "required": true
            }
        ],
        "example": null,
        "tip": null,
        "documentation": "https://aoi.js.org/functions/newentitlementdata",
        "source": "https://github.com/aoijs/aoi.js/tree/v6/src/functions/events/newEntitlementData.js",
        "type": "Aoi.Js"
    },
    {
        "function": "$newGuild",
        "description": "$newGuild holds data for the guild after the update, might be a good idea to check partial option before accessing any property. (guildUpdate event)",
        "usage": "$newGuild[option]",
        "parameters": [
            {
                "field": "option",
                "type": "string",
                "description": "Option to retrieve.",
                "required": true
            }
        ],
        "example": null,
        "tip": null,
        "documentation": "https://aoi.js.org/functions/newguild",
        "source": "https://github.com/aoijs/aoi.js/tree/v6/src/functions/events/newGuild.js",
        "type": "Aoi.Js"
    },
    {
        "function": "$newMember",
        "description": "$newMember holds data for the member after the update, might be a good idea to check partial option before accessing any property. (memberUpdate event)",
        "usage": "$newMember[option]",
        "parameters": [
            {
                "field": "option",
                "type": "string",
                "description": "Option to retrieve.",
                "required": true
            }
        ],
        "example": "-   **Note: you need `GuildMembers` intent**\n\n```js\nclient.memberUpdateCommand({\n    channel: \"channelid\",\n    code: `\n    $username[$newMember[id]] has updated their nickname!\n- New Nickname: $newMember[nick]\n - Old Nickname: $oldMember[nick]\n \n   $username[$newMember[id]] has updated their name!\n- New Name: $newMember[name]\n - Old Name: $oldMember[name]`\n});\n```\n\n-   This code will execute when **member updates their guild nickname or Discord username**",
        "tip": null,
        "documentation": "https://aoi.js.org/functions/newmember",
        "source": "https://github.com/aoijs/aoi.js/tree/v6/src/functions/events/newMember.js",
        "type": "Aoi.Js"
    },
    {
        "function": "$newPresence",
        "description": "$newPresence holds data of the updated presence.",
        "usage": "$newPresence[option]",
        "parameters": [
            {
                "field": "option",
                "type": "string",
                "description": "Option to retrieve.",
                "required": true
            }
        ],
        "example": null,
        "tip": null,
        "documentation": "https://aoi.js.org/functions/newpresence",
        "source": "https://github.com/aoijs/aoi.js/tree/v6/src/functions/events/newPresence.js",
        "type": "Aoi.Js"
    },
    {
        "function": "$newRole",
        "description": "$newRole holds data of a role that was created, updated, or deleted. Used in role update / delete / create events, or else it won't give any data.",
        "usage": "$newRole[option]",
        "parameters": [
            {
                "field": "option",
                "type": "string",
                "description": "Option to retrieve.",
                "required": true
            }
        ],
        "example": null,
        "tip": null,
        "documentation": "https://aoi.js.org/functions/newrole",
        "source": "https://github.com/aoijs/aoi.js/tree/v6/src/functions/events/newRole.js",
        "type": "Aoi.Js"
    },
    {
        "function": "$newState",
        "description": "$newState holds data for the user voice state after the update (voiceStateUpdate event).",
        "usage": "$newState[option]",
        "parameters": [
            {
                "field": "option",
                "type": "string",
                "description": "Option to retrieve.",
                "required": true
            }
        ],
        "example": null,
        "tip": null,
        "documentation": "https://aoi.js.org/functions/newstate",
        "source": "https://github.com/aoijs/aoi.js/tree/v6/src/functions/events/newState.js",
        "type": "Aoi.Js"
    },
    {
        "function": "$newTicket",
        "description": "$newTicket will create a new ticket channel.",
        "usage": "$newTicket[name;msg;categoryID?;returnId?;error?]",
        "parameters": [
            {
                "field": "name",
                "type": "string",
                "description": "Channel name.",
                "required": true
            },
            {
                "field": "msg",
                "type": "string",
                "description": "Start message.",
                "required": true
            },
            {
                "field": "categoryID",
                "type": "number",
                "description": "Where to place the channel after creation.",
                "required": false
            },
            {
                "field": "returnId",
                "type": "boolean",
                "description": "Return the channel ID \n1. **true** \n2. **false** (default)",
                "required": false
            },
            {
                "field": "error",
                "type": "string",
                "description": "Error to return when something went wrong.",
                "required": false
            }
        ],
        "example": "This will create a new ticket:\n\n```javascript\nclient.command({\n    name: \"newTicket\",\n    code: `\n    $newTicket[ticket-$username;Hello <@$authorID>!;$channelCategoryID;false;Error!]\n    `\n});\n```\n\nThis will create a new ticket and send an embed:\n\n```javascript\nclient.command({\n    name: \"newTicket\",\n    code: `\n    $newTicket[ticket-$username;Hello <@$authorID>! {newEmbed:{description:<@$authorID> opened a new ticket!}};$channelCategoryID;false;Error!]\n    `\n});\n```",
        "tip": null,
        "documentation": "https://aoi.js.org/functions/newticket",
        "source": "https://github.com/aoijs/aoi.js/tree/v6/src/functions/events/newTicket.js",
        "type": "Aoi.Js"
    },
    {
        "function": "$newUser",
        "description": "$newUser holds data of the updated user.",
        "usage": "$newUser[option]",
        "parameters": [
            {
                "field": "option",
                "type": "string",
                "description": "Option to retrieve",
                "required": true
            }
        ],
        "example": null,
        "tip": null,
        "documentation": "https://aoi.js.org/functions/newuser",
        "source": "https://github.com/aoijs/aoi.js/tree/v6/src/functions/events/newUser.js",
        "type": "Aoi.Js"
    },
    {
        "function": "$newVariable",
        "description": "$newVariable gets the data from variable events.",
        "usage": "$newVariable[option;sep?]",
        "parameters": [
            {
                "field": "option",
                "type": "string",
                "description": "Option to retrieve.",
                "required": true
            },
            {
                "field": "sep",
                "type": "string",
                "description": "Separator.",
                "required": false
            }
        ],
        "example": null,
        "tip": null,
        "documentation": "https://aoi.js.org/functions/newvariable",
        "source": "https://github.com/aoijs/aoi.js/tree/v6/src/functions/undefined/newVariable.js",
        "type": "Aoi.Js"
    },
    {
        "function": "$noEscapingMessage",
        "description": "$noEscapingMessage will return the non escaped message.",
        "usage": "$noEscapingMessage[args]",
        "parameters": [
            {
                "field": "args",
                "type": "string",
                "description": "Message position.",
                "required": false
            }
        ],
        "example": "```javascript\nclient.command({\n    name: \"noEscapingMessage\",\n    code: `\n    $noEscapingMessage[1]\n    `\n});\n```",
        "tip": null,
        "documentation": "https://aoi.js.org/functions/noescapingmessage",
        "source": "https://github.com/aoijs/aoi.js/tree/v6/src/functions/misc/noEscapingMessage.js",
        "type": "Aoi.Js"
    },
    {
        "function": "$noMentionMessage",
        "description": "$noMentionMessage will return the part of the message which contains no mention.",
        "usage": "$noMentionMessage[args]",
        "parameters": [
            {
                "field": "args",
                "type": "string",
                "description": "Message position.",
                "required": false
            }
        ],
        "example": "```javascript\nclient.command({\n    name: \"noMentionMessage\",\n    code: `\n    $noMentionMessage[1]\n    `\n});\n```",
        "tip": null,
        "documentation": "https://aoi.js.org/functions/nomentionmessage",
        "source": "https://github.com/aoijs/aoi.js/tree/v6/src/functions/misc/noMentionMessage.js",
        "type": "Aoi.Js"
    },
    {
        "function": "$nodeVersion",
        "description": "$nodeVersion will return your current node.js version.",
        "usage": "$nodeVersion",
        "parameters": [],
        "example": "This will return the current node.js version your bot is running on:\n\n```javascript\nclient.command({\n    name: \"nodeVersion\",\n    code: `\n    $nodeVersion\n    `\n});\n```",
        "tip": null,
        "documentation": "https://aoi.js.org/functions/nodeversion",
        "source": "https://github.com/aoijs/aoi.js/tree/v6/src/functions/misc/nodeVersion.js",
        "type": "Aoi.Js"
    },
    {
        "function": "$nonEscape",
        "description": "$nonEscape will stop escaping special characters.",
        "usage": "$nonEscape[message]",
        "parameters": [
            {
                "field": "message",
                "type": "string",
                "description": "Text you don't want to be escaped.",
                "required": true
            }
        ],
        "example": "This will stop from escaping certain characters:\n\n```javascript\nclient.command({\n    name: \"nonEscape\",\n    code: `\n  $nonEscape[Hello [;)]]\n  `\n});\n```",
        "tip": null,
        "documentation": "https://aoi.js.org/functions/nonescape",
        "source": "https://github.com/aoijs/aoi.js/tree/v6/src/functions/misc/nonEscape.js",
        "type": "Aoi.Js"
    },
    {
        "function": "$numberSeparator",
        "description": "$numberSeparator will separate numbers and make them readable.",
        "usage": "$numberSeparator[num;sep?]",
        "parameters": [
            {
                "field": "num",
                "type": "number",
                "description": "Number you want to separate.",
                "required": true
            },
            {
                "field": "sep",
                "type": "string",
                "description": "Separator which will be used to separate the numbers, default: `,`.",
                "required": false
            }
        ],
        "example": "This will return `1,000,000`:\n\n```javascript\nclient.command({\n    name: \"numberSeparator\",\n    code: `\n  $numberSeparator[1000000;,]\n  `\n});\n```",
        "tip": null,
        "documentation": "https://aoi.js.org/functions/numberseparator",
        "source": "https://github.com/aoijs/aoi.js/tree/v6/src/functions/misc/numberSeparator.js",
        "type": "Aoi.Js"
    },
    {
        "function": "$objectExists",
        "description": "$objectExists will check if a given object exists.",
        "usage": "$objectExists[objectName]",
        "parameters": [
            {
                "field": "objectName",
                "type": "string",
                "description": "The object name.",
                "required": true
            }
        ],
        "example": "This will return true as the object exists created by `$createObject`:\n\n```javascript\nclient.command({\n    name: \"objectExists\",\n    code: `\n    $objectExists[Object Name]\n    $createObject[Object Name;{\"Leref\": \"Ferel\"}]\n    `\n});\n```",
        "tip": null,
        "documentation": "https://aoi.js.org/functions/objectexists",
        "source": "https://github.com/aoijs/aoi.js/tree/v6/src/functions/misc/objectExists.js",
        "type": "Aoi.Js"
    },
    {
        "function": "$objectHasProperty",
        "description": "$objectHasProperty checks if a specified property exists on a given object.",
        "usage": "$objectHasProperty[objectName;property]",
        "parameters": [
            {
                "field": "objectName",
                "type": "string",
                "description": "The name of the object to check.",
                "required": true
            },
            {
                "field": "property",
                "type": "string",
                "description": "The property name to look for.",
                "required": true
            }
        ],
        "example": "This example creates an object named `Name` and then checks if it has the property `Leref`:\n\n```javascript\nclient.command({\n    name: \"objectHasProperty\",\n    code: `\n  $objectHasProperty[Name;Leref] $comment[true]\n\n  $createObject[Name;{\n    \"Leref\": \"Ferel\",\n    \"aoi.js\": \"dbd.js\"\n  }]\n  `\n});\n```",
        "tip": null,
        "documentation": "https://aoi.js.org/functions/objecthasproperty",
        "source": "https://github.com/aoijs/aoi.js/tree/v6/src/functions/misc/objectHasProperty.js",
        "type": "Aoi.Js"
    },
    {
        "function": "$oldApplicationCmd",
        "description": "$oldApplicationCmd gets the data from application Callbacks (update and delete one)",
        "usage": "$oldApplicationCmd[option]",
        "parameters": [
            {
                "field": "option",
                "type": "string",
                "description": "Option to retrieve.",
                "required": true
            }
        ],
        "example": "```js\nclient.applicationCmdUpdateCommand({\n    channel: \"channelid\",\n    code: `\n    Slash command was updated!\n- New Name: $newApplicationCmd[name]\n - Old Name: $oldApplicationCmd[name]\n- New Description: $newApplicationCmd[description]\n - Old Description: $oldApplicationCmd[description]`\n});\n```\n\n-   This code will execute when **slash command is updated** (Modified)",
        "tip": null,
        "documentation": "https://aoi.js.org/functions/oldapplicationcmd",
        "source": "https://github.com/aoijs/aoi.js/tree/v6/src/functions/misc/oldApplicationCmd.js",
        "type": "Aoi.Js"
    },
    {
        "function": "$oldChannel",
        "description": "$oldChannel holds data of the channel before it was updated, used in channel update event, or else any data will be empty",
        "usage": "$oldChannel[option]",
        "parameters": [
            {
                "field": "option",
                "type": "string",
                "description": "Option to retrieve.",
                "required": true
            }
        ],
        "example": "```js\nclient.channelCreateCommand({\n    channel: \"channelid\",\n    code: `\n    New channel has been created!\n- Name: $newChannel[name]\n- ID: $newChannel[id]\n- <#$newChannel[id]>`\n});\n```\n\n-   This code will execute when **channel is created**.\n\n---\n\n```js\nclient.channelDeleteCommand({\n    channel: \"channelid\",\n    code: `\n    Channel has been deleted!\n- Name: $oldChannel[name]\n- ID: $oldChannel[id]`\n});\n```\n\n-   This code will execute when **channel is deleted**.\n\n---\n\n```js\nclient.channelUpdateCommand({\n    channel: \"channelid\",\n    code: `\n    Channel has been updated!\n- New name: $newChannel[name]\n - Old name: $oldChannel[name]`\n});\n```\n\n-   This code will execute when **channel is updated**.\n\n---",
        "tip": null,
        "documentation": "https://aoi.js.org/functions/oldchannel",
        "source": "https://github.com/aoijs/aoi.js/tree/v6/src/functions/guild/oldChannel.js",
        "type": "Aoi.Js"
    },
    {
        "function": "$oldEmoji",
        "description": "$oldEmoji holds data for the emoji before it was updated/ deleted. (emojiUpdate and emojiDelete event)",
        "usage": "$oldEmoji[option]",
        "parameters": [
            {
                "field": "option",
                "type": "string",
                "description": "Option to retrieve.",
                "required": true
            }
        ],
        "example": null,
        "tip": null,
        "documentation": "https://aoi.js.org/functions/oldemoji",
        "source": "https://github.com/aoijs/aoi.js/tree/v6/src/functions/misc/oldEmoji.js",
        "type": "Aoi.Js"
    },
    {
        "function": "$oldEntitlementData",
        "description": "$oldEntitlementData will return the old entitlement data",
        "usage": "$oldEntitlementData[option]",
        "parameters": [
            {
                "field": "option",
                "type": "string",
                "description": "The data to return.",
                "required": true
            }
        ],
        "example": null,
        "tip": null,
        "documentation": "https://aoi.js.org/functions/oldentitlementdata",
        "source": "https://github.com/aoijs/aoi.js/tree/v6/src/functions/events/oldEntitlementData.js",
        "type": "Aoi.Js"
    },
    {
        "function": "$oldGuild",
        "description": "$oldGuild holds data for the guild before it was updated, this is from Discord's cache and might be empty depending on whether it's cached, so use partial option before attempting to access any property. (guildUpdate event)",
        "usage": "$oldGuild[option]",
        "parameters": [
            {
                "field": "option",
                "type": "string",
                "description": "Option to retrieve.",
                "required": true
            }
        ],
        "example": null,
        "tip": null,
        "documentation": "https://aoi.js.org/functions/oldguild",
        "source": "https://github.com/aoijs/aoi.js/tree/v6/src/functions/guild/oldGuild.js",
        "type": "Aoi.Js"
    },
    {
        "function": "$oldMember",
        "description": "$oldMember holds data for the member before it was updated, this is from Discord's cache and might be empty depending on whether it's cached, so use partial option before attempting to access any property. (memberUpdate event)",
        "usage": "$oldMember[option]",
        "parameters": [
            {
                "field": "option",
                "type": "string",
                "description": "Option to retrieve.",
                "required": true
            }
        ],
        "example": "-   **Note: You need `GuildMembers` intent**\n\n```js\nclient.memberUpdateCommand({\n    channel: \"channelid\",\n    code: `\n    $username[$newMember[id]] has updated their nickname!\n- New Nickname: $newMember[nick]\n - Old Nickname: $oldMember[nick]\n \n   $username[$newMember[id]] has updated their name!\n- New Name: $newMember[name]\n - Old Name: $oldMember[name]`\n});\n```\n\n-   This code will execute when **member updates their guild nickname or Discord username**\n\n---",
        "tip": null,
        "documentation": "https://aoi.js.org/functions/oldmember",
        "source": "https://github.com/aoijs/aoi.js/tree/v6/src/functions/guild/oldMember.js",
        "type": "Aoi.Js"
    },
    {
        "function": "$oldMessage",
        "description": "$oldMessage holds the content of the message before it was updated. (if any)",
        "usage": "$oldMessage",
        "parameters": [],
        "example": null,
        "tip": null,
        "documentation": "https://aoi.js.org/functions/oldmessage",
        "source": "https://github.com/aoijs/aoi.js/tree/v6/src/functions/misc/oldMessage.js",
        "type": "Aoi.Js"
    },
    {
        "function": "$oldMsgData",
        "description": "$oldMsgData holds data of the old message.",
        "usage": "$oldMsgData[option]",
        "parameters": [
            {
                "field": "option",
                "type": "string",
                "description": "Option to retrieve.",
                "required": true
            }
        ],
        "example": null,
        "tip": null,
        "documentation": "https://aoi.js.org/functions/oldmsgdata",
        "source": "https://github.com/aoijs/aoi.js/tree/v6/src/functions/misc/oldMsgData.js",
        "type": "Aoi.Js"
    },
    {
        "function": "$oldPresence",
        "description": "$oldPresence holds old data of the user's presence, used in update presence event, or else any data will be empty",
        "usage": "$oldPresence[option]",
        "parameters": [
            {
                "field": "option",
                "type": "string",
                "description": "Option to retrieve.",
                "required": true
            }
        ],
        "example": null,
        "tip": null,
        "documentation": "https://aoi.js.org/functions/oldpresence",
        "source": "https://github.com/aoijs/aoi.js/tree/v6/src/functions/misc/oldPresence.js",
        "type": "Aoi.Js"
    },
    {
        "function": "$oldRole",
        "description": "$oldRole holds data of the role before it was updated, used in role update event, or else any data will be empty.",
        "usage": "$oldRole[option]",
        "parameters": [
            {
                "field": "option",
                "type": "string",
                "description": "Option to retrieve.",
                "required": true
            }
        ],
        "example": null,
        "tip": null,
        "documentation": "https://aoi.js.org/functions/oldrole",
        "source": "https://github.com/aoijs/aoi.js/tree/v6/src/functions/misc/oldRole.js",
        "type": "Aoi.Js"
    },
    {
        "function": "$oldState",
        "description": "$oldState holds data for the user voice state before it was updated (voiceStateUpdate event).",
        "usage": "$oldState[option]",
        "parameters": [
            {
                "field": "option",
                "type": "string",
                "description": "Option to retrieve.",
                "required": true
            }
        ],
        "example": null,
        "tip": null,
        "documentation": "https://aoi.js.org/functions/oldstate",
        "source": "https://github.com/aoijs/aoi.js/tree/v6/src/functions/misc/oldState.js",
        "type": "Aoi.Js"
    },
    {
        "function": "$oldUser",
        "description": "$oldUser holds data of the old user, used in update user event, or else any data will be empty.",
        "usage": "$oldUser[option]",
        "parameters": [
            {
                "field": "option",
                "type": "string",
                "description": "Option to retrieve",
                "required": true
            }
        ],
        "example": null,
        "tip": null,
        "documentation": "https://aoi.js.org/functions/olduser",
        "source": "https://github.com/aoijs/aoi.js/tree/v6/src/functions/misc/oldUser.js",
        "type": "Aoi.Js"
    },
    {
        "function": "$oldVariable",
        "description": "$oldVariable gets the data from variable Callbacks (update and delete one)",
        "usage": "$oldVariable[option;sep?]",
        "parameters": [
            {
                "field": "option",
                "type": "string",
                "description": "Option to retrieve \n1. **variable** \n2. **key** \n3. **value** \n4. **guild** \n5. **for** \n6. **type** \n7. **timestamp**",
                "required": true
            },
            {
                "field": "sep",
                "type": "string",
                "description": "Separator.",
                "required": false
            }
        ],
        "example": null,
        "tip": null,
        "documentation": "https://aoi.js.org/functions/oldvariable",
        "source": "https://github.com/aoijs/aoi.js/tree/v6/src/functions/events/oldVariable.js",
        "type": "Aoi.Js"
    },
    {
        "function": "$onlyClientPerms",
        "description": "$onlyClientPerms will check if the bot has the listed permission and return a error message if not.",
        "usage": "$onlyClientPerms[...perms;error]",
        "parameters": [
            {
                "field": "...perms",
                "type": "string",
                "description": "Permission that the bot requires.",
                "required": true
            },
            {
                "field": "error",
                "type": "string",
                "description": "Error to return when the bot has not the listed permissions.",
                "required": true
            }
        ],
        "example": "This will limit the command to work only when the Bot has administrator permissions:\n\n```javascript\nclient.command({\n    name: \"onlyClientPerms\",\n    code: `\n    Ok.\n    $onlyClientPerms[administrator;I don't have administrator permissions!]\n    `\n});\n```",
        "tip": null,
        "documentation": "https://aoi.js.org/functions/onlyclientperms",
        "source": "https://github.com/aoijs/aoi.js/tree/v6/src/functions/condition/onlyClientPerms.js",
        "type": "Aoi.Js"
    },
    {
        "function": "$onlyForCategories",
        "description": "$onlyForCategories will check if the command was executed in the category of the execution channel and return a error message if not.",
        "usage": "$onlyForCategories[...categoryIDs;error]",
        "parameters": [
            {
                "field": "...categoryIDs",
                "type": "string",
                "description": "Categories you want to limit the command to.",
                "required": true
            },
            {
                "field": "error",
                "type": "string",
                "description": "Error to return when the command was not executed in any of the listed categories.",
                "required": true
            }
        ],
        "example": "This will limit the command only to given channel categories:\n\n```javascript\nclient.command({\n    name: \"onlyForCategories\",\n    code: `\n    Ok.\n    $onlyForCategories[categoryID;categoryID;You can't use that command here!]\n    `\n});\n```",
        "tip": null,
        "documentation": "https://aoi.js.org/functions/onlyforcategories",
        "source": "https://github.com/aoijs/aoi.js/tree/v6/src/functions/condition/onlyForCategories.js",
        "type": "Aoi.Js"
    },
    {
        "function": "$onlyForChannels",
        "description": "$onlyForChannels will check if the command was executed in one of the listed channels and return a error message if not.",
        "usage": "$onlyForChannels[...channelIDs;error]",
        "parameters": [
            {
                "field": "...channelIDs",
                "type": "string",
                "description": "Channels you want to limit the command to.",
                "required": true
            },
            {
                "field": "error",
                "type": "string",
                "description": "Error to return when the command was not executed in any of the listed channels.",
                "required": true
            }
        ],
        "example": "This will limit the command only to the listed channels:\n\n```javascript\nclient.command({\n    name: \"onlyForChannels\",\n    code: `\n    Ok.\n    $onlyForChannels[channelID;channelID;You can't use that command here!]\n    `\n});\n```",
        "tip": null,
        "documentation": "https://aoi.js.org/functions/onlyforchannels",
        "source": "https://github.com/aoijs/aoi.js/tree/v6/src/functions/guild/onlyForChannels.js",
        "type": "Aoi.Js"
    },
    {
        "function": "$onlyForGuilds",
        "description": "$onlyForGuilds will check if the command was executed in one of the listed guilds and return a error message if not.",
        "usage": "$onlyForGuilds[...guildIDs;error]",
        "parameters": [
            {
                "field": "...guildIDs",
                "type": "string",
                "description": "Guilds you want to limit the command to.",
                "required": true
            },
            {
                "field": "error",
                "type": "string",
                "description": "Error to return when the command was not executed in any of the listed guilds.",
                "required": true
            }
        ],
        "example": "This will limit the command only to the listed guilds:\n\n```javascript\nclient.command({\n    name: \"onlyForGuilds\",\n    code: `\n    Ok.\n    $onlyForGuilds[guildID;guildID;You can't use that command here!]\n    `\n});\n```",
        "tip": null,
        "documentation": "https://aoi.js.org/functions/onlyforguilds",
        "source": "https://github.com/aoijs/aoi.js/tree/v6/src/functions/guild/onlyForGuilds.js",
        "type": "Aoi.Js"
    },
    {
        "function": "$onlyForIDs",
        "description": "$onlyForIDs will check if the command was executed by any user of the listed user IDs and return a error if not.",
        "usage": "$onlyForIDs[...userIDs;error]",
        "parameters": [
            {
                "field": "...userIDs",
                "type": "string",
                "description": "Users you want to limit the command to.",
                "required": true
            },
            {
                "field": "error",
                "type": "string",
                "description": "Error to return when the command was not executed by and of the listed users.",
                "required": true
            }
        ],
        "example": "This will limit the command to bot developers only:\n\n```javascript\nclient.command({\n    name: \"onlyForIDs\",\n    code: `\n    You can use this!\n    $onlyForIDs[$clientOwnerIDs;You can't use that command!]\n    `\n});\n```",
        "tip": null,
        "documentation": "https://aoi.js.org/functions/onlyforids",
        "source": "https://github.com/aoijs/aoi.js/tree/v6/src/functions/condition/onlyForIDs.js",
        "type": "Aoi.Js"
    },
    {
        "function": "$onlyForRoles",
        "description": "$onlyForRoles will check if the user who executed the command has any of the listed roles and return a error message if not.",
        "usage": "$onlyForRoles[...roleIDs;error]",
        "parameters": [
            {
                "field": "...roleIDs",
                "type": "string",
                "description": "Roles you want to limit the command to.",
                "required": true
            },
            {
                "field": "error",
                "type": "string",
                "description": "Error to return when the command was not executed by any user with the listed roles.",
                "required": false
            }
        ],
        "example": "This will limit the command only to the listed roles:\n\n```javascript\nclient.command({\n    name: \"onlyForRoles\",\n    code: `\n    Ok.\n    $onlyForRoles[roleID;roleID;You can't use that command!]\n    `\n});\n```",
        "tip": null,
        "documentation": "https://aoi.js.org/functions/onlyforroles",
        "source": "https://github.com/aoijs/aoi.js/tree/v6/src/functions/condition/onlyForRoles.js",
        "type": "Aoi.Js"
    },
    {
        "function": "$onlyIf",
        "description": "$onlyIf will check for a condition and return a error message if that condition does not match.",
        "usage": "$onlyIf[condition;error]",
        "parameters": [
            {
                "field": "condition",
                "type": "string",
                "description": "Condition to check.",
                "required": true
            },
            {
                "field": "error",
                "type": "string",
                "description": "Error to return when condition does not match.",
                "required": false
            }
        ],
        "example": "This will return the error message as 5 does not equal to 3:\n\n```javascript\nclient.command({\n    name: \"onlyIf\",\n    code: `\n    Ok.\n    $onlyIf[5==3;That's wrong!]\n    `\n});\n```",
        "tip": null,
        "documentation": "https://aoi.js.org/functions/onlyif",
        "source": "https://github.com/aoijs/aoi.js/tree/v6/src/functions/condition/onlyIf.js",
        "type": "Aoi.Js"
    },
    {
        "function": "$onlyIfMessageContains",
        "description": "$onlyIfMessageContains will check if the message contains the given text and if not return an error message.",
        "usage": "$onlyIfMessageContains[content;...text;error]",
        "parameters": [
            {
                "field": "content",
                "type": "string",
                "description": "Message which should contain the given text.",
                "required": true
            },
            {
                "field": "text",
                "type": "string",
                "description": "Text to check for in the message.",
                "required": true
            },
            {
                "field": "error",
                "type": "string",
                "description": "Error to return.",
                "required": true
            }
        ],
        "example": "This will return the error message as \"aoi.js\" does not appear in \"Hello!\":\n\n```javascript\nclient.command({\n    name: \"onlyIfMessageContains\",\n    code: `\n    Ok.\n    $onlyIfMessageContains[Hello!;aoi.js;Couldn't find that word!]\n    `\n});\n```",
        "tip": null,
        "documentation": "https://aoi.js.org/functions/onlyifmessagecontains",
        "source": "https://github.com/aoijs/aoi.js/tree/v6/src/functions/condition/onlyIfMessageContains.js",
        "type": "Aoi.Js"
    },
    {
        "function": "$onlyNSFW",
        "description": "$onlyNSFW will check if the command was executed in a NSFW channel and return a error message if not.",
        "usage": "$onlyNSFW[error?]",
        "parameters": [
            {
                "field": "error",
                "type": "string",
                "description": "Error to return when the command was not executed in a NSFW channel.",
                "required": true
            }
        ],
        "example": "This will limit the command only to NSFW channels:\n\n```javascript\nclient.command({\n    name: \"onlyNSFW\",\n    code: `\n    Ok.\n    $onlyNSFW[You can't use that command here!]\n    `\n});\n```",
        "tip": null,
        "documentation": "https://aoi.js.org/functions/onlynsfw",
        "source": "https://github.com/aoijs/aoi.js/tree/v6/src/functions/misc/onlyNSFW.js",
        "type": "Aoi.Js"
    },
    {
        "function": "$onlyPerms",
        "description": "$onlyPerms will check if the user has the listed permission and return a error message if not.",
        "usage": "$onlyPerms[...perms;error]",
        "parameters": [
            {
                "field": "...perms",
                "type": "string",
                "description": "Permission the user requires.",
                "required": true
            },
            {
                "field": "error",
                "type": "string",
                "description": "Error to return when the user has not the listed permissions.",
                "required": true
            }
        ],
        "example": "This will limit the command to work only when the user has administrator permissions:\n\n```javascript\nclient.command({\n    name: \"onlyPerms\",\n    code: `\n    Ok.\n    $onlyPerms[administrator;You don't have administrator permissions!]\n    `\n});\n```",
        "tip": null,
        "documentation": "https://aoi.js.org/functions/onlyperms",
        "source": "https://github.com/aoijs/aoi.js/tree/v6/src/functions/misc/onlyPerms.js",
        "type": "Aoi.Js"
    },
    {
        "function": "$or",
        "description": "$or will check if one of the given conditions is true.",
        "usage": "$or[...conditions]",
        "parameters": [
            {
                "field": "...conditions",
                "type": "string",
                "description": "The conditions you want to check.",
                "required": true
            }
        ],
        "example": "This will check if the two of three given conditions are `true`:\n\n1. `$authorId==$authorId` -> `true`\n2. `1>=1` -> `true`\n3. `$packageVersion==1.0.0` -> `false`\n\nAs you can see, one condition is `false`.\n\n```js\nclient.command({\n    name: \"or\",\n    code: `\n  $or[$authorId==$authorId;1>=1;$packageVersion==1.0.0]` // returns: true\n});\n```\n\nAnother example but with it returning false would be:\n\nThis will check if the three given conditions are `true`:\n\n1. `$authorId==$channelId` -> `false`\n2. `1!=1` -> `false`\n3. `$packageVersion==1.0.0` -> `false`\n\nAs you can see, all conditions are `false`.\n\n```js\nclient.command({\n    name: \"or\",\n    code: `\n  $or[$authorId==$channelId;1!=1;$packageVersion==1.0.0]` // returns: false\n});\n```",
        "tip": null,
        "documentation": "https://aoi.js.org/functions/or",
        "source": "https://github.com/aoijs/aoi.js/tree/v6/src/functions/condition/or.js",
        "type": "Aoi.Js"
    },
    {
        "function": "$ordinal",
        "description": "$ordinal adds st, nd, rd, th to a number such as 1st, 2nd, 3rd, 4th.",
        "usage": "$ordinal[number]",
        "parameters": [
            {
                "field": "number",
                "type": "number",
                "description": "Number which will add `st` `nd` `rd` `th` to it.",
                "required": true
            }
        ],
        "example": "```javascript\nclient.command({\n    name: \"ordinal\",\n    code: `\n  $ordinal[12] -> Returns 12th\n  $ordinal[50] -> Returns 50th\n  $ordinal[11] -> Returns 11th\n  $ordinal[88] -> Returns 88th\n  `\n});\n```",
        "tip": null,
        "documentation": "https://aoi.js.org/functions/ordinal",
        "source": "https://github.com/aoijs/aoi.js/tree/v6/src/functions/misc/ordinal.js",
        "type": "Aoi.Js"
    },
    {
        "function": "$packageDependencies",
        "description": "$packageDependencies will return aoi.js' package dependencies.",
        "usage": "$packageDependencies",
        "parameters": [],
        "example": "This will return aoi.js' package dependencies:\n\n```javascript\nclient.command({\n    name: \"packageDependencies\",\n    code: `\n    $packageDependencies\n    ` // Should return \"@aoijs/aoi.db, @aoijs/aoi.structures, chalk, discord.js, undici\"\n});\n```",
        "tip": null,
        "documentation": "https://aoi.js.org/functions/packagedependencies",
        "source": "https://github.com/aoijs/aoi.js/tree/v6/src/functions/misc/packageDependencies.js",
        "type": "Aoi.Js"
    },
    {
        "function": "$packageVersion",
        "description": "$packageVersion will return your current aoi.js version.",
        "usage": "$packageVersion",
        "parameters": [],
        "example": "This will return your current aoi.js version:\n\n```javascript\nclient.command({\n    name: \"packageVersion\",\n    code: `\n    $packageVersion\n    `\n});\n```",
        "tip": null,
        "documentation": "https://aoi.js.org/functions/packageversion",
        "source": "https://github.com/aoijs/aoi.js/tree/v6/src/functions/misc/packageVersion.js",
        "type": "Aoi.Js"
    },
    {
        "function": "$parseDate",
        "description": "$parseDate will return the date/time for the given milliseconds",
        "usage": "$parseDate[ms;type?]",
        "parameters": [
            {
                "field": "ms",
                "type": "string",
                "description": "Time in ms you want to parse.",
                "required": true
            },
            {
                "field": "type",
                "type": "string",
                "description": "The type in which the parsed date will be returned in.",
                "required": false
            }
        ],
        "example": "This will return your current date in the `date` [format](#types):\n\n```javascript\nclient.command({\n    name: \"parseDate\",\n    code: `\n  $parseDate[$dateStamp;date]\n  `\n});\n```",
        "tip": null,
        "documentation": "https://aoi.js.org/functions/parsedate",
        "source": "https://github.com/aoijs/aoi.js/tree/v6/src/functions/misc/parseDate.js",
        "type": "Aoi.Js"
    },
    {
        "function": "$parseTime",
        "description": "$parseTime will convert any human time to milliseconds.",
        "usage": "$parseTime[time]",
        "parameters": [
            {
                "field": "time",
                "type": "string",
                "description": "The time that will be converted to `ms`.",
                "required": true
            }
        ],
        "example": "This will convert `69 minutes` to milliseconds and return `4140000`:\n\n```javascript\nclient.command({\n    name: \"parseTime\",\n    code: `\n  $parseTime[69m]\n  `\n});\n```\n\nThis will convert `1w 2d 20m` to milliseconds and return `778800000`:\n\n```javascript\nclient.command({\n    name: \"parseTime\",\n    code: `\n  $parseTime[1w 2d 20m]\n  `\n});\n```",
        "tip": null,
        "documentation": "https://aoi.js.org/functions/parsetime",
        "source": "https://github.com/aoijs/aoi.js/tree/v6/src/functions/misc/parseTime.js",
        "type": "Aoi.Js"
    },
    {
        "function": "$partial",
        "description": "$partial checks if the object structure is partial.",
        "usage": "$partial",
        "parameters": [],
        "example": null,
        "tip": null,
        "documentation": "https://aoi.js.org/functions/partial",
        "source": "https://github.com/aoijs/aoi.js/tree/v6/src/functions/misc/partial.js",
        "type": "Aoi.Js"
    },
    {
        "function": "$pinMessage",
        "description": "$pinMessage will pin a given message.",
        "usage": "$pinMessage[messageID?;channelID?]",
        "parameters": [
            {
                "field": "messageID",
                "type": "number",
                "description": "The ID of the message that will be pinned.",
                "required": false
            },
            {
                "field": "channelID",
                "type": "number",
                "description": "The channel ID of where the message is located in.",
                "required": false
            }
        ],
        "example": "This will pin the bot's message:\n\n```javascript\nclient.command({\n    name: \"pinMessage\",\n    code: `\n  $pinMessage[$get[id]]\n  $let[id;$sendMessage[Hello!;true]\n  ` // using $let & $get to save the message ID\n});\n```",
        "tip": null,
        "documentation": "https://aoi.js.org/functions/pinmessage",
        "source": "https://github.com/aoijs/aoi.js/tree/v6/src/functions/misc/pinMessage.js",
        "type": "Aoi.Js"
    },
    {
        "function": "$ping",
        "description": "$ping will return the bot's latency.",
        "usage": "$ping",
        "parameters": [],
        "example": "This will return your bot's latency in MS:\n\n```javascript\nclient.command({\n    name: \"ping\",\n    code: `\n  My ping is: $pingMS!\n  `\n});\n```",
        "tip": null,
        "documentation": "https://aoi.js.org/functions/ping",
        "source": "https://github.com/aoijs/aoi.js/tree/v6/src/functions/misc/ping.js",
        "type": "Aoi.Js"
    },
    {
        "function": "$pinsUpdate",
        "description": "$pinsUpdate holds data for the channel the channel pins were updated in. (channelPinsUpdate event)",
        "usage": "$pinsUpdate[option]",
        "parameters": [
            {
                "field": "option",
                "type": "string",
                "description": "Option to retrieve. \n1. **time** \n2. **channelID** \n3. **channelName** \n4. **channelMention** \n5. **guildID** \n6. **guildName** \n7. **messageID** \n8. **messageContent**",
                "required": true
            }
        ],
        "example": null,
        "tip": null,
        "documentation": "https://aoi.js.org/functions/pinsupdate",
        "source": "https://github.com/aoijs/aoi.js/tree/v6/src/functions/misc/pinsUpdate.js",
        "type": "Aoi.Js"
    },
    {
        "function": "$pow",
        "description": "$pow raises the first number to the power of each subsequent number.",
        "usage": "$pow[number;...numbers]",
        "parameters": [
            {
                "field": "number",
                "type": "number",
                "description": "The first number.",
                "required": true
            },
            {
                "field": "numbers",
                "type": "number",
                "description": "The numbers where the first number will be raised on.",
                "required": true
            }
        ],
        "example": "This will return `16` since 2² is 4 and 4² is 16:\n\n```js\nclient.command({\n    name: \"pow\",\n    code: `$pow[2;2;2]`\n});\n```",
        "tip": null,
        "documentation": "https://aoi.js.org/functions/pow",
        "source": "https://github.com/aoijs/aoi.js/tree/v6/src/functions/misc/pow.js",
        "type": "Aoi.Js"
    },
    {
        "function": "$pruneMembers",
        "description": "$pruneMembers will kick all inactive users who've been inactive for a given amount of time.",
        "usage": "$pruneMembers[days;guildID?;roleIDs?;dry?;reason?;returnCount?]",
        "parameters": [
            {
                "field": "days",
                "type": "number",
                "description": "Number of days to count prune for (1-30, 7 default).",
                "required": true
            },
            {
                "field": "guildID",
                "type": "number",
                "description": "Where members are going to be pruned.",
                "required": false
            },
            {
                "field": "roleIDs",
                "type": "number",
                "description": "Roles to include, split by commas.",
                "required": false
            },
            {
                "field": "dry",
                "type": "boolean",
                "description": "1. **true** \n2. **false** (default)",
                "required": false
            },
            {
                "field": "reason",
                "type": "string",
                "description": "Reason to display in the guild's audit logs.",
                "required": false
            },
            {
                "field": "returnCount",
                "type": "boolean",
                "description": "Return count of pruned members. \n1. **true** \n2. **false** (default)",
                "required": false
            }
        ],
        "example": "This will prune all members who have been inactive for 4 days and return the count of the pruned members that meet those\nrequirements:\n\n```javascript\nclient.command({\n    name: \"pruneMembers\",\n    code: `\n   $pruneMembers[4;$guildID;$guildID;true;Pruning!;true]\n  `\n});\n```",
        "tip": null,
        "documentation": "https://aoi.js.org/functions/prunemembers",
        "source": "https://github.com/aoijs/aoi.js/tree/v6/src/functions/guild/pruneMembers.js",
        "type": "Aoi.Js"
    },
    {
        "function": "$ram",
        "description": "$ram will return the RAM usage of your bot.",
        "usage": "$ram[type?]",
        "parameters": [
            {
                "field": "type",
                "type": "string",
                "description": "type of memory to return",
                "required": false
            }
        ],
        "example": "This will return the RAM usage and the available amount of RAM:\n\n```javascript\nclient.command({\n    name: \"ram\",\n    code: `\n  I'm currently using \\`$ramMB\\` out of \\`$maxRamMB\\`!\n  `\n});\n```",
        "tip": null,
        "documentation": "https://aoi.js.org/functions/ram",
        "source": "https://github.com/aoijs/aoi.js/tree/v6/src/functions/misc/ram.js",
        "type": "Aoi.Js"
    },
    {
        "function": "$random",
        "description": "$random will generate a random number between your chosen span.",
        "usage": "$random[num1;num2;allow?;random?]",
        "parameters": [
            {
                "field": "num1",
                "type": "number",
                "description": "Start of the span.",
                "required": true
            },
            {
                "field": "num2",
                "type": "number",
                "description": "End of the span.",
                "required": true
            },
            {
                "field": "allow",
                "type": "boolean",
                "description": "Allows returning of decimal numbers.",
                "required": false
            },
            {
                "field": "[random?](#advanced-example)",
                "type": "boolean",
                "description": "If the returned number will be random.",
                "required": false
            }
        ],
        "example": "This will return a random number between `20` and `250`:\n\n```javascript\nclient.command({\n    name: \"random\",\n    code: `\n  $random[20;250]\n  `\n});\n```\n\n### Advanced Example\n\nThis will return a random decimal number between `25` and `50`:\n\n```javascript\nclient.command({\n    name: \"random\",\n    code: `\n  $random[25;50;true]  \n  `\n});\n```\n\nThis will return a random number between `45` and `64` and the second `$random` will be random as well:\n\n```javascript\nclient.command({\n    name: \"random\",\n    code: `\n  $random[45;65;false;true]\n  $random[45;65;false;true]\n  `\n});\n```",
        "tip": null,
        "documentation": "https://aoi.js.org/functions/random",
        "source": "https://github.com/aoijs/aoi.js/tree/v6/src/functions/math/random.js",
        "type": "Aoi.Js"
    },
    {
        "function": "$randomChannelID",
        "description": "$randomChannelID will return a random channel ID of all guilds or of a specific guild.",
        "usage": "$randomChannelID[guildID/global?;type?]",
        "parameters": [
            {
                "field": "guildID/global",
                "type": "number",
                "description": "Guild ID or global search.",
                "required": false
            },
            {
                "field": "type",
                "type": "string",
                "description": "Channel type.",
                "required": false
            }
        ],
        "example": "This will return a random channel ID of your guild:\n\n```javascript\nclient.command({\n    name: \"randomChannelID\",\n    code: `\n  <#$randomChannelID[$guildID;all]>\n  `\n});\n```",
        "tip": null,
        "documentation": "https://aoi.js.org/functions/randomchannelid",
        "source": "https://github.com/aoijs/aoi.js/tree/v6/src/functions/guild/randomChannelID.js",
        "type": "Aoi.Js"
    },
    {
        "function": "$randomEmoji",
        "description": "$randomEmoji will return a random emoji ID.",
        "usage": "$randomEmoji",
        "parameters": [],
        "example": "This will return a random emoji ID of your guild:\n\n```javascript\nclient.command({\n    name: \"randomEmoji\",\n    code: `\n  $randomEmoji\n  `\n});\n```",
        "tip": null,
        "documentation": "https://aoi.js.org/functions/randomemoji",
        "source": "https://github.com/aoijs/aoi.js/tree/v6/src/functions/misc/randomEmoji.js",
        "type": "Aoi.Js"
    },
    {
        "function": "$randomRoleID",
        "description": "$randomRoleID will return a random role ID of a given guild.",
        "usage": "$randomRoleID[guildID?]",
        "parameters": [
            {
                "field": "guildID",
                "type": "number",
                "description": "Where it will return the random role ID from.",
                "required": true
            }
        ],
        "example": "This will return a random role ID of your guild:\n\n```javascript\nclient.command({\n    name: \"randomRoleID\",\n    code: `\n  $randomRoleID[$guildID]\n  `\n});\n```",
        "tip": null,
        "documentation": "https://aoi.js.org/functions/randomroleid",
        "source": "https://github.com/aoijs/aoi.js/tree/v6/src/functions/misc/randomRoleID.js",
        "type": "Aoi.Js"
    },
    {
        "function": "$randomShuffle",
        "description": "$randomShuffle shuffles an array randomly.",
        "usage": "$randomShuffle[...text]",
        "parameters": [
            {
                "field": "...text",
                "type": "string",
                "description": "The words to shuffle.",
                "required": true
            }
        ],
        "example": "This will shuffle the given words (this works similar to randomText, but is ALWAYS random no matter what):\n\n```js\nclient.command({\n    name: \"randomShuffle\",\n    code: `\n$randomShuffle[aoi.js;aoi.db;aoi.music]\n`\n});\n```",
        "tip": null,
        "documentation": "https://aoi.js.org/functions/randomshuffle",
        "source": "https://github.com/aoijs/aoi.js/tree/v6/src/functions/misc/randomShuffle.js",
        "type": "Aoi.Js"
    },
    {
        "function": "$randomString",
        "description": "$randomString will generate a random string.",
        "usage": "$randomString[range;diffExec?]",
        "parameters": [
            {
                "field": "range",
                "type": "number",
                "description": "Range of the random generated string.",
                "required": true
            },
            {
                "field": "diffExec",
                "type": "boolean",
                "description": "Return different results?",
                "required": false
            }
        ],
        "example": "This will return a random [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String) of twenty characters:\n\n```javascript\nclient.command({\n    name: \"randomString\",\n    code: `\n  $randomString[20]\n  `\n});\n```",
        "tip": null,
        "documentation": "https://aoi.js.org/functions/randomstring",
        "source": "https://github.com/aoijs/aoi.js/tree/v6/src/functions/misc/randomString.js",
        "type": "Aoi.Js"
    },
    {
        "function": "$randomText",
        "description": "$randomText will return a random word out of the given query",
        "usage": "$randomText[text;text;...]",
        "parameters": [
            {
                "field": "text",
                "type": "string",
                "description": "Any words/sentences/letters you want to be chosen randomly.",
                "required": true
            }
        ],
        "example": "This will return a random text out of `Hello, Bye, Goodnight, See you`:\n\n```javascript\nclient.command({\n    name: \"randomText\",\n    code: `\n  $randomText[Hello;Bye;Goodnight;See you]\n  `\n});\n```",
        "tip": null,
        "documentation": "https://aoi.js.org/functions/randomtext",
        "source": "https://github.com/aoijs/aoi.js/tree/v6/src/functions/misc/randomText.js",
        "type": "Aoi.Js"
    },
    {
        "function": "$randomUserID",
        "description": "$randomUserID will return a random user ID.",
        "usage": "$randomUserID[global/guildID?]",
        "parameters": [
            {
                "field": "global/guildID",
                "type": "string",
                "description": "Return a random user out of all guild or out of one specific guild only.",
                "required": false
            }
        ],
        "example": "This will return a random user ID:\n\n```javascript\nclient.command({\n    name: \"randomUserID\",\n    code: `\n  $randomUserID[global]\n  `\n});\n```",
        "tip": null,
        "documentation": "https://aoi.js.org/functions/randomuserid",
        "source": "https://github.com/aoijs/aoi.js/tree/v6/src/functions/misc/randomUserID.js",
        "type": "Aoi.Js"
    },
    {
        "function": "$rawLeaderboard",
        "description": "$rawLeaderboard will return a leaderboard of the given type.",
        "usage": "$rawLeaderboard[variable;order?;type?;custom?;list?;page?;table?]",
        "parameters": [
            {
                "field": "variable",
                "type": "string",
                "description": "Variable name.",
                "required": true
            },
            {
                "field": "type",
                "type": "string",
                "description": "Variable type \n1. **globalUser** \n2. **user** \n3. **server** \n4. **channel**",
                "required": true
            },
            {
                "field": "order",
                "type": "string",
                "description": "In which order it will be returned \n1. **asc** (ascending / default) \n2. **dsc** (descending)",
                "required": true
            },
            {
                "field": "custom",
                "type": "string",
                "description": "Formatting.",
                "required": false
            },
            {
                "field": "list",
                "type": "number",
                "description": "How many to list.",
                "required": false
            },
            {
                "field": "page",
                "type": "number",
                "description": "Which page to list.",
                "required": false
            },
            {
                "field": "table",
                "type": "string",
                "description": "Variable table.",
                "required": false
            }
        ],
        "example": "This will return a leaderboard of the \"Example\" variable:\n\n```javascript\nclient.command({\n    name: \"rawLeaderboard\",\n    code: `\n    $rawLeaderboard[Example;asc;globalUser;{top} - {username} - {value};10;1;main]\n    `\n});\n```",
        "tip": null,
        "documentation": "https://aoi.js.org/functions/rawleaderboard",
        "source": "https://github.com/aoijs/aoi.js/tree/v6/src/functions/misc/rawLeaderboard.js",
        "type": "Aoi.Js"
    },
    {
        "function": "$reactionCollector",
        "description": "$reactionCollector will create a reaction collector on a given message.",
        "usage": "$reactionCollector[channelID;messageID;userFilters;time;reactions;awaitedCommands;removeReaction?;awaitData?;endAwait?]",
        "parameters": [
            {
                "field": "channelID",
                "type": "number",
                "description": "channel ID",
                "required": true
            },
            {
                "field": "messageID",
                "type": "number",
                "description": "message ID",
                "required": true
            },
            {
                "field": "userFilter",
                "type": "string",
                "description": "to what the bot will reply \n1. **everyone** \n2. **specific user ID** - any user ID",
                "required": true
            },
            {
                "field": "time",
                "type": "string",
                "description": "when the command expires",
                "required": true
            },
            {
                "field": "reactions",
                "type": "string",
                "description": "reactions, you can separate multiple emojis with a comma ( `` )",
                "required": true
            },
            {
                "field": "awaitedCommands",
                "type": "string",
                "description": "commands to execute, you can separate multiple emojis with a comma ( `` )",
                "required": true
            },
            {
                "field": "removeReaction",
                "type": "string",
                "description": "remove the reactions after the commands executed",
                "required": false
            },
            {
                "field": "awaitData",
                "type": "string",
                "description": "awaited data",
                "required": false
            },
            {
                "field": "endAwait",
                "type": "string",
                "description": "end awaited command / awaited command to execute when timer ends",
                "required": false
            }
        ],
        "example": "This will send a message when you add a reaction:\n\n```js\nclient.command({\n    name: \"reactionCollector\",\n    code: `\n  $reactionCollector[$channelID;$splitText[1];$authorID;10m;👀;awaitReaction;;true]\n  $textSplit[$sendMessage[React with \"👀\" for something special!;true]; ]\n  `\n});\n\nclient.awaitedCommand({\n    name: \"awaitReaction\",\n    code: `\n  $sendMessage[👀 what's this?]\n  `\n});\n```",
        "tip": null,
        "documentation": "https://aoi.js.org/functions/reactioncollector",
        "source": "https://github.com/aoijs/aoi.js/tree/v6/src/functions/components/reactionCollector.js",
        "type": "Aoi.Js"
    },
    {
        "function": "$reactionCount",
        "description": "$reactionCount will return the amount of users who reacted to a specific emoji.",
        "usage": "$reactionCount[channelID;messageID;emoji]",
        "parameters": [
            {
                "field": "channelID",
                "type": "number",
                "description": "The ID of the channel where the message is located in.",
                "required": true
            },
            {
                "field": "messageID",
                "type": "number",
                "description": "The ID of the message.",
                "required": true
            },
            {
                "field": "emoji",
                "type": "string",
                "description": "The emoji its reaction count will be returned of.",
                "required": true
            }
        ],
        "example": "This will return the amount of reactions on your message with which you executed the command, will most likely\nreturn `1` due to the bot being the only one who reacted to it:\n\n```javascript\nclient.command({\n    name: \"reactionCount\",\n    code: `\nThere are: $reactionCount[$channelID;$messageID;😫] reactions!\n$addCmdReactions[😫]\n`\n});\n```",
        "tip": null,
        "documentation": "https://aoi.js.org/functions/reactioncount",
        "source": "https://github.com/aoijs/aoi.js/tree/v6/src/functions/components/reactionCount.js",
        "type": "Aoi.Js"
    },
    {
        "function": "$reactionData",
        "description": "$reactionData holds data of a reaction.",
        "usage": "$reactionData[option]",
        "parameters": [
            {
                "field": "option",
                "type": "string",
                "description": "Option to retrieve. \n1. **usernames** \n2. **userIds** \n3. **tags**",
                "required": true
            }
        ],
        "example": null,
        "tip": null,
        "documentation": "https://aoi.js.org/functions/reactiondata",
        "source": "https://github.com/aoijs/aoi.js/tree/v6/src/functions/components/reactionData.js",
        "type": "Aoi.Js"
    },
    {
        "function": "$readFile",
        "description": "$readFile will read a file's content and return it.",
        "usage": "$readFile[path]",
        "parameters": [
            {
                "field": "path",
                "type": "string",
                "description": "File path.",
                "required": true
            }
        ],
        "example": "This will return your main file (index.js):\n\n```javascript\nclient.command({\n    name: \"readFile\",\n    code: `\n    $readFile[./index.js]\n    `\n});\n```",
        "tip": null,
        "documentation": "https://aoi.js.org/functions/readfile",
        "source": "https://github.com/aoijs/aoi.js/tree/v6/src/functions/misc/readFile.js",
        "type": "Aoi.Js"
    },
    {
        "function": "$readyTimestamp",
        "description": "$readyTimestamp will return the timestamp of when the bot was ready.",
        "usage": "$readyTimestamp",
        "parameters": [],
        "example": "This will return the last time your bot started/was ready:\n\n```javascript\nclient.command({\n    name: \"readyTimestamp\",\n    code: `\n  $readyTimestamp\n  `\n});\n```",
        "tip": null,
        "documentation": "https://aoi.js.org/functions/readytimestamp",
        "source": "https://github.com/aoijs/aoi.js/tree/v6/src/functions/misc/readyTimestamp.js",
        "type": "Aoi.Js"
    },
    {
        "function": "$reboot",
        "description": "$reboot will restart your bot.",
        "usage": "$reboot",
        "parameters": [],
        "example": "This will restart your bot:\n\n```javascript\nclient.command({\n    name: \"reboot\",\n    code: `\n    $reboot\n    `\n});\n```",
        "tip": null,
        "documentation": "https://aoi.js.org/functions/reboot",
        "source": "https://github.com/aoijs/aoi.js/tree/v6/src/functions/misc/reboot.js",
        "type": "Aoi.Js"
    },
    {
        "function": "$referenceChannelId",
        "description": "$referenceChannelId will return the channel ID of where the user replied in.",
        "usage": "$referenceChannelId",
        "parameters": [],
        "example": null,
        "tip": null,
        "documentation": "https://aoi.js.org/functions/referencechannelid",
        "source": "https://github.com/aoijs/aoi.js/tree/v6/src/functions/guild/referenceChannelId.js",
        "type": "Aoi.Js"
    },
    {
        "function": "$referenceGuildId",
        "description": "$referenceGuildId will return the guild ID of where the user replied in.",
        "usage": "$referenceGuildId",
        "parameters": [],
        "example": null,
        "tip": null,
        "documentation": "https://aoi.js.org/functions/referenceguildid",
        "source": "https://github.com/aoijs/aoi.js/tree/v6/src/functions/guild/referenceGuildId.js",
        "type": "Aoi.Js"
    },
    {
        "function": "$referenceMessageId",
        "description": "$referenceMessageId will return the message ID of the message where the user replied to.",
        "usage": "$referenceMessageId",
        "parameters": [],
        "example": null,
        "tip": null,
        "documentation": "https://aoi.js.org/functions/referencemessageid",
        "source": "https://github.com/aoijs/aoi.js/tree/v6/src/functions/misc/referenceMessageId.js",
        "type": "Aoi.Js"
    },
    {
        "function": "$referenceUserId",
        "description": "$referenceUserId will return the referenced user of a replied message.",
        "usage": "$referenceUserId",
        "parameters": [],
        "example": "This will return the user ID of whoever you replied to:\n\n```js\nclient.command({\n    name: \"referenceUserId\",\n    code: `\n    $referenceUserId\n    `\n});\n```",
        "tip": null,
        "documentation": "https://aoi.js.org/functions/referenceuserid",
        "source": "https://github.com/aoijs/aoi.js/tree/v6/src/functions/misc/referenceUserId.js",
        "type": "Aoi.Js"
    },
    {
        "function": "$removeComponents",
        "description": "$removeComponents removes a component from a specific message.",
        "usage": "$removeComponents[channelID;messageID;...customIDs]",
        "parameters": [
            {
                "field": "channelID",
                "type": "number",
                "description": "Channel ID of the command that has been executed.",
                "required": true
            },
            {
                "field": "messageID",
                "type": "number",
                "description": "The ID of the message that will remove the component(s).",
                "required": true
            },
            {
                "field": "customIDs",
                "type": "string",
                "description": "The custom id of component that will be removed.",
                "required": true
            }
        ],
        "example": "This will send a message with a button that will be removed after 5 seconds.\n```js\nclient.command({\n    name: \"removeComponents\",\n    code: `\n$removeComponents[$channelID;$get[msgID];customID]\n$wait[5s]\n$let[msgID;$sendMessage[This button will be removed in 5 seconds.\n{actionRow:{button:Button:primary:customID:false}};true]]`\n});\n```",
        "tip": null,
        "documentation": "https://aoi.js.org/functions/removecomponents",
        "source": "https://github.com/aoijs/aoi.js/tree/v6/src/functions/components/removeComponents.js",
        "type": "Aoi.Js"
    },
    {
        "function": "$removeContains",
        "description": "$removeContains will remove specific word(s) from a given text.",
        "usage": "$removeContains[content;...words]",
        "parameters": [
            {
                "field": "content",
                "type": "string",
                "description": "Text where to remove the words from.",
                "required": true
            },
            {
                "field": "...words",
                "type": "string",
                "description": "Word(s) to remove from the text.",
                "required": true
            }
        ],
        "example": "This will remove the word \"aoi.js\" from the given text:\n\n```javascript\nclient.command({\n    name: \"removeContains\",\n    code: `\n    $removeContains[Hello, aoi.js!;, ;aoi.js]\n    `\n});\n```",
        "tip": null,
        "documentation": "https://aoi.js.org/functions/removecontains",
        "source": "https://github.com/aoijs/aoi.js/tree/v6/src/functions/misc/removeContains.js",
        "type": "Aoi.Js"
    },
    {
        "function": "$removeObjectProperty",
        "description": "$removeObjectProperty will remove a property of an object.",
        "usage": "$removeObjectProperty[objectName;...properties]",
        "parameters": [
            {
                "field": "objectName",
                "type": "string",
                "description": "The object name.",
                "required": true
            },
            {
                "field": "...properties",
                "type": "string",
                "description": "Name of the properties.",
                "required": true
            }
        ],
        "example": "This will remove `Object` from the given object:\n\n```javascript\nclient.command({\n    name: \"removeObjectProperty\",\n    code: `\n  $removeObjectProperty[Object Name;Object]\n  $createObject[Object Name;{\"Object\": \"Property\"}]\n  `\n});\n```",
        "tip": null,
        "documentation": "https://aoi.js.org/functions/removeobjectproperty",
        "source": "https://github.com/aoijs/aoi.js/tree/v6/src/functions/misc/removeObjectProperty.js",
        "type": "Aoi.Js"
    },
    {
        "function": "$removeRole",
        "description": "$removeRole will remove a given role from a given member.",
        "usage": "$removeRole[guildID;userID;roleID;reason?]",
        "parameters": [
            {
                "field": "guildID",
                "type": "number",
                "description": "The guild ID of where the user and role is located in.",
                "required": true
            },
            {
                "field": "userID",
                "type": "number",
                "description": "The ID of the user whose role will be removed.",
                "required": true
            },
            {
                "field": "roleID",
                "type": "number",
                "description": "The ID of the role that will be removed.",
                "required": true
            },
            {
                "field": "reason",
                "type": "string",
                "description": "The reason that will be displayed in the guild's audit logs.",
                "required": false
            }
        ],
        "example": "This will remove a given role from yourself (the role must be below the bot's highest role):\n\n```javascript\nclient.command({\n    name: \"removeRole\",\n    code: `\n   $removeRole[$guildID;$authorID;roleID;Some reason.]`\n});\n```",
        "tip": null,
        "documentation": "https://aoi.js.org/functions/removerole",
        "source": "https://github.com/aoijs/aoi.js/tree/v6/src/functions/guild/removeRole.js",
        "type": "Aoi.Js"
    },
    {
        "function": "$removeRoles",
        "description": "$removeRoles will remove one or multiple roles from a given member.",
        "usage": "$removeRoles[guildID;userID;reason?;...roleIDs]",
        "parameters": [
            {
                "field": "guildID",
                "type": "number",
                "description": "The guild ID of where the user and role is located in.",
                "required": true
            },
            {
                "field": "userID",
                "type": "number",
                "description": "The ID of the user whose role will be removed.",
                "required": true
            },
            {
                "field": "reason",
                "type": "string",
                "description": "The reason that will be displayed in the guild's audit logs.",
                "required": false
            },
            {
                "field": "...roleIDs",
                "type": "number",
                "description": "The IDs of the roles that will be removed.",
                "required": true
            }
        ],
        "example": "This will remove given roles from yourself (the roles must be below the bot's highest role):\n\n```javascript\nclient.command({\n    name: \"removeRoles\",\n    code: `\n   $removeRoles[$guildID;$authorID;Some reason..;roleID;roleID;...]`\n});\n```",
        "tip": null,
        "documentation": "https://aoi.js.org/functions/removeroles",
        "source": "https://github.com/aoijs/aoi.js/tree/v6/src/functions/guild/removeRoles.js",
        "type": "Aoi.Js"
    },
    {
        "function": "$removeSplitTextElement",
        "description": "$removeSplitTextElement will remove a specific split text element.",
        "usage": "$removeSplitTextElement[...elements]",
        "parameters": [
            {
                "field": "...elements",
                "type": "string",
                "description": "Split text elements to remove.",
                "required": true
            }
        ],
        "example": "This will remove the word \"bye\" from the array:\n\n```javascript\nclient.command({\n    name: \"removeSplitTextElement\",\n    code: `\n    $removeSplitTextElement[bye]\n    $textSplit[hello, bye, aoi.js;, ]\n    `\n});\n```",
        "tip": null,
        "documentation": "https://aoi.js.org/functions/removesplittextelement",
        "source": "https://github.com/aoijs/aoi.js/tree/v6/src/functions/misc/removeSplitTextElement.js",
        "type": "Aoi.Js"
    },
    {
        "function": "$removeTextSplitElement",
        "description": "$removeTextSplitElement will remove a specific text split element.",
        "usage": "$removeTextSplitElement[element]",
        "parameters": [
            {
                "field": "element",
                "type": "string",
                "description": "Text split element to remove.",
                "required": true
            }
        ],
        "example": "This will remove the word \"bye\" from the array:\n\n```javascript\nclient.command({\n    name: \"removeTextSplitElement\",\n    code: `\n    $removeTextSplitElement[bye]\n    $textSplit[hello, bye, aoi.js;, ]\n    `\n});\n```",
        "tip": null,
        "documentation": "https://aoi.js.org/functions/removetextsplitelement",
        "source": "https://github.com/aoijs/aoi.js/tree/v6/src/functions/misc/removeTextSplitElement.js",
        "type": "Aoi.Js"
    },
    {
        "function": "$removeThreadMember",
        "description": "$removeThreadMember will remove a given thread member from a given thread.",
        "usage": "$removeThreadMember[channelID;threadID;userID;reason?]",
        "parameters": [
            {
                "field": "channelID",
                "type": "number",
                "description": "The ID of the channel of where the thread is located in.",
                "required": true
            },
            {
                "field": "threadID",
                "type": "number",
                "description": "The thread ID.",
                "required": true
            },
            {
                "field": "userID",
                "type": "number",
                "description": "The ID of the user that will be removed from the given thread.",
                "required": true
            },
            {
                "field": "reason",
                "type": "string",
                "description": "Reason that will be displayed in the guild's audit logs.",
                "required": false
            }
        ],
        "example": "This will remove the command author from a given thread:\n\n```javascript\nclient.command({\n    name: \"removeThreadMember\",\n    code: `\n   $removeThreadMember[$channelID;threadID;$authorID;Testing functions!]\n  `\n});\n```",
        "tip": null,
        "documentation": "https://aoi.js.org/functions/removethreadmember",
        "source": "https://github.com/aoijs/aoi.js/tree/v6/src/functions/guild/removeThreadMember.js",
        "type": "Aoi.Js"
    },
    {
        "function": "$renameFile",
        "description": "$renameFile will rename a file in your bot's directory.",
        "usage": "$renameFile[oldFile;newFile]",
        "parameters": [
            {
                "field": "oldFile",
                "type": "string",
                "description": "Old file name.",
                "required": true
            },
            {
                "field": "newFile",
                "type": "string",
                "description": "New file name.",
                "required": true
            }
        ],
        "example": "This will change your index.js to index.txt:\n\n```javascript\nclient.command({\n    name: \"renameFile\",\n    code: `\n    $renameFile[./index.js;./index.txt]\n    `\n});\n```",
        "tip": null,
        "documentation": "https://aoi.js.org/functions/renamefile",
        "source": "https://github.com/aoijs/aoi.js/tree/v6/src/functions/misc/renameFile.js",
        "type": "Aoi.Js"
    },
    {
        "function": "$repeatMessage",
        "description": "$repeatMessage will repeat the given text for a given amount of times.",
        "usage": "$repeatMessage[time;text]",
        "parameters": [
            {
                "field": "time",
                "type": "number",
                "description": "The amount of times the text gets repeated.",
                "required": true
            },
            {
                "field": "text",
                "type": "string",
                "description": "The text that will get repeated.",
                "required": true
            }
        ],
        "example": "This will return `Hello` twenty times:\n\n```javascript\nclient.command({\n    name: \"repeatMessage\",\n    code: `\n  $repeatMessage[20;Hello ]\n  `\n});\n```",
        "tip": null,
        "documentation": "https://aoi.js.org/functions/repeatmessage",
        "source": "https://github.com/aoijs/aoi.js/tree/v6/src/functions/misc/repeatMessage.js",
        "type": "Aoi.Js"
    },
    {
        "function": "$replaceText",
        "description": "$replaceText will replace specific segments of text.",
        "usage": "$replaceText[text;replacer;replaceTo;times?]",
        "parameters": [
            {
                "field": "text",
                "type": "string",
                "description": "Text you want to modify.",
                "required": true
            },
            {
                "field": "replacer",
                "type": "string",
                "description": "The text that will be replaced.",
                "required": true
            },
            {
                "field": "replaceTo",
                "type": "string",
                "description": "The text that will replace `replacer`.",
                "required": true
            },
            {
                "field": "times",
                "type": "number",
                "description": "How many times `replaceTo` replaces `replacer`. / Use `-1` for the last one.",
                "required": false
            }
        ],
        "example": "This will replace `M` with `D` and the output will be `Donkey`:\n\n```javascript\nclient.command({\n    name: \"replaceText\",\n    code: `\n  $replaceText[Monkey;M;D]\n  `\n});\n```\n\n### Advanced Example\n\nThis will replace the word `coffee` two times using the last [field](#parameters) of `$replaceText`:\n\n```javascript\nclient.command({\n    name: \"replaceText\",\n    code: `\n  $replaceText[I love drinking Coffee, Coffee gives me power! Coffee is bad for my health.;Coffee;orange juice;2]\n  `\n});\n```\n\nThis will replace `Ferel` and `are` using multiple `$replaceText`:\n\n```javascript\nclient.command({\n    name: \"replaceText\",\n    code: `\n  $replaceText[$replaceText[Leref and Ferel are the same person.;Ferel;Ayaka];are;are not]\n  `\n});\n```",
        "tip": null,
        "documentation": "https://aoi.js.org/functions/replacetext",
        "source": "https://github.com/aoijs/aoi.js/tree/v6/src/functions/misc/replaceText.js",
        "type": "Aoi.Js"
    },
    {
        "function": "$replaceTextWithRegex",
        "description": "$replaceTextWithRegex will replace specific regex in a text. This works similar as $replaceText.",
        "usage": "$replaceTextWithRegex[text;reg;flags;newText]",
        "parameters": [
            {
                "field": "text",
                "type": "string",
                "description": "Text you want to modify.",
                "required": true
            },
            {
                "field": "reg",
                "type": "string",
                "description": "The regex that will be replaced.",
                "required": true
            },
            {
                "field": "flags",
                "type": "string",
                "description": "[Flags](#flags).",
                "required": true
            },
            {
                "field": "newText",
                "type": "string",
                "description": "The text that will replace `reg`.",
                "required": false
            }
        ],
        "example": "This will replace `more` with `less`:\n\n```javascript\nclient.command({\n    name: \"replaceTextWithRegex\",\n    code: `\n  $replaceTextWithRegex[This function is more complicated than it looks.;more;g;less]\n  `\n});\n```\n\n### Advanced Example\n\nThis will replace `less` with `more`:\n\n```javascript\nclient.command({\n    name: \"replaceTextWithRegex\",\n    code: `\n  $replaceTextWithRegex[This function is more simple than it looks.;less;g;more]\n  `\n});\n```",
        "tip": null,
        "documentation": "https://aoi.js.org/functions/replacetextwithregex",
        "source": "https://github.com/aoijs/aoi.js/tree/v6/src/functions/misc/replaceTextWithRegex.js",
        "type": "Aoi.Js"
    },
    {
        "function": "$reply",
        "description": "$reply will reply to a given message.",
        "usage": "$reply[messageID?;mentionUser?]",
        "parameters": [
            {
                "field": "messageID",
                "type": "number",
                "description": "The ID of the message that will be replied to.",
                "required": false
            },
            {
                "field": "mentionUser",
                "type": "boolean",
                "description": "Mention the author in the reply? \n1. **true** (default) \n2. **false**",
                "required": false
            }
        ],
        "example": "This will reply to your command message:\n\n```javascript\nclient.command({\n    name: \"reply\",\n    code: `\n   Hello!\n   $reply[$messageID;true]\n  `\n});\n```",
        "tip": null,
        "documentation": "https://aoi.js.org/functions/reply",
        "source": "https://github.com/aoijs/aoi.js/tree/v6/src/functions/misc/reply.js",
        "type": "Aoi.Js"
    },
    {
        "function": "$resetGlobalUserVar",
        "description": "$resetGlobalUserVar will set a given global user variable to its default value.",
        "usage": "$resetGlobalUserVar[varname;table?]",
        "parameters": [
            {
                "field": "varname",
                "type": "string",
                "description": "Variable name.",
                "required": true
            },
            {
                "field": "table",
                "type": "string",
                "description": "Variable table.",
                "required": false
            }
        ],
        "example": "This will reset a variable called \"Example\":\n\n```javascript\nclient.command({\n    name: \"resetGlobalUserVar\",\n    code: `\n    $resetGlobalUserVar[Example;main]\n    `\n});\n```",
        "tip": null,
        "documentation": "https://aoi.js.org/functions/resetglobaluservar",
        "source": "https://github.com/aoijs/aoi.js/tree/v6/src/functions/database/resetGlobalUserVar.js",
        "type": "Aoi.Js"
    },
    {
        "function": "$resetGuildVar",
        "description": "$resetGuildVar will set a given guild variable to its default value.",
        "usage": "$resetGuildVar[varname;table?]",
        "parameters": [
            {
                "field": "varname",
                "type": "string",
                "description": "Variable name.",
                "required": true
            },
            {
                "field": "table",
                "type": "string",
                "description": "Variable table.",
                "required": false
            }
        ],
        "example": "This will reset a variable called \"Example\":\n\n```javascript\nclient.command({\n    name: \"resetGuildVar\",\n    code: `\n    $resetGuildVar[Example;main]\n    `\n});\n```",
        "tip": null,
        "documentation": "https://aoi.js.org/functions/resetguildvar",
        "source": "https://github.com/aoijs/aoi.js/tree/v6/src/functions/guild/resetGuildVar.js",
        "type": "Aoi.Js"
    },
    {
        "function": "$resetUserVar",
        "description": "$resetUserVar will set a given user variable to its default value of a given guild.",
        "usage": "$resetUserVar[varname;guildID?;table?]",
        "parameters": [
            {
                "field": "varname",
                "type": "string",
                "description": "Variable name.",
                "required": true
            },
            {
                "field": "guildID",
                "type": "number",
                "description": "Guild ID.",
                "required": false
            },
            {
                "field": "table",
                "type": "string",
                "description": "Variable table.",
                "required": false
            }
        ],
        "example": "This will reset a variable called \"Example\":\n\n```javascript\nclient.command({\n    name: \"resetUserVar\",\n    code: `\n    $resetUserVar[Example;$guildID;main]\n    `\n});\n```",
        "tip": null,
        "documentation": "https://aoi.js.org/functions/resetuservar",
        "source": "https://github.com/aoijs/aoi.js/tree/v6/src/functions/database/resetUserVar.js",
        "type": "Aoi.Js"
    },
    {
        "function": "$resolveColor",
        "description": "$resolveColor will convert a given color to a given type.",
        "usage": "$resolveColor[type;returnAs?;...data]",
        "parameters": [
            {
                "field": "type",
                "type": "string",
                "description": "Which type the input is.",
                "required": true
            },
            {
                "field": "returnAs",
                "type": "string",
                "description": "As what the color will be returned.",
                "required": false
            },
            {
                "field": "...data",
                "type": "string",
                "description": "The data of the RGB or decimal color data.",
                "required": true
            }
        ],
        "example": "This will return `#32a852` as `50, 168, 82` is the RGB value of it:\n\n```javascript\nclient.command({\n    name: \"resolveColor\",\n    code: `\n  $resolveColor[rgb;decimal;50;168;82]\n  `\n});\n```\n\nThis will return `50, 168, 82` as `#32a852` is the hex color of it:\n\n```javascript\nclient.command({\n    name: \"resolveColor\",\n    code: `\n  $resolveColor[decimal;rgb;#32a852]\n  `\n});\n```\n\nThis will return `3319890` as `#32a852` is the hex color of it:\n\n```javascript\nclient.command({\n    name: \"resolveColor\",\n    code: `\n  $resolveColor[decimal;number;#32a852]\n  `\n});\n```",
        "tip": null,
        "documentation": "https://aoi.js.org/functions/resolvecolor",
        "source": "https://github.com/aoijs/aoi.js/tree/v6/src/functions/misc/resolveColor.js",
        "type": "Aoi.Js"
    },
    {
        "function": "$resolveEmojiID",
        "description": "$resolveEmojiID will resolve a certain emoji.",
        "usage": "$resolveEmojiID[emojiResolver]",
        "parameters": [
            {
                "field": "emojiResolver",
                "type": "string",
                "description": "Emoji name or string.",
                "required": true
            }
        ],
        "example": "This will return emojiID:\n\n```javascript\nclient.command({\n    name: \"resolveEmojiID\",\n    code: `\n  $resolveEmojiID[LerefMoney]\n  `\n});\n```",
        "tip": null,
        "documentation": "https://aoi.js.org/functions/resolveemojiid",
        "source": "https://github.com/aoijs/aoi.js/tree/v6/src/functions/misc/resolveEmojiID.js",
        "type": "Aoi.Js"
    },
    {
        "function": "$resolveStickerID",
        "description": "$resolveStickerID will return the ID of the sticker.",
        "usage": "$resolveStickerID[resolver]",
        "parameters": [
            {
                "field": "resolver",
                "type": "string",
                "description": "The name or ID of the sticker.",
                "required": true
            }
        ],
        "example": "This will return the ID of the sticker, replace `resolver` with an actual sticker name or ID:\n\n```js\nclient.command({\n    name: \"resolveStickerID\",\n    code: `$resolveStickerID[resolver]`\n});\n```",
        "tip": null,
        "documentation": "https://aoi.js.org/functions/resolvestickerid",
        "source": "https://github.com/aoijs/aoi.js/tree/v6/src/functions/misc/resolveStickerID.js",
        "type": "Aoi.Js"
    },
    {
        "function": "$respawnAllShards",
        "description": "$respawnAllShards will respawn all shards.",
        "usage": "$respawnAllShards",
        "parameters": [],
        "example": "This will respawn all shards (requires [**sharding**](https://aoi.js.org/guides/client/sharding)):\n\n```javascript\nclient.command({\n    name: \"respawnAllShards\",\n    code: `\n   $respawnAllShards\n  `\n});\n```",
        "tip": null,
        "documentation": "https://aoi.js.org/functions/respawnallshards",
        "source": "https://github.com/aoijs/aoi.js/tree/v6/src/functions/client/respawnAllShards.js",
        "type": "Aoi.Js"
    },
    {
        "function": "$reverse",
        "description": "$reverse will reverse given text.",
        "usage": "$reverse[text]",
        "parameters": [
            {
                "field": "text",
                "type": "string",
                "description": "Text you want to reverse.",
                "required": true
            }
        ],
        "example": "This will return the following text `This text is reversed, if you're able to read this, then congratulations!`:\n\n```javascript\nclient.command({\n    name: \"reverse\",\n    code: `\n  $reverse[!snoitalutargnoc neht ,siht daer ot elba er'uoy fi ,desrever si txet sihT]\n  `\n});\n```",
        "tip": null,
        "documentation": "https://aoi.js.org/functions/reverse",
        "source": "https://github.com/aoijs/aoi.js/tree/v6/src/functions/misc/reverse.js",
        "type": "Aoi.Js"
    },
    {
        "function": "$roleCount",
        "description": "$roleCount will return a guild's role count.",
        "usage": "$roleCount[guildID?;fetchFirst?]",
        "parameters": [
            {
                "field": "guildID",
                "type": "number",
                "description": "The ID of the guild.",
                "required": false
            },
            {
                "field": "fetchFirst",
                "type": "boolean",
                "description": "Fetch the roles first before returning the count? \n1. **true** \n2. **false** (default)",
                "required": false
            }
        ],
        "example": "This will return the amount of roles your guild has:\n\n```javascript\nclient.command({\n    name: \"roleCount\",\n    code: `\n  $roleCount[$guildID;true]\n  `\n});\n```",
        "tip": null,
        "documentation": "https://aoi.js.org/functions/rolecount",
        "source": "https://github.com/aoijs/aoi.js/tree/v6/src/functions/guild/roleCount.js",
        "type": "Aoi.Js"
    },
    {
        "function": "$roleExists",
        "description": "$roleExists will check if a certain role exists within a certain guild.",
        "usage": "$roleExists[roleResolver;guildID?]",
        "parameters": [
            {
                "field": "roleResolver",
                "type": "number",
                "description": "ID of the role you want to check if it exists.",
                "required": true
            },
            {
                "field": "guildID",
                "type": "number",
                "description": "ID of the guild where the role exists.",
                "required": false
            }
        ],
        "example": "This will return `false` as this role doesn't exist in your guild:\n\n```javascript\nclient.command({\n    name: \"roleExists\",\n    code: `\n  $roleExists[900004369355931729;$guildID]\n  `\n});\n```",
        "tip": null,
        "documentation": "https://aoi.js.org/functions/roleexists",
        "source": "https://github.com/aoijs/aoi.js/tree/v6/src/functions/guild/roleExists.js",
        "type": "Aoi.Js"
    },
    {
        "function": "$roleId",
        "description": "$roleId will return the ID of a role.",
        "usage": "$roleId[roleResolver;guildID?]",
        "parameters": [
            {
                "field": "roleResolver",
                "type": "string",
                "description": "Name of the role.",
                "required": true
            },
            {
                "field": "guildID",
                "type": "string",
                "description": "ID of the guild where the role was created in.",
                "required": false
            }
        ],
        "example": "This will return the role ID of a role called `Owner` (this example won't work if you don't have that role):\n\n```javascript\nclient.command({\n    name: \"roleId\",\n    code: `\n  $roleId[Owner;$guildID]\n  `\n});\n```",
        "tip": null,
        "documentation": "https://aoi.js.org/functions/roleid",
        "source": "https://github.com/aoijs/aoi.js/tree/v6/src/functions/guild/roleId.js",
        "type": "Aoi.Js"
    },
    {
        "function": "$roleMembersCount",
        "description": "$roleMembersCount will return the amount of members who have a specific role.",
        "usage": "$roleMembersCount[roleID;guildID?]",
        "parameters": [
            {
                "field": "roleID",
                "type": "number",
                "description": "The role ID.",
                "required": true
            },
            {
                "field": "guildID",
                "type": "number",
                "description": "The guild ID.",
                "required": false
            }
        ],
        "example": "This will return the amount of users who have a specific role:\n\n```javascript\nclient.command({\n    name: \"roleMembersCount\",\n    code: `\n  $roleMembersCount[$guildID;$guildID]\n  `\n});\n```",
        "tip": null,
        "documentation": "https://aoi.js.org/functions/rolememberscount",
        "source": "https://github.com/aoijs/aoi.js/tree/v6/src/functions/guild/roleMembersCount.js",
        "type": "Aoi.Js"
    },
    {
        "function": "$roleName",
        "description": "$roleName will return the name of a specific role.",
        "usage": "$roleName[roleID;guildID?]",
        "parameters": [
            {
                "field": "roleID",
                "type": "number",
                "description": "The role ID of which you want the role name to be returned of.",
                "required": true
            },
            {
                "field": "guildID",
                "type": "number",
                "description": "The guild ID.",
                "required": false
            }
        ],
        "example": "This will return the role name of any role you may like, in this case, It would return `@everyone`:\n\n```javascript\nclient.command({\n    name: \"roleName\",\n    code: `\n  \\`$roleName[$guildID]\\`\n  `\n});\n```",
        "tip": null,
        "documentation": "https://aoi.js.org/functions/rolename",
        "source": "https://github.com/aoijs/aoi.js/tree/v6/src/functions/guild/roleName.js",
        "type": "Aoi.Js"
    },
    {
        "function": "$rolePerms",
        "description": "$rolePerms will return all permissions of a given role.",
        "usage": "$rolePerms[roleID;sep?;guildID?]",
        "parameters": [
            {
                "field": "roleID",
                "type": "number",
                "description": "The role ID.",
                "required": true
            },
            {
                "field": "sep",
                "type": "number",
                "description": "Separator to separate multiple returned values.",
                "required": false
            },
            {
                "field": "guildID",
                "type": "number",
                "description": "The guild ID.",
                "required": false
            }
        ],
        "example": "This will return the permissions for the `@everyone` role:\n\n```javascript\nclient.command({\n    name: \"rolePerms\",\n    code: `\n  $rolePerms[$guildID;, ;$guildID]\n  `\n});\n```",
        "tip": null,
        "documentation": "https://aoi.js.org/functions/roleperms",
        "source": "https://github.com/aoijs/aoi.js/tree/v6/src/functions/guild/rolePerms.js",
        "type": "Aoi.Js"
    },
    {
        "function": "$rolePosition",
        "description": "$rolePosition will return the role position of a specific role.",
        "usage": "$rolePosition[roleID;guildID?]",
        "parameters": [
            {
                "field": "roleID",
                "type": "number",
                "description": "The role ID.",
                "required": true
            },
            {
                "field": "guildID",
                "type": "number",
                "description": "The guild ID.",
                "required": false
            }
        ],
        "example": "This will return the role position of any role you might like, for this example, we'll use the `@everyone` role:\n\n```javascript\nclient.command({\n    name: \"rolePosition\",\n    code: `\n  $rolePosition[$guildID]\n  `\n});\n```",
        "tip": null,
        "documentation": "https://aoi.js.org/functions/roleposition",
        "source": "https://github.com/aoijs/aoi.js/tree/v6/src/functions/guild/rolePosition.js",
        "type": "Aoi.Js"
    },
    {
        "function": "$root",
        "description": "$root will return the root of a given number.",
        "usage": "$root[number;root]",
        "parameters": [
            {
                "field": "number",
                "type": "number",
                "description": "The number of which you want the root of.",
                "required": true
            },
            {
                "field": "root",
                "type": "number",
                "description": "The root.",
                "required": true
            }
        ],
        "example": "This will calculate the root of 7:\n\n```js\nclient.command({\n    name: \"root\",\n    code: `\n  $root[7;2]` // returns: 2.6457513110645907\n});\n```",
        "tip": null,
        "documentation": "https://aoi.js.org/functions/root",
        "source": "https://github.com/aoijs/aoi.js/tree/v6/src/functions/math/root.js",
        "type": "Aoi.Js"
    },
    {
        "function": "$round",
        "description": "$round will round to the next whole number.",
        "usage": "$round[number]",
        "parameters": [
            {
                "field": "number",
                "type": "number",
                "description": "Number to round.",
                "required": true
            }
        ],
        "example": "This will return `556` as it's the next number to `555.78`:\n\n```javascript\nclient.command({\n    name: \"round\",\n    code: `\n  $round[555.78]\n  `\n});\n```",
        "tip": null,
        "documentation": "https://aoi.js.org/functions/round",
        "source": "https://github.com/aoijs/aoi.js/tree/v6/src/functions/misc/round.js",
        "type": "Aoi.Js"
    },
    {
        "function": "$roundTenth",
        "description": "$roundTenth will round to the next tenth.",
        "usage": "$roundTenth[number;decimalPosition]",
        "parameters": [
            {
                "field": "number",
                "type": "number",
                "description": "Number to round.",
                "required": true
            },
            {
                "field": "decimalPosition",
                "type": "number",
                "description": "How many numbers after the comma will be returned.",
                "required": true
            }
        ],
        "example": "This will return `503.70` as it's the nearest number to `503.6972`:\n\n```javascript\nclient.command({\n    name: \"roundTenth\",\n    code: `\n  $roundTenth[503.6972;2]\n  `\n});\n```",
        "tip": null,
        "documentation": "https://aoi.js.org/functions/roundtenth",
        "source": "https://github.com/aoijs/aoi.js/tree/v6/src/functions/misc/roundTenth.js",
        "type": "Aoi.Js"
    },
    {
        "function": "$second",
        "description": "$second will return the current second in UTC.",
        "usage": "$second",
        "parameters": [],
        "example": "This will returns the current second:\n\n```javascript\nclient.command({\n    name: \"second\",\n    code: `\n    $second\n    `\n});\n```\n\nYou can change the timezone using `$timezone`:\n\n```javascript\nclient.command({\n    name: \"second\",\n    code: `\n    $second \n    $timezone[America/New_York]\n    ` // returns current second in New York\n});\n```",
        "tip": null,
        "documentation": "https://aoi.js.org/functions/second",
        "source": "https://github.com/aoijs/aoi.js/tree/v6/src/functions/misc/second.js",
        "type": "Aoi.Js"
    },
    {
        "function": "$sendCrosspostingMessage",
        "description": "$sendCrosspostingMessage will crosspost a given message to the given channels.",
        "usage": "$sendCrosspostingMessage[content;...channelIDs]",
        "parameters": [
            {
                "field": "content",
                "type": "string",
                "description": "The message to send.",
                "required": true
            },
            {
                "field": "...channelIDs",
                "type": "number",
                "description": "Where to send the given message.",
                "required": true
            }
        ],
        "example": "This will crosspost a message to multiple channels in your server:\n\n```javascript\nclient.command({\n    name: \"sendCrosspostingMessage\",\n    code: `\n   $sendCrosspostingMessage[Hello!;$channelID;$randomChannelID]\n  `\n});\n```",
        "tip": null,
        "documentation": "https://aoi.js.org/functions/sendcrosspostingmessage",
        "source": "https://github.com/aoijs/aoi.js/tree/v6/src/functions/misc/sendCrosspostingMessage.js",
        "type": "Aoi.Js"
    },
    {
        "function": "$sendDm",
        "description": "$sendDm will Direct Message a given user.",
        "usage": "$sendDm[message;userID?;returnID?]",
        "parameters": [
            {
                "field": "message",
                "type": "string",
                "description": "The content of the Direct Message.",
                "required": true
            },
            {
                "field": "userID",
                "type": "string",
                "description": "The user that will receive the DM.",
                "required": false
            },
            {
                "field": "returnID",
                "type": "boolean",
                "description": "Return message ID? \n1. **true** \n2. **false** (default)",
                "required": false
            }
        ],
        "example": "This will send a DM to the command author:\n\n```javascript\nclient.command({\n    name: \"sendDm\",\n    code: `\n   $sendDm[Hello!;$authorID;false]  \n  `\n});\n```",
        "tip": null,
        "documentation": "https://aoi.js.org/functions/senddm",
        "source": "https://github.com/aoijs/aoi.js/tree/v6/src/functions/misc/sendDm.js",
        "type": "Aoi.Js"
    },
    {
        "function": "$sendMessage",
        "description": "$sendMessage will send a message in the execution channel.",
        "usage": "$sendMessage[content;returnID?]",
        "parameters": [
            {
                "field": "content",
                "type": "string",
                "description": "Message Content to send.",
                "required": true
            },
            {
                "field": "returnID",
                "type": "boolean",
                "description": "Return message ID? \n1. **true** \n2. **false** (default)",
                "required": false
            }
        ],
        "example": "This will send a message in the current channel:\n\n```javascript\nclient.command({\n    name: \"sendMessage\",\n    code: `\n   $sendMessage[Hello!;false]  \n  `\n});\n```\n\nThis will send an embed in the current channel using parsers:\n\n```javascript\nclient.command({\n    name: \"sendMessage\",\n    code: `\n   $sendMessage[Hello! {newEmbed:{title:Bonjour!}};false]  \n  `\n});\n```",
        "tip": null,
        "documentation": "https://aoi.js.org/functions/sendmessage",
        "source": "https://github.com/aoijs/aoi.js/tree/v6/src/functions/misc/sendMessage.js",
        "type": "Aoi.Js"
    },
    {
        "function": "$sendSticker",
        "description": "$sendSticker will send a sticker in the execution channel.",
        "usage": "$sendSticker[resolver]",
        "parameters": [
            {
                "field": "resolver",
                "type": "string",
                "description": "The name or ID of the sticker.",
                "required": true
            }
        ],
        "example": "This will send the sticker to the current channel, replace `resolver` with an actual sticker name or ID:\n\n```js\nclient.command({\n    name: \"sendSticker\",\n    code: `$sendSticker[resolver]`\n});\n```",
        "tip": null,
        "documentation": "https://aoi.js.org/functions/sendsticker",
        "source": "https://github.com/aoijs/aoi.js/tree/v6/src/functions/misc/sendSticker.js",
        "type": "Aoi.Js"
    },
    {
        "function": "$sendTTS",
        "description": "$sendTTS will send a text-to-speech message in a given channel.",
        "usage": "$sendTTS[channelID;message;returnID?]",
        "parameters": [
            {
                "field": "channelID",
                "type": "number",
                "description": "The ID of the channel where the Text-To-Speech message will be sent.",
                "required": true
            },
            {
                "field": "message",
                "type": "string",
                "description": "The content of the TTS message.",
                "required": true
            },
            {
                "field": "returnID",
                "type": "boolean",
                "description": "Return message ID? \n1. **true** \n2. **false** (default)",
                "required": false
            }
        ],
        "example": "This will send a TTS message in the current channel:\n\n```javascript\nclient.command({\n    name: \"sendTTS\",\n    code: `\n   $sendTTS[$channelID;Hello!;false]\n  `\n});\n```",
        "tip": null,
        "documentation": "https://aoi.js.org/functions/sendtts",
        "source": "https://github.com/aoijs/aoi.js/tree/v6/src/functions/misc/sendTTS.js",
        "type": "Aoi.Js"
    },
    {
        "function": "$sendWebhookMessage",
        "description": "$sendWebhookMessage will send a message using an existing webhook.",
        "usage": "$sendWebhookMessage[webhookID;webhookToken;content;returnID?]",
        "parameters": [
            {
                "field": "webhookID",
                "type": "number",
                "description": "The webhook ID.",
                "required": true
            },
            {
                "field": "webhookToken",
                "type": "string",
                "description": "The webhook Token.",
                "required": true
            },
            {
                "field": "content",
                "type": "string",
                "description": "The content of the message to send.",
                "required": true
            },
            {
                "field": "returnID",
                "type": "boolean",
                "description": "Return message ID? \n1. **true** \n2. **false** (default)",
                "required": false
            }
        ],
        "example": "This will create a webhook and send a message using it:\n\n```javascript\nclient.command({\n    name: \"sendWebhookMessage\",\n    code: `\n   $sendWebhookMessage[$splitText[1];$splitText[2];Hello!;false]\n   $textSplit[$createWebhook[$channelID;$username;$userAvatar;Testing!;,];,]\n  ` /* Using $textSplit to split the ID and Token in separate parts to use it in sendWebhookMessage\n  $splitText[1] equals the webhook ID \n  $splitText[2] equals the webhook Token\n  */\n});\n```",
        "tip": null,
        "documentation": "https://aoi.js.org/functions/sendwebhookmessage",
        "source": "https://github.com/aoijs/aoi.js/tree/v6/src/functions/misc/sendWebhookMessage.js",
        "type": "Aoi.Js"
    },
    {
        "function": "$setAutomodActions",
        "description": "$setAutomodActions will set the taken action for the provided automod rule.",
        "usage": "$setAutomodActions[type;channel;durationSeconds;customMessage?]",
        "parameters": [
            {
                "field": "type",
                "type": "string",
                "description": "The action type.",
                "required": true
            },
            {
                "field": "channel",
                "type": "number",
                "description": "The log channel.",
                "required": true
            },
            {
                "field": "durationSeconds",
                "type": "number",
                "description": "The duration of the timeout in seconds.",
                "required": true
            },
            {
                "field": "customMessage",
                "type": "string",
                "description": "The custom message to display.",
                "required": true
            }
        ],
        "example": "This will create a new automod rule with the BlockMessage action.\n\n```javascript\nclient.command({\n    name: \"setAutomodActions\",\n    code: `\n    $createAutomodRule[$guildid;Automod Rule;true;Creating a new rule!]\n    $setAutomodPreset[Slurs]\n    $setAutomodType[Keyword]\n    $setAutomodActions[BlockMessage;$channelId;60;You tried to say slurs, you got blocked!]  \n    `\n});\n```",
        "tip": null,
        "documentation": "https://aoi.js.org/functions/setautomodactions",
        "source": "https://github.com/aoijs/aoi.js/tree/v6/src/functions/misc/setAutomodActions.js",
        "type": "Aoi.Js"
    },
    {
        "function": "$setAutomodAllowList",
        "description": "$setAutomodAllowList will allow words for the given automod rule.",
        "usage": "$setAutomodAllowList[...words]",
        "parameters": [
            {
                "field": "...words",
                "type": "string",
                "description": "The words to whitelist.",
                "required": true
            }
        ],
        "example": "This will create a new automod rule with the BlockMessage action and two whitelisted words.\n\n```javascript\nclient.command({\n    name: \"setAutomodAllowList\",\n    code: `\n    $createAutomodRule[$guildid;Automod Rule;true;Creating a new rule!]\n    $setAutomodPreset[Slurs]\n    $setAutomodType[Keyword]\n    $setAutomodAllowList[Leref;Ayaka]\n    $setAutomodActions[BlockMessage;$channelId;60;You tried to say slurs, you got blocked!]  \n    `\n});\n```",
        "tip": null,
        "documentation": "https://aoi.js.org/functions/setautomodallowlist",
        "source": "https://github.com/aoijs/aoi.js/tree/v6/src/functions/misc/setAutomodAllowList.js",
        "type": "Aoi.Js"
    },
    {
        "function": "$setAutomodExemptChannels",
        "description": "$setAutomodExemptChannels will exclude channels for the given automod rule.",
        "usage": "$setAutomodExemptChannels[...channels]",
        "parameters": [
            {
                "field": "...channels",
                "type": "number",
                "description": "The channels to exclude.",
                "required": true
            }
        ],
        "example": "This will create a new automod rule with the BlockMessage action and two excluded channels.\n\n```javascript\nclient.command({\n    name: \"setAutomodExemptChannels\",\n    code: `\n    $createAutomodRule[$guildid;Automod Rule;true;Creating a new rule!]\n    $setAutomodPreset[Slurs]\n    $setAutomodType[Keyword]\n    $setAutomodExemptChannels[$channelId;$randomChannelId]\n    $setAutomodActions[BlockMessage;$channelId;60;You tried to say slurs, you got blocked!]  \n    `\n});\n```",
        "tip": null,
        "documentation": "https://aoi.js.org/functions/setautomodexemptchannels",
        "source": "https://github.com/aoijs/aoi.js/tree/v6/src/functions/misc/setAutomodExemptChannels.js",
        "type": "Aoi.Js"
    },
    {
        "function": "$setAutomodExemptRoles",
        "description": "$setAutomodExemptRoles will exclude roles for the given automod rule.",
        "usage": "$setAutomodExemptRoles[...roles]",
        "parameters": [
            {
                "field": "...roles",
                "type": "number",
                "description": "The roles to exclude.",
                "required": true
            }
        ],
        "example": "This will create a new automod rule with the BlockMessage action and one excluded role.\n\n```javascript\nclient.command({\n    name: \"setAutomodExemptRoles\",\n    code: `\n    $createAutomodRule[$guildid;Automod Rule;true;Creating a new rule!]\n    $setAutomodPreset[Slurs]\n    $setAutomodType[Keyword]\n    $setAutomodExemptRoles[$findRole[Support]]\n    $setAutomodActions[BlockMessage;$channelId;60;You tried to say slurs, you got blocked!]  \n    `\n});\n```",
        "tip": null,
        "documentation": "https://aoi.js.org/functions/setautomodexemptroles",
        "source": "https://github.com/aoijs/aoi.js/tree/v6/src/functions/misc/setAutomodExemptRoles.js",
        "type": "Aoi.Js"
    },
    {
        "function": "$setAutomodKeywordFilter",
        "description": "$setAutomodKeywordFilter will disallow words for the given automod rule.",
        "usage": "$setAutomodKeywordFilter[...words]",
        "parameters": [
            {
                "field": "...words",
                "type": "string",
                "description": "The words to blacklist.",
                "required": true
            }
        ],
        "example": "This will create a new automod rule with the BlockMessage action and two blacklisted words.\n\n```javascript\nclient.command({\n    name: \"setAutomodKeywordFilter\",\n    code: `\n    $createAutomodRule[$guildid;Automod Rule;true;Creating a new rule!]\n    $setAutomodPreset[Slurs]\n    $setAutomodType[Keyword]\n    $setAutomodKeywordFilter[Leref;Ayaka]\n    $setAutomodActions[BlockMessage;$channelId;60;You tried to say slurs, you got blocked!]  \n    `\n});\n```",
        "tip": null,
        "documentation": "https://aoi.js.org/functions/setautomodkeywordfilter",
        "source": "https://github.com/aoijs/aoi.js/tree/v6/src/functions/misc/setAutomodKeywordFilter.js",
        "type": "Aoi.Js"
    },
    {
        "function": "$setAutomodMentionRaidProtection",
        "description": "$setAutomodMentionRaidProtection will enable mention raid protection for the given automod rule.",
        "usage": "$setAutomodMentionRaidProtection[type;channel;durationSeconds;customMessage?]",
        "parameters": [
            {
                "field": "enabled",
                "type": "boolean",
                "description": "Enable mention raid protection?",
                "required": false
            }
        ],
        "example": "This will create a new automod rule with the mention raid protection enabled.\n\n```javascript\nclient.command({\n    name: \"setAutomodMentionRaidProtection\",\n    code: `\n    $createAutomodRule[$guildid;Automod Rule;true;Creating a new rule!]\n    $setAutomodMentionRaidProtection[true]\n    `\n});\n```",
        "tip": null,
        "documentation": "https://aoi.js.org/functions/setautomodmentionraidprotection",
        "source": "https://github.com/aoijs/aoi.js/tree/v6/src/functions/misc/setAutomodMentionRaidProtection.js",
        "type": "Aoi.Js"
    },
    {
        "function": "$setAutomodMentionTotalLimit",
        "description": "$setAutomodMentionTotalLimit will set the allowed mention limit for the selected automod rule.",
        "usage": "$setAutomodMentionTotalLimit[limit]",
        "parameters": [
            {
                "field": "limit",
                "type": "number",
                "description": "The maximum of allowed mentions.",
                "required": true
            }
        ],
        "example": "This will create a new automod rule with the maximum allowed mention limit of 3.\n\n```javascript\nclient.command({\n    name: \"setAutomodMentionTotalLimit\",\n    code: `\n    $createAutomodRule[$guildid;Automod Rule;true;Creating a new rule!]\n    $setAutomodMentionTotalLimit[3]\n    `\n});\n```",
        "tip": null,
        "documentation": "https://aoi.js.org/functions/setautomodmentiontotallimit",
        "source": "https://github.com/aoijs/aoi.js/tree/v6/src/functions/misc/setAutomodMentionTotalLimit.js",
        "type": "Aoi.Js"
    },
    {
        "function": "$setAutomodPreset",
        "description": "$setAutomodPreset will set the keyword preset for blocked words of automod rules.",
        "usage": "$setAutomodPreset[...presets]",
        "parameters": [
            {
                "field": "...presets",
                "type": "string",
                "description": "The preset type.",
                "required": true
            }
        ],
        "example": "This will create a new automod rule with the BlockMessage action.\n\n```javascript\nclient.command({\n    name: \"setAutomodPreset\",\n    code: `\n    $createAutomodRule[$guildid;Automod Rule;true;Creating a new rule!]\n    $setAutomodPreset[Slurs]\n    $setAutomodType[Keyword]\n    $setAutomodActions[BlockMessage;$channelId;60;You tried to say slurs, you got blocked!]  \n    `\n});\n```",
        "tip": null,
        "documentation": "https://aoi.js.org/functions/setautomodpreset",
        "source": "https://github.com/aoijs/aoi.js/tree/v6/src/functions/misc/setAutomodPreset.js",
        "type": "Aoi.Js"
    },
    {
        "function": "$setAutomodRegexFilter",
        "description": "$setAutomodRegexFilter will filter words according to the given regex of the automod rule.",
        "usage": "$setAutomodRegexFilter[...regex]",
        "parameters": [
            {
                "field": "...regex",
                "type": "string",
                "description": "The regex to filter words for.",
                "required": true
            }
        ],
        "example": "This will create a new automod rule with the BlockMessage action and block of the word \"Hello\".\n\n```javascript\nclient.command({\n    name: \"setAutomodRegexFilter\",\n    code: `\n    $createAutomodRule[$guildid;Automod Rule;true;Creating a new rule!]\n    $setAutomodPreset[Slurs]\n    $setAutomodType[Keyword]\n    $setAutomodRegexFilter[/Hello/g]\n    $setAutomodActions[BlockMessage;$channelId;60;You tried to say slurs, you got blocked!]  \n    `\n});\n```",
        "tip": null,
        "documentation": "https://aoi.js.org/functions/setautomodregexfilter",
        "source": "https://github.com/aoijs/aoi.js/tree/v6/src/functions/misc/setAutomodRegexFilter.js",
        "type": "Aoi.Js"
    },
    {
        "function": "$setAutomodType",
        "description": "$setAutomodType will set the automod type.",
        "usage": "$setAutomodType[type]",
        "parameters": [
            {
                "field": "type",
                "type": "string",
                "description": "The automod type.",
                "required": true
            }
        ],
        "example": "This will create a new automod rule with the BlockMessage action and `Slurs` Preset.\n\n```javascript\nclient.command({\n    name: \"setAutomodType\",\n    code: `\n    $createAutomodRule[$guildid;Automod Rule;true;Creating a new rule!]\n    $setAutomodPreset[Slurs]\n    $setAutomodType[Keyword]\n    $setAutomodActions[BlockMessage;$channelId;60;You tried to say slurs, you got blocked!]  \n    `\n});\n```",
        "tip": null,
        "documentation": "https://aoi.js.org/functions/setautomodtype",
        "source": "https://github.com/aoijs/aoi.js/tree/v6/src/functions/misc/setAutomodType.js",
        "type": "Aoi.Js"
    },
    {
        "function": "$setCacheData",
        "description": "$setCacheData will modify given cache data.",
        "usage": "$setCacheData[type;cacheName;cacheKey;cacheValue]",
        "parameters": [
            {
                "field": "type",
                "type": "string",
                "description": "Cache type.",
                "required": true
            },
            {
                "field": "cacheName",
                "type": "string",
                "description": "Cache name.",
                "required": true
            },
            {
                "field": "cacheKey",
                "type": "string",
                "description": "Cache key.",
                "required": true
            },
            {
                "field": "cacheValue",
                "type": "string",
                "description": "Cache value.",
                "required": true
            }
        ],
        "example": null,
        "tip": null,
        "documentation": "https://aoi.js.org/functions/setcachedata",
        "source": "https://github.com/aoijs/aoi.js/tree/v6/src/functions/database/setCacheData.js",
        "type": "Aoi.Js"
    },
    {
        "function": "$setChannelTopic",
        "description": "$setChannelTopic will modify a channel's topic.",
        "usage": "$setChannelTopic[channelID;topic]",
        "parameters": [
            {
                "field": "channelID",
                "type": "number",
                "description": "The ID of the channel whose topic will be modified.",
                "required": true
            },
            {
                "field": "topic",
                "type": "string",
                "description": "Content of the new channel topic.",
                "required": true
            }
        ],
        "example": "This will change the topic of the channel where the command is executed in:\n\n```javascript\nclient.command({\n    name: \"setChannelTopic\",\n    code: `\n   $setChannelTopic[$channelID;Hello! This is the new channel topic!]`\n});\n```",
        "tip": null,
        "documentation": "https://aoi.js.org/functions/setchanneltopic",
        "source": "https://github.com/aoijs/aoi.js/tree/v6/src/functions/guild/setChannelTopic.js",
        "type": "Aoi.Js"
    },
    {
        "function": "$setChannelVar",
        "description": "$setChannelVar will change the value of a given channel variable.",
        "usage": "$setChannelVar[varname;value;channelID?;table?]",
        "parameters": [
            {
                "field": "varname",
                "type": "string",
                "description": "Variable name.",
                "required": true
            },
            {
                "field": "value",
                "type": "string",
                "description": "New Variable value.",
                "required": true
            },
            {
                "field": "channelID",
                "type": "number",
                "description": "Channel ID.",
                "required": false
            },
            {
                "field": "table",
                "type": "string",
                "description": "Variable table.",
                "required": false
            }
        ],
        "example": "This will change the value of \"Example\" to \"This is a value\":\n\n```javascript\nclient.command({\n    name: \"setChannelVar\",\n    code: `\n    $setChannelVar[Example;This is a value;$channelID;main]\n    `\n});\n```",
        "tip": null,
        "documentation": "https://aoi.js.org/functions/setchannelvar",
        "source": "https://github.com/aoijs/aoi.js/tree/v6/src/functions/guild/setChannelVar.js",
        "type": "Aoi.Js"
    },
    {
        "function": "$setClientAvatar",
        "description": "$setClientAvatar will change the clients' avatar.",
        "usage": "$setClientAvatar[URL]",
        "parameters": [
            {
                "field": "URL",
                "type": "string",
                "description": "The new avatar URL.",
                "required": true
            }
        ],
        "example": "This will change the client's avatar to the command author's user avatar:\n\n```javascript\nclient.command({\n    name: \"setClientAvatar\",\n    code: `\n   $setClientAvatar[$userAvatar[$authorID]]`\n});\n```",
        "tip": null,
        "documentation": "https://aoi.js.org/functions/setclientavatar",
        "source": "https://github.com/aoijs/aoi.js/tree/v6/src/functions/misc/setClientAvatar.js",
        "type": "Aoi.Js"
    },
    {
        "function": "$setClientBanner",
        "description": "$setClientBanner will set the banner of the client.",
        "usage": "$setClientBanner[url]",
        "parameters": [
            {
                "field": "url",
                "type": "string",
                "description": "The URL of the banner (supports base64).",
                "required": true
            }
        ],
        "example": "This will attempt to set the avatar of the client to your user banner:\n\n```javascript\nclient.command({\n    name: \"setClientBanner\",\n    code: `\n  $setClientBanner[$authorBanner]\n  `\n});\n```",
        "tip": null,
        "documentation": "https://aoi.js.org/functions/setclientbanner",
        "source": "https://github.com/aoijs/aoi.js/tree/v6/src/functions/misc/setClientBanner.js",
        "type": "Aoi.Js"
    },
    {
        "function": "$setClientName",
        "description": "$setClientName will change the clients' Discord Username.",
        "usage": "$setClientName[username]",
        "parameters": [
            {
                "field": "username",
                "type": "string",
                "description": "The new client username.",
                "required": true
            }
        ],
        "example": "This will change the client's username to the command author's username:\n\n```javascript\nclient.command({\n    name: \"setClientName\",\n    code: `\n   $setClientName[$username[$authorID]]`\n});\n```",
        "tip": null,
        "documentation": "https://aoi.js.org/functions/setclientname",
        "source": "https://github.com/aoijs/aoi.js/tree/v6/src/functions/misc/setClientName.js",
        "type": "Aoi.Js"
    },
    {
        "function": "$setGlobalUserVar",
        "description": "$setGlobalUserVar will change the value of a given global user variable.",
        "usage": "$setGlobalUserVar[varname;value;userID?;table?]",
        "parameters": [
            {
                "field": "varname",
                "type": "string",
                "description": "Variable name.",
                "required": true
            },
            {
                "field": "value",
                "type": "string",
                "description": "New Variable value.",
                "required": true
            },
            {
                "field": "userID",
                "type": "number",
                "description": "User ID.",
                "required": false
            },
            {
                "field": "table",
                "type": "string",
                "description": "Variable table.",
                "required": false
            }
        ],
        "example": "This will change the value of \"Example\" to \"This is a value\" for the command author:\n\n```javascript\nclient.command({\n    name: \"setGlobalUserVar\",\n    code: `\n    $setGlobalUserVar[Example;This is a value;$authorID;main]\n    `\n});\n```",
        "tip": null,
        "documentation": "https://aoi.js.org/functions/setglobaluservar",
        "source": "https://github.com/aoijs/aoi.js/tree/v6/src/functions/database/setGlobalUserVar.js",
        "type": "Aoi.Js"
    },
    {
        "function": "$setGuildBanner",
        "description": "$setGuildBanner will change a Guild's banner.",
        "usage": "$setGuildBanner[guildID?;URL;reason?]",
        "parameters": [
            {
                "field": "guildID",
                "type": "number",
                "description": "Guild ID of the guild.",
                "required": false
            },
            {
                "field": "URL",
                "type": "string",
                "description": "New guild banner.",
                "required": true
            },
            {
                "field": "reason",
                "type": "string",
                "description": "Reason that will be displayed in the guild's audit logs.",
                "required": false
            }
        ],
        "example": "This will change the banner of the current guild:\n\n```javascript\nclient.command({\n    name: \"setGuildBanner\",\n    code: `\n  $setGuildBanner[$guildID;https://cdn.discordapp.com/banners/773352845738115102/b2b27d0915a838e8b4f68b180d1901ad.webp;Example!]\n  `\n});\n```",
        "tip": null,
        "documentation": "https://aoi.js.org/functions/setguildbanner",
        "source": "https://github.com/aoijs/aoi.js/tree/v6/src/functions/guild/setGuildBanner.js",
        "type": "Aoi.Js"
    },
    {
        "function": "$setGuildDiscoverySplash",
        "description": "$setGuildDiscoverySplash will change a Guild's discovery splash banner.",
        "usage": "$setGuildDiscoverySplash[guildID?;URL;reason?]",
        "parameters": [
            {
                "field": "guildID",
                "type": "number",
                "description": "Guild ID of the guild.",
                "required": false
            },
            {
                "field": "URL",
                "type": "string",
                "description": "New discovery splash banner.",
                "required": true
            },
            {
                "field": "reason",
                "type": "string",
                "description": "Reason that will be displayed in the guild's audit logs.",
                "required": false
            }
        ],
        "example": "This will change the banner of the current guild:\n\n```javascript\nclient.command({\n    name: \"setGuildDiscoverySplash\",\n    code: `\n  $setGuildDiscoverySplash[$guildID;https://cdn.discordapp.com/banners/773352845738115102/b2b27d0915a838e8b4f68b180d1901ad.webp;Example!]\n  `\n});\n```",
        "tip": null,
        "documentation": "https://aoi.js.org/functions/setguilddiscoverysplash",
        "source": "https://github.com/aoijs/aoi.js/tree/v6/src/functions/guild/setGuildDiscoverySplash.js",
        "type": "Aoi.Js"
    },
    {
        "function": "$setGuildIcon",
        "description": "$setGuildIcon will change a guild's icon.",
        "usage": "$setGuildIcon[URL;guildID?]",
        "parameters": [
            {
                "field": "URL",
                "type": "string",
                "description": "URL of the new guild Icon.",
                "required": true
            },
            {
                "field": "guildID",
                "type": "number",
                "description": "The guild ID of where to set the guild Icon.",
                "required": false
            }
        ],
        "example": "This will change guild's icon you're executing the command in to your user avatar:\n\n```javascript\nclient.command({\n    name: \"setGuildIcon\",\n    code: `\n   $setGuildIcon[$userAvatar[$authorID];$guildID]`\n});\n```",
        "tip": null,
        "documentation": "https://aoi.js.org/functions/setguildicon",
        "source": "https://github.com/aoijs/aoi.js/tree/v6/src/functions/guild/setGuildIcon.js",
        "type": "Aoi.Js"
    },
    {
        "function": "$setGuildName",
        "description": "$setGuildName will change a guild's name.",
        "usage": "$setGuildName[name;guildID?]",
        "parameters": [
            {
                "field": "name",
                "type": "string",
                "description": "The new guild name.",
                "required": true
            },
            {
                "field": "guildID",
                "type": "number",
                "description": "The ID of the guild whose name will be modified.",
                "required": false
            }
        ],
        "example": "This will change guild's name you're executing the command in to your username:\n\n```javascript\nclient.command({\n    name: \"setGuildName\",\n    code: `\n   $setGuildName[$username[$authorID];$guildID]`\n});\n```",
        "tip": null,
        "documentation": "https://aoi.js.org/functions/setguildname",
        "source": "https://github.com/aoijs/aoi.js/tree/v6/src/functions/guild/setGuildName.js",
        "type": "Aoi.Js"
    },
    {
        "function": "$setGuildVar",
        "description": "$setGuildVar will change the value of a given guild variable.",
        "usage": "$setGuildVar[varname;value;guildID?;table?]",
        "parameters": [
            {
                "field": "varname",
                "type": "string",
                "description": "Variable name.",
                "required": true
            },
            {
                "field": "value",
                "type": "string",
                "description": "New Variable value.",
                "required": true
            },
            {
                "field": "guildID",
                "type": "number",
                "description": "Guild ID.",
                "required": false
            },
            {
                "field": "table",
                "type": "string",
                "description": "Variable table.",
                "required": false
            }
        ],
        "example": "This will change the value of \"Example\" to \"This is a value\":\n\n```javascript\nclient.command({\n    name: \"setGuildVar\",\n    code: `\n    $setGuildVar[Example;This is a value;$guildID;main]\n    `\n});\n```",
        "tip": null,
        "documentation": "https://aoi.js.org/functions/setguildvar",
        "source": "https://github.com/aoijs/aoi.js/tree/v6/src/functions/guild/setGuildVar.js",
        "type": "Aoi.Js"
    },
    {
        "function": "$setMessageVar",
        "description": "$setMessageVar will change the value of a given message variable.",
        "usage": "$setMessageVar[varname;value;messageID?;table?]",
        "parameters": [
            {
                "field": "varname",
                "type": "string",
                "description": "Variable name.",
                "required": true
            },
            {
                "field": "value",
                "type": "string",
                "description": "New Variable value.",
                "required": true
            },
            {
                "field": "messageID",
                "type": "number",
                "description": "Message ID.",
                "required": false
            },
            {
                "field": "table",
                "type": "string",
                "description": "Variable table.",
                "required": false
            }
        ],
        "example": "This will change the value of \"Example\" to \"This is a value\":\n\n```javascript\nclient.command({\n    name: \"setMessageVar\",\n    code: `\n    $setMessageVar[Example;This is a value;$messageID;main]\n    `\n});\n```",
        "tip": null,
        "documentation": "https://aoi.js.org/functions/setmessagevar",
        "source": "https://github.com/aoijs/aoi.js/tree/v6/src/functions/database/setMessageVar.js",
        "type": "Aoi.Js"
    },
    {
        "function": "$setObjectProperty",
        "description": "$setObjectProperty will set a property of an existing object.",
        "usage": "$setObjectProperty[objectName;property;value]",
        "parameters": [
            {
                "field": "objectName",
                "type": "string",
                "description": "Name of the object.",
                "required": true
            },
            {
                "field": "property",
                "type": "string",
                "description": "Name of the property.",
                "required": true
            },
            {
                "field": "value",
                "type": "string",
                "description": "Value of the property.",
                "required": true
            }
        ],
        "example": "This will return `Ferel` from the `Leref` Property:\n\n```javascript\nclient.command({\n    name: \"setObjectProperty\",\n    code: `\n  $getObjectProperty[Object Name;Leref]\n  $setObjectProperty[Object Name;Leref;Ferel]\n  $createObject[Object Name;{}]\n  `\n});\n```",
        "tip": null,
        "documentation": "https://aoi.js.org/functions/setobjectproperty",
        "source": "https://github.com/aoijs/aoi.js/tree/v6/src/functions/misc/setObjectProperty.js",
        "type": "Aoi.Js"
    },
    {
        "function": "$setRoleColor",
        "description": "$setRoleColor will set a role's color.",
        "usage": "$setRoleColor[roleID;color]",
        "parameters": [
            {
                "field": "roleID",
                "type": "number",
                "description": "The ID of the role that will be modified.",
                "required": true
            },
            {
                "field": "color",
                "type": "string",
                "description": "The new (hex) color.",
                "required": true
            }
        ],
        "example": "This will change a random role's color to red:\n\n```javascript\nclient.command({\n    name: \"setRoleColor\",\n    code: `\n   $setRoleColor[$randomRoleID;Red]`\n});\n```\n\n```javascript\nclient.command({\n    name: \"setRoleColor\",\n    code: `\n   $setRoleColor[$randomRoleID;ED4245]`\n});\n```",
        "tip": null,
        "documentation": "https://aoi.js.org/functions/setrolecolor",
        "source": "https://github.com/aoijs/aoi.js/tree/v6/src/functions/misc/setRoleColor.js",
        "type": "Aoi.Js"
    },
    {
        "function": "$setRoleIcon",
        "description": "$setRoleIcon will set the icon of a specific role.",
        "usage": "$setRoleIcon[guildID;roleID;icon]",
        "parameters": [
            {
                "field": "guildID",
                "type": "number",
                "description": "The ID of the guild where the role exists.",
                "required": false
            },
            {
                "field": "roleID",
                "type": "number",
                "description": "The role ID.",
                "required": false
            },
            {
                "field": "icon",
                "type": "string",
                "description": "The URL of the icon.",
                "required": false
            }
        ],
        "example": "This will change the icon of a given role to the specified icon:\n\n```javascript\nclient.command({\n    name: \"setRoleIcon\",\n    code: `\n  $setRoleIcon[$guildID;roleID;iconURL]\n  `\n});\n```",
        "tip": null,
        "documentation": "https://aoi.js.org/functions/setroleicon",
        "source": "https://github.com/aoijs/aoi.js/tree/v6/src/functions/misc/setRoleIcon.js",
        "type": "Aoi.Js"
    },
    {
        "function": "$setRolePosition",
        "description": "$setRolePosition will set a role's position.",
        "usage": "$setRolePosition[roleID;position;guildID?]",
        "parameters": [
            {
                "field": "roleID",
                "type": "number",
                "description": "The ID of the role to modify.",
                "required": true
            },
            {
                "field": "position",
                "type": "number",
                "description": "The new position of the role. (1 being the very bottom)",
                "required": true
            },
            {
                "field": "guildID",
                "type": "number",
                "description": "The ID of the guild of where the role is located in.",
                "required": false
            }
        ],
        "example": "This will change a random role's position to `1` (the bot's highest role must be above that role):\n\n```javascript\nclient.command({\n    name: \"setRolePosition\",\n    code: `\n   $setRolePosition[$randomRoleID;1;$guildID]`\n});\n```",
        "tip": null,
        "documentation": "https://aoi.js.org/functions/setroleposition",
        "source": "https://github.com/aoijs/aoi.js/tree/v6/src/functions/misc/setRolePosition.js",
        "type": "Aoi.Js"
    },
    {
        "function": "$setRoles",
        "description": "$setRoles will set a member's roles.",
        "usage": "$setRoles[guildID;memberID;reason?;...roleIDs]",
        "parameters": [
            {
                "field": "guildID",
                "type": "number",
                "description": "The ID of the guild where the users roles will be removed or added.",
                "required": true
            },
            {
                "field": "memberID",
                "type": "number",
                "description": "The user ID of the guild member.",
                "required": true
            },
            {
                "field": "reason",
                "type": "string",
                "description": "The reason that will be displayed in the guild's audit logs.",
                "required": false
            },
            {
                "field": "...roleIDs",
                "type": "number",
                "description": "The IDs of the roles.",
                "required": true
            }
        ],
        "example": "This will either remove or add specific roles from you:\n\n```javascript\nclient.command({\n    name: \"setRoles\",\n    code: `\n   $setRoles[$guildID;$authorID;Some reason.;roleID1;roleID2;roleID3;....]`\n});\n```",
        "tip": null,
        "documentation": "https://aoi.js.org/functions/setroles",
        "source": "https://github.com/aoijs/aoi.js/tree/v6/src/functions/misc/setRoles.js",
        "type": "Aoi.Js"
    },
    {
        "function": "$setStatus",
        "description": "$setStatus will change the client's status.",
        "usage": "$setStatus[name;type?;status?;URL?;afk?]",
        "parameters": [
            {
                "field": "name",
                "type": "string",
                "description": "The content of the status.",
                "required": true
            },
            {
                "field": "type",
                "type": "string",
                "description": "1. **PLAYING** (default) \n2. **WATCHING** \n3. **STREAMING** \n4. **LISTENING** \n5. **COMPETING**",
                "required": false
            },
            {
                "field": "status",
                "type": "string",
                "description": "1. **online** (default) \n2. **idle** \n3. **dnd** \n4. **invisible**",
                "required": false
            },
            {
                "field": "URL",
                "type": "string",
                "description": "URL (streaming status)",
                "required": false
            },
            {
                "field": "afk",
                "type": "boolean",
                "description": "1. **true** \n2. **false** (default)",
                "required": false
            }
        ],
        "example": "This will change the client's status to **PLAYING** and **online**:\n\n```javascript\nclient.command({\n    name: \"setStatus\",\n    code: `\n   $setStatus[Hello!;PLAYING;online]`\n});\n```",
        "tip": null,
        "documentation": "https://aoi.js.org/functions/setstatus",
        "source": "https://github.com/aoijs/aoi.js/tree/v6/src/functions/misc/setStatus.js",
        "type": "Aoi.Js"
    },
    {
        "function": "$setTimeout",
        "description": "$setTimeout will set a timeout for a given action (which will even continue to run after bot restart).",
        "usage": "$setTimeout[awaitedCmd;duration;timeoutData;returnId?]",
        "parameters": [
            {
                "field": "awaitedCmd",
                "type": "string",
                "description": "Awaited command to execute after duration ends.",
                "required": true
            },
            {
                "field": "duration",
                "type": "string",
                "description": "After how much time it will execute / this cannot go over **21 days**.",
                "required": true
            },
            {
                "field": "timeoutData",
                "type": "object",
                "description": "Timeout data.",
                "required": true
            },
            {
                "field": "returnId",
                "type": "boolean",
                "description": "Return timeout ID.",
                "required": false
            }
        ],
        "example": "This will send \"Hello!\" after 10 seconds in the command execution channel:\n\n```javascript\nclient.command({\n  name: \"setTimeout\",\n  code: `$setTimeout[timeoutCommand;10s;{\"channelID\": \"$channelID\", \"authorID\": \"$authorID\"};false]`,\n});\n\nclient.timeoutCommand({\n  name: \"timeoutCommand\",\n  code: `$channelSendMessage[$timeoutData[channelID];Hello, <@$timeoutData[authorID]>!]`\n});\n```",
        "tip": null,
        "documentation": "https://aoi.js.org/functions/settimeout",
        "source": "https://github.com/aoijs/aoi.js/tree/v6/src/functions/misc/setTimeout.js",
        "type": "Aoi.Js"
    },
    {
        "function": "$setUserNickname",
        "description": "$setUserNickname will change the nickname of a guild member.",
        "usage": "$setUserNickname[userID;newName;reason?]",
        "parameters": [
            {
                "field": "userID",
                "type": "number",
                "description": "The user ID of the user whose nickname shall be changed.",
                "required": true
            },
            {
                "field": "newName",
                "type": "string",
                "description": "Their new nickname.",
                "required": true
            },
            {
                "field": "reason",
                "type": "string",
                "description": "Reason that will be displayed in the guild's audit logs.",
                "required": false
            }
        ],
        "example": "This will change your nickname to \"I love aoi.js\": (won't work if you're the guild owner)\n\n```javascript\nclient.command({\n    name: \"setUserNickname\",\n    code: `\n  $setUserNickname[$authorID;I love aoi.js;They simply love aoi.js]\n  `\n});\n```",
        "tip": null,
        "documentation": "https://aoi.js.org/functions/setusernickname",
        "source": "https://github.com/aoijs/aoi.js/tree/v6/src/functions/misc/setUserNickname.js",
        "type": "Aoi.Js"
    },
    {
        "function": "$setUserVar",
        "description": "$setUserVar will change the value of a given user variable.",
        "usage": "$setUserVar[varname;value;userID?;id?;table?]",
        "parameters": [
            {
                "field": "varname",
                "type": "string",
                "description": "Variable name.",
                "required": true
            },
            {
                "field": "value",
                "type": "string",
                "description": "New Variable value.",
                "required": true
            },
            {
                "field": "userID",
                "type": "number",
                "description": "User ID.",
                "required": false
            },
            {
                "field": "id",
                "type": "string",
                "description": "1. **specific guild ID** \n2. **dm**",
                "required": false
            },
            {
                "field": "table",
                "type": "string",
                "description": "Variable table.",
                "required": false
            }
        ],
        "example": "This will change the value of \"Example\" to \"This is a value\":\n\n```javascript\nclient.command({\n    name: \"setUserVar\",\n    code: `\n    $setUserVar[Example;This is a value;$authorID;$guildID;main]\n    `\n});\n```",
        "tip": null,
        "documentation": "https://aoi.js.org/functions/setuservar",
        "source": "https://github.com/aoijs/aoi.js/tree/v6/src/functions/database/setUserVar.js",
        "type": "Aoi.Js"
    },
    {
        "function": "$setVar",
        "description": "$setVar will change the value of a given global variable.",
        "usage": "$setVar[varname;value;table?]",
        "parameters": [
            {
                "field": "Varname",
                "type": "string",
                "description": "Variable name.",
                "required": true
            },
            {
                "field": "Value",
                "type": "string",
                "description": "New Variable value.",
                "required": true
            },
            {
                "field": "Table",
                "type": "string",
                "description": "Variable table.",
                "required": false
            }
        ],
        "example": "This will change the value of \"Example\" to \"This is a value\":\n\n```javascript\nclient.command({\n    name: \"setVar\",\n    code: `\n    $setVar[Example;This is a value;main]\n    `\n});\n```",
        "tip": null,
        "documentation": "https://aoi.js.org/functions/setvar",
        "source": "https://github.com/aoijs/aoi.js/tree/v6/src/functions/database/setVar.js",
        "type": "Aoi.Js"
    },
    {
        "function": "$setVoiceStatus",
        "description": "$setVoiceStatus will set voice status to the specified voice channel",
        "usage": "$setVoiceStatus[channelID;voiceStatus]",
        "parameters": [
            {
                "field": "channelID",
                "type": "number",
                "description": "The ID of the voice channel.",
                "required": true
            },
            {
                "field": "voiceStatus",
                "type": "string",
                "description": "The voice status you want to set.",
                "required": true
            }
        ],
        "example": "```javascript\nclient.command({\n    name: \"setVoiceStatus\",\n    code: `\n  $setVoiceStatus[1182613173220675617;Voice status text]\n  $comment[Example ID value of a voice channel]\n  `\n});\n```",
        "tip": null,
        "documentation": "https://aoi.js.org/functions/setvoicestatus",
        "source": "https://github.com/aoijs/aoi.js/tree/v6/src/functions/misc/setVoiceStatus.js",
        "type": "Aoi.Js"
    },
    {
        "function": "$shard",
        "description": "$shard returns the data of a shard.",
        "usage": "$shard[option]",
        "parameters": [
            {
                "field": "option",
                "type": "string",
                "description": "Option to retrieve.",
                "required": true
            }
        ],
        "example": null,
        "tip": null,
        "documentation": "https://aoi.js.org/functions/shard",
        "source": "https://github.com/aoijs/aoi.js/tree/v6/src/functions/client/shard.js",
        "type": "Aoi.Js"
    },
    {
        "function": "$shutdown",
        "description": "$shutdown will shutdown / end the process of your bot.",
        "usage": "$shutdown",
        "parameters": [],
        "example": "This will shutdown your bot:\n\n```javascript\nclient.command({\n    name: \"shutdown\",\n    code: `\n    $shutdown\n    `\n});\n```",
        "tip": null,
        "documentation": "https://aoi.js.org/functions/shutdown",
        "source": "https://github.com/aoijs/aoi.js/tree/v6/src/functions/misc/shutdown.js",
        "type": "Aoi.Js"
    },
    {
        "function": "$slashOption",
        "description": "$slashOption returns data of a slash command option.",
        "usage": "$slashOption[option]",
        "parameters": [
            {
                "field": "option",
                "type": "string",
                "description": "Option name.",
                "required": true
            }
        ],
        "example": "```javascript\n$createApplicationCommand[global;exampleslash;Simple example slash command.;true;true;slash;[{\n    \"name\": \"exampleOption\",\n    \"description\": \"example slash command option\",\n    \"required\": true,\n    \"type\": 3\n}]]\n```\n\n```javascript\nclient.command({\n    name: \"exampleslash\",\n    type: \"interaction\",\n    prototype: \"slash\",\n    code: `\n    $interactionReply[What a great example! You entered $slashOption[exampleOption]!]`\n});\n```",
        "tip": null,
        "documentation": "https://aoi.js.org/functions/slashoption",
        "source": "https://github.com/aoijs/aoi.js/tree/v6/src/functions/misc/slashOption.js",
        "type": "Aoi.Js"
    },
    {
        "function": "$slowmode",
        "description": "$slowmode will change a channel's slowmode.",
        "usage": "$slowmode[time;channelID?]",
        "parameters": [
            {
                "field": "time",
                "type": "string",
                "description": "The new slowmode of the given channel.",
                "required": true
            },
            {
                "field": "channelID",
                "type": "number",
                "description": "The ID of the channel that will be modified.",
                "required": false
            }
        ],
        "example": "This will change the channel's slowmode to three minutes:\n\n```javascript\nclient.command({\n    name: \"slowmode\",\n    code: `\n   $slowmode[3m;$channelID]`\n});\n```\n\nThis will change the channel's slowmode to 6 hours:\n\n```javascript\nclient.command({\n    name: \"slowmode\",\n    code: `\n   $slowmode[6h;$channelID]`\n});\n```",
        "tip": null,
        "documentation": "https://aoi.js.org/functions/slowmode",
        "source": "https://github.com/aoijs/aoi.js/tree/v6/src/functions/misc/slowmode.js",
        "type": "Aoi.Js"
    },
    {
        "function": "$spawnShard",
        "description": "$spawnShard will spawn a shard.",
        "usage": "$spawnShard[shard]",
        "parameters": [
            {
                "field": "shard",
                "type": "number",
                "description": "Amount of shards.",
                "required": true
            }
        ],
        "example": "This will spawn shard `1`:\n\n```javascript\nclient.command({\n    name: \"spawnShard\",\n    code: `\n   $spawnShard[1]`\n});\n```",
        "tip": null,
        "documentation": "https://aoi.js.org/functions/spawnshard",
        "source": "https://github.com/aoijs/aoi.js/tree/v6/src/functions/client/spawnShard.js",
        "type": "Aoi.Js"
    },
    {
        "function": "$spliceTextJoin",
        "description": "$spliceTextJoin will join spliced text.",
        "usage": "$spliceTextJoin[text;splitter;sep1?;sep2?]",
        "parameters": [
            {
                "field": "text",
                "type": "string",
                "description": "Text to join.",
                "required": true
            },
            {
                "field": "splitter",
                "type": "string",
                "description": "How to split.",
                "required": true
            },
            {
                "field": "sep1",
                "type": "string",
                "description": "Separator.",
                "required": false
            },
            {
                "field": "sep2",
                "type": "string",
                "description": "Separator.",
                "required": false
            }
        ],
        "example": null,
        "tip": null,
        "documentation": "https://aoi.js.org/functions/splicetextjoin",
        "source": "https://github.com/aoijs/aoi.js/tree/v6/src/functions/misc/spliceTextJoin.js",
        "type": "Aoi.Js"
    },
    {
        "function": "$splitText",
        "description": "$splitText will return a value of $textSplit depending on the given index.",
        "usage": "$splitText[index]",
        "parameters": [
            {
                "field": "index",
                "type": "number",
                "description": "Index of `$textSplit` content.",
                "required": true
            }
        ],
        "example": "This will return `aoi.js` as it's the second argument of `$textSplit`:\n\n```javascript\nclient.command({\n    name: \"splitText\",\n    code: `\n  $splitText[2]\n  $textSplit[@aoijs/aoi.db//aoi.js;//]\n  `\n});\n```",
        "tip": null,
        "documentation": "https://aoi.js.org/functions/splittext",
        "source": "https://github.com/aoijs/aoi.js/tree/v6/src/functions/misc/splitText.js",
        "type": "Aoi.Js"
    },
    {
        "function": "$stopTimeout",
        "description": "$stopTimeout will end/stop a timeout created by $setTimeout.",
        "usage": "$stopTimeout[id]",
        "parameters": [
            {
                "field": "id",
                "type": "string",
                "description": "Timeout ID.",
                "required": true
            }
        ],
        "example": "This will end a `$setTimeout` timeout:\n\n```javascript\nclient.command({\n    name: \"stopTimeout\",\n    code: `\n    $stopTimeout[10029]\n    `\n});\n```",
        "tip": null,
        "documentation": "https://aoi.js.org/functions/stoptimeout",
        "source": "https://github.com/aoijs/aoi.js/tree/v6/src/functions/misc/stopTimeout.js",
        "type": "Aoi.Js"
    },
    {
        "function": "$stringEndsWith",
        "description": "$stringEndsWith will check if the given argument ends with something specific.",
        "usage": "$stringEndsWith[text;check]",
        "parameters": [
            {
                "field": "text",
                "type": "string",
                "description": "The text that will be checked.",
                "required": true
            },
            {
                "field": "check",
                "type": "string",
                "description": "The argument that will check if the text ends with something specific.",
                "required": true
            }
        ],
        "example": "This will return `true` as `aoi.js` ends with `js`:\n\n```javascript\nclient.command({\n    name: \"stringEndsWith\",\n    code: `\n  $stringEndsWith[aoi.js;js]\n  `\n});\n```",
        "tip": null,
        "documentation": "https://aoi.js.org/functions/stringendswith",
        "source": "https://github.com/aoijs/aoi.js/tree/v6/src/functions/misc/stringEndsWith.js",
        "type": "Aoi.Js"
    },
    {
        "function": "$stringStartsWith",
        "description": "$stringStartsWith will check if the given argument starts with something specific.",
        "usage": "$stringStartsWith[text;check]",
        "parameters": [
            {
                "field": "text",
                "type": "string",
                "description": "The text that will be checked.",
                "required": true
            },
            {
                "field": "check",
                "type": "string",
                "description": "The argument that will check if the text starts with something specific.",
                "required": true
            }
        ],
        "example": "This will return `true` as `aoi.js` starts with `aoi`:\n\n```javascript\nclient.command({\n    name: \"stringStartsWith\",\n    code: `\n  $stringStartsWith[aoi.js;aoi]\n  `\n});\n```",
        "tip": null,
        "documentation": "https://aoi.js.org/functions/stringstartswith",
        "source": "https://github.com/aoijs/aoi.js/tree/v6/src/functions/misc/stringStartsWith.js",
        "type": "Aoi.Js"
    },
    {
        "function": "$sub",
        "description": "$sub will subtract two given numbers.",
        "usage": "$sub[num;num]",
        "parameters": [
            {
                "field": "num",
                "type": "number",
                "description": "Numbers to perform calculation with.",
                "required": true
            }
        ],
        "example": "This will return `65` as `70-5` equals `65`:\n\n```javascript\nclient.command({\n    name: \"sub\",\n    code: `\n  $sub[70;5]\n  `\n});\n```",
        "tip": null,
        "documentation": "https://aoi.js.org/functions/sub",
        "source": "https://github.com/aoijs/aoi.js/tree/v6/src/functions/math/sub.js",
        "type": "Aoi.Js"
    },
    {
        "function": "$sum",
        "description": "$sum will sum-up two given numbers.",
        "usage": "$sum[num;num]",
        "parameters": [
            {
                "field": "num",
                "type": "number",
                "description": "Numbers to perform calculation with.",
                "required": true
            }
        ],
        "example": "This will return `75` as `70+5` equals `75`:\n\n```javascript\nclient.command({\n    name: \"sum\",\n    code: `\n  $sum[70;5]\n  `\n});\n```",
        "tip": null,
        "documentation": "https://aoi.js.org/functions/sum",
        "source": "https://github.com/aoijs/aoi.js/tree/v6/src/functions/misc/sum.js",
        "type": "Aoi.Js"
    },
    {
        "function": "$suppressErrors",
        "description": "$suppressErrors will suppress aoi.js function errors.",
        "usage": "$suppressErrors[errorMsg?]",
        "parameters": [
            {
                "field": "errorMsg",
                "type": "string",
                "description": "Error message to return.",
                "required": false
            }
        ],
        "example": "This will suppress all errors of your code and return the pre-defined error message instead:\n\n```javascript\nclient.command({\n    name: \"suppressErrors\",\n    code: `\n    $description\n    $suppressErrors[Something went wrong!]\n    ` // Intentional invalid usage of $description\n});\n```",
        "tip": null,
        "documentation": "https://aoi.js.org/functions/suppresserrors",
        "source": "https://github.com/aoijs/aoi.js/tree/v6/src/functions/misc/suppressErrors.js",
        "type": "Aoi.Js"
    },
    {
        "function": "$switch",
        "description": "$switch will select and execute an action based on matching a value to predefined cases.",
        "usage": "$switch[value;case]",
        "parameters": [
            {
                "field": "value",
                "type": "string",
                "description": "The value to compare against cases.",
                "required": true
            },
            {
                "field": "case",
                "type": "string",
                "description": "Contains cases in the format `{case:<comparisonValue>:<awaitedCmd>}`, where `comparisonValue` can be a specific value. If none of the cases match, use `{case:default:<awaitedCmd>}` to handle the default behavior.",
                "required": true
            }
        ],
        "example": "```javascript\nclient.command({\n    name: \"switch\",\n    code: `\n $switch[2;\n     $comment[If 2 == 3 execute this]\n     {case:3:awaitedName}\n     $comment[If 2 == 4 execute this]\n     {case:4:awaitedName}\n     $comment[If none are correct, execute this]\n     {default:awaitedName}\n ]\n  `\n});\n```",
        "tip": null,
        "documentation": "https://aoi.js.org/functions/switch",
        "source": "https://github.com/aoijs/aoi.js/tree/v6/src/functions/misc/switch.js",
        "type": "Aoi.Js"
    },
    {
        "function": "$tempCooldown",
        "description": "$tempCooldown will create a temporary cooldown for a command.",
        "usage": "$tempCooldown[time;id;errorMessage?]",
        "parameters": [
            {
                "field": "time",
                "type": "string",
                "description": "The duration of the cooldown.",
                "required": true
            },
            {
                "field": "id",
                "type": "string",
                "description": "Can be user, guild, message, channel or any other ID.",
                "required": true
            },
            {
                "field": "errorMessage",
                "type": "string",
                "description": "Error message when there's remaining time for the cooldown.",
                "required": true
            }
        ],
        "example": "This will set a temporary cooldown for a command which applies once:\n\n```javascript\nclient.command({\n    name: \"tempCooldown\",\n    code: `\n  hello\n  $tempCooldown[2m;customid;Please wait %time% to execute this command again.]\n  `\n});\n```",
        "tip": null,
        "documentation": "https://aoi.js.org/functions/tempcooldown",
        "source": "https://github.com/aoijs/aoi.js/tree/v6/src/functions/misc/tempCooldown.js",
        "type": "Aoi.Js"
    },
    {
        "function": "$test",
        "description": "$test will test for a match of the pattern in the text.",
        "usage": "$test[text;pattern;flag?]",
        "parameters": [
            {
                "field": "text",
                "type": "string",
                "description": "The text to be tested.",
                "required": true
            },
            {
                "field": "pattern",
                "type": "string",
                "description": "The regex pattern that will be used for the test.",
                "required": true
            },
            {
                "field": "flag",
                "type": "string",
                "description": "[Flags](#flags).",
                "required": false
            }
        ],
        "example": "This will return `true` since there is \"Hello\" in the text:\n\n```js\nclient.command({\n    name: \"test\",\n    code: `$test[Hello world!;Hello;g]`\n});\n```\n\nThis will return `true` since the word \"hello\" is in the text regardless of its casing since the flag `i` is present:\n\n```js\nclient.command({\n    name: \"test\",\n    code: `$test[Hello world!;hello;gi]`\n});\n```",
        "tip": null,
        "documentation": "https://aoi.js.org/functions/test",
        "source": "https://github.com/aoijs/aoi.js/tree/v6/src/functions/misc/test.js",
        "type": "Aoi.Js"
    },
    {
        "function": "$textInputValue",
        "description": "$textInputValue returns data of a context menu option.",
        "usage": "$textInputValue[option]",
        "parameters": [
            {
                "field": "option",
                "type": "string",
                "description": "Option \n1. **name (of the option)**",
                "required": true
            }
        ],
        "example": "This will create a button and modal which will send the entered data to the same channel and give an ephemeral response\nto the user who submitted the form:\n\nPlease note that you require \"**events: [\"onMessage\", \"onInteractionCreate\"]**\" in your main file (also known as, in most cases, index.js)\n\n```js\nclient.command({\n    name: \"interactionModal\",\n    code: `\n$addButton[1;Press Me!;primary;exampleID;false]\nPretty Example!`\n}); // Create a button which will trigger the modal.\n\nmodule.exports = [\n    {\n        name: \"exampleID\",\n        type: \"interaction\",\n        prototype: \"button\", // Using \"prototype\" as this interaction belongs to a button.\n        code: `\n$interactionModal[Example!;customID;\n  {actionRow:\n    {textInput:What's your name?:1:nameInput:true:Your pretty name!:2:200}\n  }\n  {actionRow:\n    {textInput:What's your age?:1:ageInput:true:You young soul!:1:3}\n  }\n  {actionRow:\n    {textInput:What's your gender?:2:genderInput:true:Anything will work!:1:10}\n  }\n]`\n    }\n]; /* The modal itself, we use {textInput} to accept user input.\n\nThe correct usage of {textInput} would be:\n\n{textInput:title:type (1 : small text field, 2 : big text field):customID:required ( true, false ):placeholder:minVal:maxVal}\n\n*/\n\nmodule.exports = [\n    {\n        name: \"customID\",\n        type: \"interaction\",\n        prototype: \"modal\", // Using \"prototype\" as this interaction belongs to a modal.\n        code: `\n$interactionReply[Thanks for submitting this form!;everyone;true]\n\n$title[$username submitted a form!;$userAvatar]\n$addField[Their name is..;$textInputValue[nameInput]]\n$addField[Their age is..;$textInputValue[ageInput]]\n$addField[Their gender is..;$textInputValue[genderInput]]`\n    }\n]; /* Will return the values entered earlier from the modal. Using $textInputValue to retrieve those.\n\nAlternatively you could use $channelSendMessage[channelID;content] to send the data to another channel.\n$channelSendMessage[$channelID;{newEmbed:{title:$username submitted a form!:$userAvatar}{field:Their name is..:$textInputValue[nameInput]}{field:Their age is..:$textInputValue[ageInput]}{field:Their gender is..:$textInputValue[genderInput]}}]\n*/\n```",
        "tip": null,
        "documentation": "https://aoi.js.org/functions/textinputvalue",
        "source": "https://github.com/aoijs/aoi.js/tree/v6/src/functions/misc/textInputValue.js",
        "type": "Aoi.Js"
    },
    {
        "function": "$textSlice",
        "description": "$textSlice will slice a message depending on the given arguments.",
        "usage": "$textSlice[text;from?;to]",
        "parameters": [
            {
                "field": "text",
                "type": "string",
                "description": "Text you want to slice.",
                "required": true
            },
            {
                "field": "from",
                "type": "number",
                "description": "Starting point where to slice the message.",
                "required": false
            },
            {
                "field": "to",
                "type": "number",
                "description": "Ending point where slicing ends.",
                "required": true
            }
        ],
        "example": "This will return `Hello` and remove `Bye` from the given text:\n\n```javascript\nclient.command({\n    name: \"textSlice\",\n    code: `\n  $textSlice[Hello Bye;0;5]\n  `\n});\n```",
        "tip": null,
        "documentation": "https://aoi.js.org/functions/textslice",
        "source": "https://github.com/aoijs/aoi.js/tree/v6/src/functions/misc/textSlice.js",
        "type": "Aoi.Js"
    },
    {
        "function": "$textSplit",
        "description": "$textSplit will split a message into parts based on a specify separator, allowing you to access each part individually by its position.",
        "usage": "$textSplit[text;sep?]",
        "parameters": [
            {
                "field": "text",
                "type": "string",
                "description": "Query of arguments.",
                "required": true
            },
            {
                "field": "sep",
                "type": "string",
                "description": "Separator for the text arguments.",
                "required": false
            }
        ],
        "example": "This will return `hello, how are you`:\n\n```javascript\nclient.command({\n    name: \"textSplit\",\n    code: `\n  $splitText[1] $splitText[3] $splitText[6] $splitText[7]\n  $textSplit[hello,__blurr__how__ayaka__leref__are__you;__]\n  `\n});\n```",
        "tip": null,
        "documentation": "https://aoi.js.org/functions/textsplit",
        "source": "https://github.com/aoijs/aoi.js/tree/v6/src/functions/misc/textSplit.js",
        "type": "Aoi.Js"
    },
    {
        "function": "$textSplitMap",
        "description": "$textSplitMap will create a loop over all values that are stored within $textSplit",
        "usage": "$textSplitMap[awaited]",
        "parameters": [
            {
                "field": "awaited",
                "type": "string",
                "description": "Name of the awaited command.",
                "required": true
            }
        ],
        "example": "This will return the arguments within `$textSplit` and send all of them separately:\n\n```javascript\nclient.command({\n    name: \"textSplitMap\",\n    code: `\n    $textSplitMap[devs]\n    $textSplit[Ayaka,Leref,Ferel,Blurr;,]\n    `\n});\n\nclient.awaitedCommand({\n    name: \"devs\",\n    code: `\n    $message[1]\n    `\n});\n```",
        "tip": null,
        "documentation": "https://aoi.js.org/functions/textsplitmap",
        "source": "https://github.com/aoijs/aoi.js/tree/v6/src/functions/misc/textSplitMap.js",
        "type": "Aoi.Js"
    },
    {
        "function": "$textTrim",
        "description": "$textTrim will remove all extra spaces, multiple spaces after one space, and replaces those with one single space.",
        "usage": "$textTrim[text]",
        "parameters": [
            {
                "field": "text",
                "type": "string",
                "description": "The text to be trimmed.",
                "required": true
            }
        ],
        "example": "This will remove any extra spaces of the given text, in this case it would return `Imagine a string package.`:\n\n```javascript\nclient.command({\n    name: \"textTrim\",\n    code: `\n    $textTrim[      Imagine a string package      ]\n    `\n});\n```",
        "tip": null,
        "documentation": "https://aoi.js.org/functions/texttrim",
        "source": "https://github.com/aoijs/aoi.js/tree/v6/src/functions/misc/textTrim.js",
        "type": "Aoi.Js"
    },
    {
        "function": "$thumbnail",
        "description": "$thumbnail adds a thumbnail to an embed (upper right corner image).",
        "usage": "$thumbnail[index?;URL]",
        "parameters": [
            {
                "field": "index",
                "type": "number",
                "description": "Embed position/index.",
                "required": false
            },
            {
                "field": "URL",
                "type": "string",
                "description": "Thumbnail Image URL.",
                "required": true
            }
        ],
        "example": "Here’s an example of how to create an embed that includes your avatar:\n\n```javascript\nclient.command({  \n    name: \"thumbnail\",  \n    code: `  \n   $thumbnail[$userAvatar[$authorID]]  \n   $description[Hello! This is your avatar.]`  \n});\n```",
        "tip": null,
        "documentation": "https://aoi.js.org/functions/thumbnail",
        "source": "https://github.com/aoijs/aoi.js/tree/v6/src/functions/misc/thumbnail.js",
        "type": "Aoi.Js"
    },
    {
        "function": "$timeZone",
        "description": "$timeZone will change the timezone of any time function in the used command.",
        "usage": "$timeZone[timezone]",
        "parameters": [
            {
                "field": "timezone",
                "type": "string",
                "description": "Timezone/Locale formatting.",
                "required": false
            }
        ],
        "example": "You can change the timezone using `$timezone` like the following:\n\n```javascript\nclient.command({\n    name: \"time\",\n    code: `\n    $hour:$minute:$second\n    $timeZone[America/New_York]\n    ` // returns current time of New York\n});\n```",
        "tip": null,
        "documentation": "https://aoi.js.org/functions/timezone",
        "source": "https://github.com/aoijs/aoi.js/tree/v6/src/functions/misc/timeZone.js",
        "type": "Aoi.Js"
    },
    {
        "function": "$timeoutData",
        "description": "$timeoutData holds data for $setTimeout data parameters, this will be empty if used outside timeoutCommand codes.",
        "usage": "$timeoutData[option]",
        "parameters": [
            {
                "field": "option",
                "type": "string",
                "description": "Timeout Data option name.",
                "required": true
            }
        ],
        "example": "This will send \"Hello!\" after 10 seconds in the command execution channel:\n\n```javascript\nclient.command({\n    name: \"setTimeout\",\n    code: `\n    $setTimeout[timeoutCommand;10s;{\"channelID\": \"$channelID\", \"authorID\": \"$authorID\"};false]\n    `\n});\n\nclient.timeoutCommand({\n    name: \"timeoutCommand\",\n    code: `\n    $channelSendMessage[$timeoutData[channelID];Hello, <@$timeoutData[authorID]>!]\n    `\n});\n```",
        "tip": null,
        "documentation": "https://aoi.js.org/functions/timeoutdata",
        "source": "https://github.com/aoijs/aoi.js/tree/v6/src/functions/misc/timeoutData.js",
        "type": "Aoi.Js"
    },
    {
        "function": "$timeoutList",
        "description": "$timeoutList will return all timeouts present in your database.",
        "usage": "$timeoutList[format?;separator?]",
        "parameters": [
            {
                "field": "format",
                "type": "string",
                "description": "The format of the timeout keys. \n1. **key** \n2. **duration** \n3. **id** \n4. **{key}** (custom format)",
                "required": false
            },
            {
                "field": "separator",
                "type": "string",
                "description": "Timeout Data option name.",
                "required": false
            }
        ],
        "example": "This will return all timeouts in the `key` format:\n\n```javascript\nclient.command({\n    name: \"timeoutList\",\n    code: `\n    $timeoutList[key;, ]\n    `\n});\n```\n\nThis will return all timeouts in the `key` format:\n\n```javascript\nclient.command({\n    name: \"timeoutList\",\n    code: `\n    $timeoutList[{key} {duration}];, ]\n    `\n});\n```",
        "tip": null,
        "documentation": "https://aoi.js.org/functions/timeoutlist",
        "source": "https://github.com/aoijs/aoi.js/tree/v6/src/functions/misc/timeoutList.js",
        "type": "Aoi.Js"
    },
    {
        "function": "$timeoutMember",
        "description": "$timeoutMember will timeout a given member using Discord's Timeout feature.",
        "usage": "$timeoutMember[guildID;memberID;timer;timeoutEndsAt?;reason?]",
        "parameters": [
            {
                "field": "guildID",
                "type": "number",
                "description": "The guild ID of where the member is located in.",
                "required": true
            },
            {
                "field": "memberID",
                "type": "number",
                "description": "The ID of the user that will be timeouted.",
                "required": true
            },
            {
                "field": "timer",
                "type": "string",
                "description": "The duration of the timeout.",
                "required": true
            },
            {
                "field": "timeoutEndsAt",
                "type": "boolean",
                "description": "Returns time when timeout ends. \n1. **true** \n2. **false** (default)",
                "required": false
            },
            {
                "field": "reason",
                "type": "string",
                "description": "The reason that will be displayed in the guild's audit logs.",
                "required": false
            }
        ],
        "example": "This will timeout a given member for five minutes:\n\n```javascript\nclient.command({\n    name: \"timeoutMember\",\n    code: `\n   $timeoutMember[$guildID;userID;5m;false]`\n});\n```",
        "tip": null,
        "documentation": "https://aoi.js.org/functions/timeoutmember",
        "source": "https://github.com/aoijs/aoi.js/tree/v6/src/functions/guild/timeoutMember.js",
        "type": "Aoi.Js"
    },
    {
        "function": "$title",
        "description": "$title adds a title to an embed.",
        "usage": "$title[index?;title;URL?]",
        "parameters": [
            {
                "field": "index",
                "type": "number",
                "description": "The index of the embed.",
                "required": false
            },
            {
                "field": "title",
                "type": "string",
                "description": "The content of the embed title.",
                "required": true
            },
            {
                "field": "URL",
                "type": "string",
                "description": "URL which will be the hyperlink.",
                "required": false
            }
        ],
        "example": "This will create an embed with a title:\n\n```javascript\nclient.command({\n    name: \"title\",\n    code: `\n   $title[Hello!;https://aoi.js.org]\n   $description[The title contains a hyperlink..]`\n});\n```",
        "tip": null,
        "documentation": "https://aoi.js.org/functions/title",
        "source": "https://github.com/aoijs/aoi.js/tree/v6/src/functions/embeds/title.js",
        "type": "Aoi.Js"
    },
    {
        "function": "$toLocaleUpperCase",
        "description": "$toLocaleUpperCase will change the first character of every word to uppercase.",
        "usage": "$toLocaleUpperCase[text]",
        "parameters": [
            {
                "field": "text",
                "type": "string",
                "description": "The text to change to locale uppercase.",
                "required": true
            }
        ],
        "example": "This will change every first character of a word to uppercase, in this case it would return `Hello, I'm Happy.`:\n\n```javascript\nclient.command({\n    name: \"toLocaleUpperCase\",\n    code: `\n    $toLocaleUpperCase[hello, i'm happy.]\n    `\n});\n```",
        "tip": null,
        "documentation": "https://aoi.js.org/functions/tolocaleuppercase",
        "source": "https://github.com/aoijs/aoi.js/tree/v6/src/functions/misc/toLocaleUpperCase.js",
        "type": "Aoi.Js"
    },
    {
        "function": "$toLowerCase",
        "description": "$toLowerCase will change the given text from uppercase to lowercase.",
        "usage": "$toLowerCase[text]",
        "parameters": [
            {
                "field": "text",
                "type": "string",
                "description": "The text to change to lowercase.",
                "required": true
            }
        ],
        "example": "This will make everything given lowercase, in this case it would return `aoi.js is great.`:\n\n```javascript\nclient.command({\n    name: \"toLowerCase\",\n    code: `\n    $toLowerCase[AOI.JS IS GREAT.]\n    `\n});\n```",
        "tip": null,
        "documentation": "https://aoi.js.org/functions/tolowercase",
        "source": "https://github.com/aoijs/aoi.js/tree/v6/src/functions/misc/toLowerCase.js",
        "type": "Aoi.Js"
    },
    {
        "function": "$toUpperCase",
        "description": "$toUpperCase will change the given text from lowercase to uppercase.",
        "usage": "$toUpperCase[text]",
        "parameters": [
            {
                "field": "text",
                "type": "string",
                "description": "The text to change to uppercase.",
                "required": true
            }
        ],
        "example": "This will make everything given uppercase, in this case it would return `THIS IS AN EXAMPLE`:\n\n```javascript\nclient.command({\n    name: \"toUpperCase\",\n    code: `\n    $toUpperCase[this is an example]\n    `\n});\n```",
        "tip": null,
        "documentation": "https://aoi.js.org/functions/touppercase",
        "source": "https://github.com/aoijs/aoi.js/tree/v6/src/functions/misc/toUpperCase.js",
        "type": "Aoi.Js"
    },
    {
        "function": "$truncate",
        "description": "$truncate will remove all values after a decimal point.",
        "usage": "$truncate[number]",
        "parameters": [
            {
                "field": "[number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number)",
                "type": "number",
                "description": "Number to truncate.",
                "required": true
            }
        ],
        "example": "This will return `775` and remove `.9723` from the given value:\n\n```javascript\nclient.command({\n    name: \"truncate\",\n    code: `\n  $truncate[775.9723]\n  `\n});\n```",
        "tip": null,
        "documentation": "https://aoi.js.org/functions/truncate",
        "source": "https://github.com/aoijs/aoi.js/tree/v6/src/functions/misc/truncate.js",
        "type": "Aoi.Js"
    },
    {
        "function": "$unPinMessage",
        "description": "$unPinMessage will unpin a given message.",
        "usage": "$unPinMessage[messageID?;channelID?]",
        "parameters": [
            {
                "field": "messageID",
                "type": "number",
                "description": "The ID of the message to unpin.",
                "required": false
            },
            {
                "field": "channelID",
                "type": "number",
                "description": "The ID of the channel of where the message is located in.",
                "required": false
            }
        ],
        "example": "This will pin the bot's message and unpin it after two seconds:\n\n```javascript\nclient.command({\n    name: \"unPinMessage\",\n    code: `\n  $unPinMessage[$get[id]]\n  $wait[2s]\n  $pinMessage[$get[id]]\n  $let[id;$sendMessage[Hello!;true]\n  ` // using $let & $get to save the message ID\n});\n```",
        "tip": null,
        "documentation": "https://aoi.js.org/functions/unpinmessage",
        "source": "https://github.com/aoijs/aoi.js/tree/v6/src/functions/guild/unPinMessage.js",
        "type": "Aoi.Js"
    },
    {
        "function": "$unban",
        "description": "$unban will unban a given user.",
        "usage": "$unban[guildID;userID;reason?]",
        "parameters": [
            {
                "field": "guildID",
                "type": "number",
                "description": "The guild ID of where the user is banned in.",
                "required": true
            },
            {
                "field": "userID",
                "type": "number",
                "description": "The ID of the user which will be unbanned.",
                "required": true
            },
            {
                "field": "reason",
                "type": "string",
                "description": "The reason for the unban that will be displayed in the guild's audit logs.",
                "required": false
            }
        ],
        "example": "This will unban a given user:\n\n```javascript\nclient.command({\n    name: \"unban\",\n    code: `\n  $unban[$guildID;$randomUserID;Some reason.]\n  `\n});\n```",
        "tip": null,
        "documentation": "https://aoi.js.org/functions/unban",
        "source": "https://github.com/aoijs/aoi.js/tree/v6/src/functions/misc/unban.js",
        "type": "Aoi.Js"
    },
    {
        "function": "$unlockThread",
        "description": "$unlockThread will unlock a specified thread.",
        "usage": "$unlockThread[channelID;threadID;reason?]",
        "parameters": [
            {
                "field": "channelID",
                "type": "number",
                "description": "The ID of the channel where the thread is a parent of.",
                "required": true
            },
            {
                "field": "threadID",
                "type": "number",
                "description": "The ID of the thread which will be unlocked.",
                "required": true
            },
            {
                "field": "reason",
                "type": "string",
                "description": "The reason which will be displayed in the guild's audit logs.",
                "required": false
            }
        ],
        "example": "This will unlock a given thread:\n\n```javascript\nclient.command({\n    name: \"unlockThread\",\n    code: `\n  $unlockThread[$channelID;threadID;Example reason!]\n  `\n});\n```",
        "tip": null,
        "documentation": "https://aoi.js.org/functions/unlockthread",
        "source": "https://github.com/aoijs/aoi.js/tree/v6/src/functions/guild/unlockThread.js",
        "type": "Aoi.Js"
    },
    {
        "function": "$updateCommands",
        "description": "$updateCommands will reload your commands of your command folder / will make changes effective.",
        "usage": "$updateCommands",
        "parameters": [],
        "example": "This will update the commands of your bot without restarting it:\n\n```javascript\nclient.command({\n    name: \"updateCommands\",\n    code: `\n    $updateCommands\n    `\n});\n```",
        "tip": null,
        "documentation": "https://aoi.js.org/functions/updatecommands",
        "source": "https://github.com/aoijs/aoi.js/tree/v6/src/functions/misc/updateCommands.js",
        "type": "Aoi.Js"
    },
    {
        "function": "$uptime",
        "description": "$uptime will return the bot's uptime.",
        "usage": "$uptime[option?]",
        "parameters": [
            {
                "field": "option",
                "type": "string",
                "description": "How the uptime will be returned (listed below).",
                "required": false
            }
        ],
        "example": "This will return the time of how long your bot is online for:\n\n```javascript\nclient.command({\n    name: \"uptime\",\n    code: `\n  I've been up for $uptime[full]!\n  `\n});\n```",
        "tip": null,
        "documentation": "https://aoi.js.org/functions/uptime",
        "source": "https://github.com/aoijs/aoi.js/tree/v6/src/functions/misc/uptime.js",
        "type": "Aoi.Js"
    },
    {
        "function": "$uri",
        "description": "$uri will encode or decode a URL.",
        "usage": "$uri[text;type?]",
        "parameters": [
            {
                "field": "text",
                "type": "string",
                "description": "Text to encode/decode.",
                "required": true
            },
            {
                "field": "type",
                "type": "string",
                "description": "What to do with the given text. \n1. **encode** (default) \n2. **decode**",
                "required": false
            }
        ],
        "example": "This will encode a given text:\n\n```javascript\nclient.command({\n    name: \"encode\",\n    code: `\n  $uri[aoi.js is great :);encode]\n  `\n});\n```\n\nThis will decode a given text:\n\n```javascript\nclient.command({\n    name: \"decode\",\n    code: `\n  $uri[aoi.js%20is%20great%20%3A);decode]\n  `\n});\n```",
        "tip": null,
        "documentation": "https://aoi.js.org/functions/uri",
        "source": "https://github.com/aoijs/aoi.js/tree/v6/src/functions/misc/uri.js",
        "type": "Aoi.Js"
    },
    {
        "function": "$useChannel",
        "description": "$useChannel will use the specified channel and execute all function inside of it instead.",
        "usage": "$useChannel[channelID]",
        "parameters": [
            {
                "field": "channelID",
                "type": "number",
                "description": "Where to execute the functions.",
                "required": true
            }
        ],
        "example": "This will send an embed in the current channel:\n\n```javascript\nclient.command({\n    name: \"useChannel\",\n    code: `\n    $description[Hello!]\n    $useChannel[$channelID]\n    `\n});\n```",
        "tip": null,
        "documentation": "https://aoi.js.org/functions/usechannel",
        "source": "https://github.com/aoijs/aoi.js/tree/v6/src/functions/guild/useChannel.js",
        "type": "Aoi.Js"
    },
    {
        "function": "$userActivity",
        "description": "$userActivity will return a user's activity.",
        "usage": "$userActivity[guildID?;userID?]",
        "parameters": [
            {
                "field": "guildID",
                "type": "number",
                "description": "The guild ID.",
                "required": false
            },
            {
                "field": "userID",
                "type": "number",
                "description": "The user ID.",
                "required": false
            }
        ],
        "example": "This will return your current activity:\n\n```javascript\nclient.command({\n    name: \"userActivity\",\n    code: `\n  $userActivity[$guildID;$authorID]\n  `\n});\n```",
        "tip": null,
        "documentation": "https://aoi.js.org/functions/useractivity",
        "source": "https://github.com/aoijs/aoi.js/tree/v6/src/functions/misc/userActivity.js",
        "type": "Aoi.Js"
    },
    {
        "function": "$userAvatar",
        "description": "$userAvatar will return the profile picture of a specific user.",
        "usage": "$userAvatar[userID?;size?;dynamic?;format?]",
        "parameters": [
            {
                "field": "userID",
                "type": "number",
                "description": "The ID of the user.",
                "required": false
            },
            {
                "field": "size",
                "type": "string",
                "description": "The size of the image",
                "required": false
            },
            {
                "field": "dynamic",
                "type": "boolean",
                "description": "1. **true** (default) \n2. **false**",
                "required": false
            },
            {
                "field": "format",
                "type": "string",
                "description": "The format of the returned image.",
                "required": false
            }
        ],
        "example": "This will return your profile picture:\n\n```javascript\nclient.command({\n    name: \"userAvatar\",\n    code: `\n  $userAvatar[$authorID;2048;true;webp]\n  `\n});\n```",
        "tip": null,
        "documentation": "https://aoi.js.org/functions/useravatar",
        "source": "https://github.com/aoijs/aoi.js/tree/v6/src/functions/misc/userAvatar.js",
        "type": "Aoi.Js"
    },
    {
        "function": "$userBadges",
        "description": "$userBadges will return the given user's badges.",
        "usage": "$userBadges[userID?;sep?]",
        "parameters": [
            {
                "field": "userID",
                "type": "number",
                "description": "The ID of the user you want the badges of.",
                "required": false
            },
            {
                "field": "sep",
                "type": "string",
                "description": "Separator to split multiple badges from each other \n`` (default)",
                "required": false
            }
        ],
        "example": "This will return your Discord Badges separated by a comma:\n\n```javascript\nclient.command({\n    name: \"userBadges\",\n    code: `\n  $userBadges[$authorID;, ]\n  `\n});\n```",
        "tip": null,
        "documentation": "https://aoi.js.org/functions/userbadges",
        "source": "https://github.com/aoijs/aoi.js/tree/v6/src/functions/misc/userBadges.js",
        "type": "Aoi.Js"
    },
    {
        "function": "$userBanner",
        "description": "$userBanner will return the profile banner of a specific user.",
        "usage": "$userBanner[userID?;size?;dynamic?;extension?]",
        "parameters": [
            {
                "field": "userID",
                "type": "number",
                "description": "The ID of the user.",
                "required": false
            },
            {
                "field": "size",
                "type": "string",
                "description": "The size of the image.",
                "required": false
            },
            {
                "field": "dynamic",
                "type": "boolean",
                "description": "1. **true** (default) \n2. **false**",
                "required": false
            },
            {
                "field": "extension",
                "type": "string",
                "description": "The format of the returned image.",
                "required": false
            }
        ],
        "example": "This will return your profile banner:\n\n```javascript\nclient.command({\n    name: \"userBanner\",\n    code: `\n  $userBanner[$authorID;4096;true;webp]\n  `\n});\n```",
        "tip": null,
        "documentation": "https://aoi.js.org/functions/userbanner",
        "source": "https://github.com/aoijs/aoi.js/tree/v6/src/functions/misc/userBanner.js",
        "type": "Aoi.Js"
    },
    {
        "function": "$userBannerColor",
        "description": "$userBannerColor will return the profile banner color.",
        "usage": "$userBannerColor[userID?]",
        "parameters": [
            {
                "field": "userID",
                "type": "number",
                "description": "The ID of the user.",
                "required": false
            }
        ],
        "example": "This will return your profile banner color (if any):\n\n```javascript\nclient.command({\n    name: \"userBanner\",\n    code: `\n  $userBannerColor[$authorID]\n  `\n});\n```",
        "tip": null,
        "documentation": "https://aoi.js.org/functions/userbannercolor",
        "source": "https://github.com/aoijs/aoi.js/tree/v6/src/functions/misc/userBannerColor.js",
        "type": "Aoi.Js"
    },
    {
        "function": "$userCustomStatus",
        "description": "$userCustomStatus will return a user's custom status.",
        "usage": "$userCustomStatus[guildID?;userID?;option?]",
        "parameters": [
            {
                "field": "guildID",
                "type": "number",
                "description": "The guild ID.",
                "required": false
            },
            {
                "field": "userID",
                "type": "number",
                "description": "The user ID.",
                "required": false
            },
            {
                "field": "option",
                "type": "string",
                "description": "Which part of the status will be returned \n1. **state** (default) - returns the status text \n2. **emoji** - returns the emoji",
                "required": false
            }
        ],
        "example": "This will return your status text if you have any:\n\n```javascript\nclient.command({\n    name: \"userCustomStatus\",\n    code: `\n  $userCustomStatus[$guildID;$authorID;state]\n  `\n});\n```",
        "tip": null,
        "documentation": "https://aoi.js.org/functions/usercustomstatus",
        "source": "https://github.com/aoijs/aoi.js/tree/v6/src/functions/misc/userCustomStatus.js",
        "type": "Aoi.Js"
    },
    {
        "function": "$userDefaultAvatar",
        "description": "$userDefaultAvatar will return the given user's default Discord User Avatar.",
        "usage": "$userDefaultAvatar[userID?]",
        "parameters": [
            {
                "field": "userID",
                "type": "number",
                "description": "The ID of the user.",
                "required": false
            }
        ],
        "example": "This will return your default Discord User Avatar:\n\n```javascript\nclient.command({\n    name: \"userDefaultAvatar\",\n    code: `\n  $userDefaultAvatar[$authorID]\n  `\n});\n```",
        "tip": null,
        "documentation": "https://aoi.js.org/functions/userdefaultavatar",
        "source": "https://github.com/aoijs/aoi.js/tree/v6/src/functions/misc/userDefaultAvatar.js",
        "type": "Aoi.Js"
    },
    {
        "function": "$userDisplayName",
        "description": "$userDisplayName will return the display name of a given user.",
        "usage": "$userDisplayName[userID?]",
        "parameters": [
            {
                "field": "userID",
                "type": "number",
                "description": "The ID of the user.",
                "required": false
            }
        ],
        "example": "This will return your display name, if you have none, it'll return your Discord username:\n\n```javascript\nclient.command({\n    name: \"userDisplayName\",\n    code: `\n  $userDisplayName[$authorID]\n  `\n});\n```",
        "tip": null,
        "documentation": "https://aoi.js.org/functions/userdisplayname",
        "source": "https://github.com/aoijs/aoi.js/tree/v6/src/functions/misc/userDisplayName.js",
        "type": "Aoi.Js"
    },
    {
        "function": "$userExists",
        "description": "$userExists will check if a given user exists.",
        "usage": "$userExists[userID?]",
        "parameters": [
            {
                "field": "userID",
                "type": "number",
                "description": "The user ID.",
                "required": false
            }
        ],
        "example": "This will return either `true` or `false` depending on if the user exists, in this example below it will return `true` as you exist as Discord user:\n\n```javascript\nclient.command({\n    name: \"userExists\",\n    code: `\n  $userExists[$authorID]\n  `\n});\n```",
        "tip": null,
        "documentation": "https://aoi.js.org/functions/userexists",
        "source": "https://github.com/aoijs/aoi.js/tree/v6/src/functions/misc/userExists.js",
        "type": "Aoi.Js"
    },
    {
        "function": "$userGlobalName",
        "description": "$userGlobalName will return the user's global name.",
        "usage": "$userGlobalName[userID?]",
        "parameters": [
            {
                "field": "userID",
                "type": "number",
                "description": "The user ID.",
                "required": false
            }
        ],
        "example": "This will return your global name:\n\n```js\nclient.command({\n    name: `$userGlobalName[$authorID]`\n});\n```",
        "tip": null,
        "documentation": "https://aoi.js.org/functions/userglobalname",
        "source": "https://github.com/aoijs/aoi.js/tree/v6/src/functions/misc/userGlobalName.js",
        "type": "Aoi.Js"
    },
    {
        "function": "$userHighestRole",
        "description": "$userHighestRole will return the highest role of a specific user.",
        "usage": "$userHighestRole[userID?;guildID?;option?]",
        "parameters": [
            {
                "field": "userID",
                "type": "number",
                "description": "The ID of the user you want the highest role to be returned of.",
                "required": false
            },
            {
                "field": "guildID",
                "type": "number",
                "description": "The ID of the guild.",
                "required": false
            },
            {
                "field": "option",
                "type": "string",
                "description": "The option how to return the role \n1. **name** \n2. **id** (default) \n3. **mention**",
                "required": false
            }
        ],
        "example": "This will return the name of your highest role:\n\n```javascript\nclient.command({\n    name: \"userHighestRole\",\n    code: `\n  $userHighestRole[$authorID;$guildID;name]\n  `\n});\n```",
        "tip": null,
        "documentation": "https://aoi.js.org/functions/userhighestrole",
        "source": "https://github.com/aoijs/aoi.js/tree/v6/src/functions/guild/userHighestRole.js",
        "type": "Aoi.Js"
    },
    {
        "function": "$userHoistedRole",
        "description": "$userHoistedRole will return the user's highest role.",
        "usage": "$userHoistedRole[userID?;guildID?;option?]",
        "parameters": [
            {
                "field": "userID",
                "type": "number",
                "description": "The user ID.",
                "required": false
            },
            {
                "field": "guildID",
                "type": "number",
                "description": "The guild ID.",
                "required": false
            },
            {
                "field": "option",
                "type": "string",
                "description": "How the role will be returned.\n1. **id** (default)\n2. **mention**",
                "required": false
            }
        ],
        "example": "This will return the ID of your highest role:\n\n```js\nclient.command({\n    name: \"userHoistedRole\",\n    code: `$userHoistedRole[$authorID;$guildID;id]`\n});\n```",
        "tip": null,
        "documentation": "https://aoi.js.org/functions/userhoistedrole",
        "source": "https://github.com/aoijs/aoi.js/tree/v6/src/functions/guild/userHoistedRole.js",
        "type": "Aoi.Js"
    },
    {
        "function": "$userID",
        "description": "$userID will return a given user's ID.",
        "usage": "$userID[user]",
        "parameters": [
            {
                "field": "user",
                "type": "string",
                "description": "The name of the user who you want the user ID to be returned of.",
                "required": true
            }
        ],
        "example": "This will return your user ID:\n\n```javascript\nclient.command({\n    name: \"userID\",\n    code: `\n  $userID[$username]\n  `\n});\n```",
        "tip": null,
        "documentation": "https://aoi.js.org/functions/userid",
        "source": "https://github.com/aoijs/aoi.js/tree/v6/src/functions/misc/userID.js",
        "type": "Aoi.Js"
    },
    {
        "function": "$userLeaderBoard",
        "description": "$userLeaderBoard will return a leaderboard of a user variable.",
        "usage": "$userLeaderBoard[guildID;variable;order?;custom?;list?;page?;table?]",
        "parameters": [
            {
                "field": "guildID",
                "type": "number",
                "description": "Guild ID.",
                "required": true
            },
            {
                "field": "variable",
                "type": "string",
                "description": "Variable name.",
                "required": true
            },
            {
                "field": "type",
                "type": "string",
                "description": "In which order it will be returned \n1. **asc** (ascending / default) \n2. **desc** (descending)",
                "required": false
            },
            {
                "field": "custom",
                "type": "string",
                "description": "Formatting.",
                "required": false
            },
            {
                "field": "list",
                "type": "number",
                "description": "How many to list.",
                "required": false
            },
            {
                "field": "page",
                "type": "number",
                "description": "Which page to list.",
                "required": false
            },
            {
                "field": "table",
                "type": "string",
                "description": "Variable table.",
                "required": false
            }
        ],
        "example": "This will returns a leaderboard of the \"Example\" variable:\n\n```javascript\nclient.command({\n    name: \"userLeaderBoard\",\n    code: `\n    $userLeaderBoard[$guildID;Example;asc;{top} - {username} - {value};10;1;main]\n    `\n});\n```",
        "tip": null,
        "documentation": "https://aoi.js.org/functions/userleaderboard",
        "source": "https://github.com/aoijs/aoi.js/tree/v6/src/functions/misc/userLeaderBoard.js",
        "type": "Aoi.Js"
    },
    {
        "function": "$userLowestRole",
        "description": "$userLowestRole will return the lowest role of a specific user.",
        "usage": "$userLowestRole[userID?;guildID?]",
        "parameters": [
            {
                "field": "userID",
                "type": "number",
                "description": "ID of the user you want the lowest role to be returned of.",
                "required": false
            },
            {
                "field": "guildID",
                "type": "number",
                "description": "The ID of the guild.",
                "required": false
            }
        ],
        "example": "This will return the ID of your lowest role:\n\n```javascript\nclient.command({\n    name: \"userLowestRole\",\n    code: `\n  $userLowestRole[$authorID;$guildID]\n  `\n});\n```",
        "tip": null,
        "documentation": "https://aoi.js.org/functions/userlowestrole",
        "source": "https://github.com/aoijs/aoi.js/tree/v6/src/functions/guild/userLowestRole.js",
        "type": "Aoi.Js"
    },
    {
        "function": "$userNickname",
        "description": "$userNickname will return a user's nickname.",
        "usage": "$userNickname[guildID?;userID?;returnUser?]",
        "parameters": [
            {
                "field": "guildID",
                "type": "number",
                "description": "The ID of the guild.",
                "required": false
            },
            {
                "field": "userID",
                "type": "number",
                "description": "The ID of the user.",
                "required": false
            },
            {
                "field": "returnUser",
                "type": "boolean",
                "description": "Return the username \n1. **true** \n2. **false** (default)",
                "required": false
            }
        ],
        "example": "This will return your nickname, if you have none, it'll return your Discord username:\n\n```javascript\nclient.command({\n    name: \"userNickname\",\n    code: `\n  $userNickname[$guildID;$authorID;true]\n  `\n});\n```",
        "tip": null,
        "documentation": "https://aoi.js.org/functions/usernickname",
        "source": "https://github.com/aoijs/aoi.js/tree/v6/src/functions/guild/userNickname.js",
        "type": "Aoi.Js"
    },
    {
        "function": "$userPerms",
        "description": "$userPerms will return a user's permission on a specific guild.",
        "usage": "$userPerms[userID?;sep?;guildID?]",
        "parameters": [
            {
                "field": "userID",
                "type": "number",
                "description": "The user ID.",
                "required": false
            },
            {
                "field": "sep",
                "type": "string",
                "description": "Separator to separate multiple returned values.",
                "required": false
            },
            {
                "field": "guildID",
                "type": "number",
                "description": "The guild ID.",
                "required": false
            }
        ],
        "example": "This will return your permissions:\n\n```javascript\nclient.command({\n    name: \"userPerms\",\n    code: `\n  $userPerms[$authorID;, ;$guildID]\n  `\n});\n```",
        "tip": null,
        "documentation": "https://aoi.js.org/functions/userperms",
        "source": "https://github.com/aoijs/aoi.js/tree/v6/src/functions/guild/userPerms.js",
        "type": "Aoi.Js"
    },
    {
        "function": "$userPlatform",
        "description": "$userPlatform will return the platform which the user is using Discord on.",
        "usage": "$userPlatform[userID?;guildID?;sep?]",
        "parameters": [
            {
                "field": "userID",
                "type": "number",
                "description": "ID of the user.",
                "required": false
            },
            {
                "field": "guildID",
                "type": "number",
                "description": "The guild ID of where the user is present in.",
                "required": false
            },
            {
                "field": "sep",
                "type": "string",
                "description": "The separator to split multiple platforms.",
                "required": false
            }
        ],
        "example": "This will return the platform you're using Discord on:\n\n```javascript\nclient.command({\n    name: \"userPlatform\",\n    code: `\n  $userPlatform[$authorID;$guildID;, ]\n  `\n});\n```",
        "tip": null,
        "documentation": "https://aoi.js.org/functions/userplatform",
        "source": "https://github.com/aoijs/aoi.js/tree/v6/src/functions/misc/userPlatform.js",
        "type": "Aoi.Js"
    },
    {
        "function": "$userReacted",
        "description": "$userReacted will check if a specified user reacted with a specific emoji to a specific message and return either true or false.",
        "usage": "$userReacted[channelID;messageID;userID;emoji]",
        "parameters": [
            {
                "field": "guildID",
                "type": "number",
                "description": "The guild ID.",
                "required": true
            },
            {
                "field": "messageID",
                "type": "number",
                "description": "The message ID.",
                "required": true
            },
            {
                "field": "userID",
                "type": "number",
                "description": "The user ID.",
                "required": true
            },
            {
                "field": "emoji",
                "type": "string",
                "description": "Emoji to check for.",
                "required": true
            }
        ],
        "example": "This will return `true` as the bot reacted to the initial command message:\n\n```javascript\nclient.command({\n    name: \"userReacted\",\n    code: `\n$userReacted[$channelID;$messageID;$clientID;😩]\n$addCmdReactions[😩]\n  `\n});\n```",
        "tip": null,
        "documentation": "https://aoi.js.org/functions/userreacted",
        "source": "https://github.com/aoijs/aoi.js/tree/v6/src/functions/misc/userReacted.js",
        "type": "Aoi.Js"
    },
    {
        "function": "$userRoleColor",
        "description": "$userRoleColor will return the role color of a user's highest assigned role.",
        "usage": "$userRoleColor[userID?;guildID?]",
        "parameters": [
            {
                "field": "userID",
                "type": "number",
                "description": "The user ID.",
                "required": false
            },
            {
                "field": "guildID",
                "type": "number",
                "description": "The guild ID.",
                "required": false
            }
        ],
        "example": "This will return the Color of your highest role:\n\n```javascript\nclient.command({\n    name: \"userRoleColor\",\n    code: `\n  $userRoleColor[$authorID;$guildID]\n  `\n});\n```",
        "tip": null,
        "documentation": "https://aoi.js.org/functions/userrolecolor",
        "source": "https://github.com/aoijs/aoi.js/tree/v6/src/functions/misc/userRoleColor.js",
        "type": "Aoi.Js"
    },
    {
        "function": "$userRoles",
        "description": "$userRoles will return the roles of a specific user.",
        "usage": "$userRoles[userID?;guildID?;option?;sep?]",
        "parameters": [
            {
                "field": "userID",
                "type": "number",
                "description": "The user ID.",
                "required": false
            },
            {
                "field": "guildID",
                "type": "number",
                "description": "The guild ID.",
                "required": false
            },
            {
                "field": "option",
                "type": "string",
                "description": "How to return the roles \n1. **name** (default) \n2. **id** \n3. **mention**",
                "required": false
            },
            {
                "field": "sep",
                "type": "string",
                "description": "Separator to separate multiple returned values.",
                "required": false
            }
        ],
        "example": "This will return your roles:\n\n```javascript\nclient.command({\n    name: \"userRoles\",\n    code: `\n  $userRoles[$authorID;$guildID;id;, ]\n  `\n});\n```",
        "tip": null,
        "documentation": "https://aoi.js.org/functions/userroles",
        "source": "https://github.com/aoijs/aoi.js/tree/v6/src/functions/guild/userRoles.js",
        "type": "Aoi.Js"
    },
    {
        "function": "$userRolesCount",
        "description": "$userRolesCount will return a user's role count.",
        "usage": "$userRolesCount[userID?;guildID?]",
        "parameters": [
            {
                "field": "userID",
                "type": "number",
                "description": "The user ID.",
                "required": false
            },
            {
                "field": "guildID",
                "type": "number",
                "description": "The guild ID.",
                "required": false
            }
        ],
        "example": "This will return the amount of roles you have assigned:\n\n```javascript\nclient.command({\n    name: \"userRolesCount\",\n    code: `\n  $userRolesCount[$authorID;$guildID]\n  `\n});\n```",
        "tip": null,
        "documentation": "https://aoi.js.org/functions/userrolescount",
        "source": "https://github.com/aoijs/aoi.js/tree/v6/src/functions/guild/userRolesCount.js",
        "type": "Aoi.Js"
    },
    {
        "function": "$userStatus",
        "description": "$userStatus will return a user's presence.",
        "usage": "$userStatus[guildID?;userID?]",
        "parameters": [
            {
                "field": "guildID",
                "type": "number",
                "description": "The guild ID of which guild you want to retrieve the status of.",
                "required": false
            },
            {
                "field": "userID",
                "type": "number",
                "description": "The ID of the user you want to return the status of.",
                "required": false
            }
        ],
        "example": "This will either return `idle` `online` `invisible` or `dnd` depending on your current presence:\n\n```javascript\nclient.command({\n    name: \"userStatus\",\n    code: `\n  $userStatus[$guildID;$authorID]\n  `\n});\n```",
        "tip": null,
        "documentation": "https://aoi.js.org/functions/userstatus",
        "source": "https://github.com/aoijs/aoi.js/tree/v6/src/functions/guild/userStatus.js",
        "type": "Aoi.Js"
    },
    {
        "function": "$userTag",
        "description": "$userTag will return a user's username and discriminator.",
        "usage": "$userTag[userID?]",
        "parameters": [
            {
                "field": "userID",
                "type": "number",
                "description": "The user ID.",
                "required": false
            }
        ],
        "example": "This will return your username and discriminator:\n\n```javascript\nclient.command({\n    name: \"userTag\",\n    code: `\n  $userTag[$authorID]\n  `\n});\n```",
        "tip": null,
        "documentation": "https://aoi.js.org/functions/usertag",
        "source": "https://github.com/aoijs/aoi.js/tree/v6/src/functions/guild/userTag.js",
        "type": "Aoi.Js"
    },
    {
        "function": "$username",
        "description": "$username will return a user's username.",
        "usage": "$username[userID?]",
        "parameters": [
            {
                "field": "userID",
                "type": "number",
                "description": "The user ID.",
                "required": false
            }
        ],
        "example": "This will return your username:\n\n```javascript\nclient.command({\n    name: \"username\",\n    code: `\n  $username[$authorID]\n  `\n});\n```",
        "tip": null,
        "documentation": "https://aoi.js.org/functions/username",
        "source": "https://github.com/aoijs/aoi.js/tree/v6/src/functions/misc/username.js",
        "type": "Aoi.Js"
    },
    {
        "function": "$usersBanned",
        "description": "$usersBanned will return the banned users of a guild.",
        "usage": "$usersBanned[guildID?;force?;option?;sep?]",
        "parameters": [
            {
                "field": "guildID",
                "type": "number",
                "description": "The guild ID.",
                "required": false
            },
            {
                "field": "force",
                "type": "boolean",
                "description": "1. **true** \n2. **false** (default)",
                "required": false
            },
            {
                "field": "option",
                "type": "string",
                "description": "How to return the banned users \n1. **id** (default) \n1. **username** \n1. **mention**",
                "required": false
            },
            {
                "field": "sep",
                "type": "string",
                "description": "Separator to separate multiple returned values.",
                "required": false
            }
        ],
        "example": "This will return the banned users of your guild as mention in an embed:\n\n```javascript\nclient.command({\n    name: \"usersBanned\",\n    code: `\n$description[$usersBanned[$guildID;false;mention;, ]]\n  `\n});\n```",
        "tip": null,
        "documentation": "https://aoi.js.org/functions/usersbanned",
        "source": "https://github.com/aoijs/aoi.js/tree/v6/src/functions/guild/usersBanned.js",
        "type": "Aoi.Js"
    },
    {
        "function": "$usersInChannel",
        "description": "$usersInChannel will return all users who are connected to a specified voice channel.",
        "usage": "$usersInChannel[channelID;option?;sep?]",
        "parameters": [
            {
                "field": "channelID",
                "type": "number",
                "description": "Voice Channel ID.",
                "required": true
            },
            {
                "field": "option",
                "type": "string",
                "description": "How to return the users \n1. **id** (default) \n2. **user** - mentions the users",
                "required": false
            },
            {
                "field": "sep",
                "type": "string",
                "description": "Separator to separate multiple returned values.",
                "required": false
            }
        ],
        "example": "This will return the users connected to a voice channel:\n\n```javascript\nclient.command({\n    name: \"usersInChannel\",\n    code: `\n  $usersInChannel[$voiceID;user;, ]\n  `\n});\n```",
        "tip": null,
        "documentation": "https://aoi.js.org/functions/usersinchannel",
        "source": "https://github.com/aoijs/aoi.js/tree/v6/src/functions/guild/usersInChannel.js",
        "type": "Aoi.Js"
    },
    {
        "function": "$usersWithRole",
        "description": "$usersWithRole will return the users who have a specific role.",
        "usage": "$usersWithRole[roleID;guildID?;option?;sep?]",
        "parameters": [
            {
                "field": "roleID",
                "type": "number",
                "description": "The role ID.",
                "required": true
            },
            {
                "field": "guildID",
                "type": "number",
                "description": "The guild ID.",
                "required": false
            },
            {
                "field": "option",
                "type": "string",
                "description": "How to return the users \n1. **id** (default) \n2. **mention**",
                "required": false
            },
            {
                "field": "sep",
                "type": "string",
                "description": "Separator to separate multiple returned values.",
                "required": false
            }
        ],
        "example": "This will return the users of a specific role, make sure to replace the roleID:\n\n```javascript\nclient.command({\n    name: \"usersWithRole\",\n    code: `\n  $usersWithRole[roleID;$guildID;id;, ]\n  `\n});\n```",
        "tip": null,
        "documentation": "https://aoi.js.org/functions/userswithrole",
        "source": "https://github.com/aoijs/aoi.js/tree/v6/src/functions/guild/usersWithRole.js",
        "type": "Aoi.Js"
    },
    {
        "function": "$variablesCount",
        "description": "$variablesCount will return the total amount of variables added.",
        "usage": "$variablesCount",
        "parameters": [],
        "example": "This will return your total amount of variables:\n\n```javascript\nclient.command({\n    name: \"variablesCount\",\n    code: `\n    $variablesCount\n    `\n});\n```",
        "tip": null,
        "documentation": "https://aoi.js.org/functions/variablescount",
        "source": "https://github.com/aoijs/aoi.js/tree/v6/src/functions/database/variablesCount.js",
        "type": "Aoi.Js"
    },
    {
        "function": "$voiceID",
        "description": "$voiceID will return the current or given voice ID of a user.",
        "usage": "$voiceID[userID?]",
        "parameters": [
            {
                "field": "userID",
                "type": "number",
                "description": "The ID of the user you want to retrieve the current voice channel of.",
                "required": false
            }
        ],
        "example": "This will return your current voice channel ID (if any):\n\n```javascript\nclient.command({\n    name: \"voiceID\",\n    code: `\n    $voiceID[$authorID]\n  `\n});\n```",
        "tip": null,
        "documentation": "https://aoi.js.org/functions/voiceid",
        "source": "https://github.com/aoijs/aoi.js/tree/v6/src/functions/misc/voiceID.js",
        "type": "Aoi.Js"
    },
    {
        "function": "$voiceMemberCount",
        "description": "$voiceMemberCount will return the total amount of members in the specified voice channel.",
        "usage": "$voiceMemberCount[channelID]",
        "parameters": [
            {
                "field": "channelID",
                "type": "number",
                "description": "The ID of the voice channel.",
                "required": true
            }
        ],
        "example": "```javascript\nclient.command({\n    name: \"voiceMemberCount\",\n    code: `\n  $voiceMemberCount[1182613173220675617] \n  $comment[Example ID value of a voice channel]\n  `\n});\n```",
        "tip": null,
        "documentation": "https://aoi.js.org/functions/voicemembercount",
        "source": "https://github.com/aoijs/aoi.js/tree/v6/src/functions/guild/voiceMemberCount.js",
        "type": "Aoi.Js"
    },
    {
        "function": "$wait",
        "description": "$wait will delay functions from executing for a given time.",
        "usage": "$wait[time]",
        "parameters": [
            {
                "field": "time",
                "type": "string",
                "description": "How long to delay the execution.",
                "required": true
            }
        ],
        "example": "This will send an embed with a delay of 5 seconds:\n\n```javascript\nclient.command({\n    name: \"wait\",\n    code: `\n    $description[Hello!]\n    $wait[5s]\n    $sendMessage[Oh, what's that?]\n    `\n});\n```",
        "tip": null,
        "documentation": "https://aoi.js.org/functions/wait",
        "source": "https://github.com/aoijs/aoi.js/tree/v6/src/functions/misc/wait.js",
        "type": "Aoi.Js"
    },
    {
        "function": "$webhookExists",
        "description": "$webhookExists will check if a given webhook exists.",
        "usage": "$webhookExists[id;token]",
        "parameters": [
            {
                "field": "id",
                "type": "number",
                "description": "Webhook ID.",
                "required": true
            },
            {
                "field": "token",
                "type": "string",
                "description": "Webhook token.",
                "required": true
            }
        ],
        "example": "This will check if the given webhook exists:\n\n```javascript\nclient.command({\n    name: \"webhookExists\",\n    code: `\n  $webhookExists[$splitText[1];$splitText[2]]\n  $textSplit[$createWebhook[$channelID;aoi.js is great;$userAvatar[$authorID];Just testing.;, ];, ]\n  `\n});\n```",
        "tip": null,
        "documentation": "https://aoi.js.org/functions/webhookexists",
        "source": "https://github.com/aoijs/aoi.js/tree/v6/src/functions/misc/webhookExists.js",
        "type": "Aoi.Js"
    },
    {
        "function": "$webhookUpdate",
        "description": "$webhookUpdate holds data for the channel the webhook was updated in. (webhookUpdate event)",
        "usage": "$webhookUpdate[option]",
        "parameters": [
            {
                "field": "option",
                "type": "string",
                "description": "Option to retrieve.",
                "required": true
            }
        ],
        "example": null,
        "tip": null,
        "documentation": "https://aoi.js.org/functions/webhookupdate",
        "source": "https://github.com/aoijs/aoi.js/tree/v6/src/functions/misc/webhookUpdate.js",
        "type": "Aoi.Js"
    },
    {
        "function": "$writeFile",
        "description": "$writeFile will create a new file in the bot's directory.",
        "usage": "$writeFile[path;text;encoding?]",
        "parameters": [
            {
                "field": "path",
                "type": "string",
                "description": "Where to create the file.",
                "required": true
            },
            {
                "field": "text",
                "type": "string",
                "description": "What the content of the file should be.",
                "required": true
            },
            {
                "field": "encoding",
                "type": "string",
                "description": "Text/File encoding.",
                "required": false
            }
        ],
        "example": "This will create a file called \"testing.txt\" with the content of \"Hello!\":\n\n```javascript\nclient.command({\n    name: \"writeFile\",\n    code: `\n    $writeFile[./testing.txt;Hello!;utf8]\n    `\n});\n```",
        "tip": null,
        "documentation": "https://aoi.js.org/functions/writefile",
        "source": "https://github.com/aoijs/aoi.js/tree/v6/src/functions/misc/writeFile.js",
        "type": "Aoi.Js"
    },
    {
        "function": "$year",
        "description": "$year will return the current year in CST.",
        "usage": "$year",
        "parameters": [],
        "example": "This will returns the current year:\n\n```javascript\nclient.command({\n    name: \"year\",\n    code: `\n    $year\n    `\n});\n```\n\nYou can change the timezone using `$timezone`:\n\n```javascript\nclient.command({\n    name: \"year\",\n    code: `\n    $year \n    $timezone[America/New_York]\n    ` // returns current year in New York\n});\n```",
        "tip": null,
        "documentation": "https://aoi.js.org/functions/year",
        "source": "https://github.com/aoijs/aoi.js/tree/v6/src/functions/misc/year.js",
        "type": "Aoi.Js"
    },
    {
        "function": "$invite",
        "description": "$invite returns information about the invite.",
        "usage": "$invite",
        "parameters": [],
        "example": "This returns information about the invite.\n\n```javascript\n$invite;\n```",
        "tip": "This requires aoi.invite installed.",
        "documentation": "https://aoi.js.org/extensions/aoijs/aoiinvite/invite/invite",
        "source": "https://github.com/aoijs/aoi.invite",
        "type": "Aoi.Invite"
    },
    {
        "function": "$inviteChannelID",
        "description": "$inviteChannelID returns the ID of the channel the invite is for.",
        "usage": "$inviteChannelID",
        "parameters": [],
        "example": "This returns the ID of the channel the invite is for.\n\n```javascript\n$inviteChannelID;\n```",
        "tip": "This requires aoi.invite installed.",
        "documentation": "https://aoi.js.org/extensions/aoijs/aoiinvite/invite/invitechannelid",
        "source": "https://github.com/aoijs/aoi.invite",
        "type": "Aoi.Invite"
    },
    {
        "function": "$inviteCode",
        "description": "$inviteCode returns the code of the invite.",
        "usage": "$inviteCode",
        "parameters": [],
        "example": "This returns the code of the invite.\n\n```javascript\n$inviteCode;\n```",
        "tip": "This requires aoi.invite installed.",
        "documentation": "https://aoi.js.org/extensions/aoijs/aoiinvite/invite/invitecode",
        "source": "https://github.com/aoijs/aoi.invite",
        "type": "Aoi.Invite"
    },
    {
        "function": "$inviteEventInfo",
        "description": "$inviteEventInfo returns the inviteSystem event's information",
        "usage": "$inviteEventInfo[field[options]]",
        "parameters": [],
        "example": "Returns the inviteSystem event's information\n\n```javascript\n$inviteEventInfo\n//or\n\n$inviteEventInfo[inviter]\n//or\n\n$getObjectProperty[name;inviter]\n$createObject[name;$inviteEventInfo]\n```",
        "tip": "This requires aoi.invite installed.",
        "documentation": "https://aoi.js.org/extensions/aoijs/aoiinvite/invite/inviteeventinfo",
        "source": "https://github.com/aoijs/aoi.invite",
        "type": "Aoi.Invite"
    },
    {
        "function": "$inviteGuildID",
        "description": "$inviteGuildID returns the guild ID of the invite.",
        "usage": "$inviteGuildID",
        "parameters": [],
        "example": "This returns the guild ID of the invite.\n\n```javascript\n$inviteGuildID;\n```",
        "tip": "This requires aoi.invite installed.",
        "documentation": "https://aoi.js.org/extensions/aoijs/aoiinvite/invite/inviteguildid",
        "source": "https://github.com/aoijs/aoi.invite",
        "type": "Aoi.Invite"
    },
    {
        "function": "$inviteJoins",
        "description": "$inviteJoins returns the member ids who joined with the invite",
        "usage": "$inviteJoins[field[code];field[guildId];field[separator]]",
        "parameters": [],
        "example": "Returns the member ids who joined with the invite\n\n```javascript\n$inviteJoins[inviteCode;$guildID]\n```",
        "tip": "This requires aoi.invite installed.",
        "documentation": "https://aoi.js.org/extensions/aoijs/aoiinvite/invite/invitejoins",
        "source": "https://github.com/aoijs/aoi.invite",
        "type": "Aoi.Invite"
    },
    {
        "function": "$inviteLeaderboard",
        "description": "$inviteLeaderboard will return the invite leaderboard.",
        "usage": "$inviteLeaderboard[field[guildId];field[page];field[limit];field[format]]",
        "parameters": [],
        "example": "Returns the invite leaderboard\n\n```javascript\n$inviteLeaderboard\n//or\n\n$inviteLeaderboard[$guildID;1;10;{position}. {invitername} - {total} invites]\n```",
        "tip": "This requires aoi.invite installed.",
        "documentation": "https://aoi.js.org/extensions/aoijs/aoiinvite/invite/inviteleaderboard",
        "source": "https://github.com/aoijs/aoi.invite",
        "type": "Aoi.Invite"
    },
    {
        "function": "$inviteMaxUses",
        "description": "$inviteMaxUses returns the maximum uses of the invite.",
        "usage": "$inviteMaxUses",
        "parameters": [],
        "example": "This returns the maximum uses of the invite.\n\n```javascript\n$inviteMaxUses;\n```",
        "tip": "This requires aoi.invite installed.",
        "documentation": "https://aoi.js.org/extensions/aoijs/aoiinvite/invite/invitemaxuses",
        "source": "https://github.com/aoijs/aoi.invite",
        "type": "Aoi.Invite"
    },
    {
        "function": "$inviteURL",
        "description": "$inviteURL returns the URL of the invite.",
        "usage": "$inviteURL",
        "parameters": [],
        "example": "This returns the URL of the invite.\n\n```javascript\n$inviteURL;\n```",
        "tip": "This requires aoi.invite installed.",
        "documentation": "https://aoi.js.org/extensions/aoijs/aoiinvite/invite/inviteurl",
        "source": "https://github.com/aoijs/aoi.invite",
        "type": "Aoi.Invite"
    },
    {
        "function": "$inviteUserID",
        "description": "$inviteUserID returns the ID of the user that created the invite.",
        "usage": "$inviteUserID",
        "parameters": [],
        "example": "This returns the ID of the user that created the invite.\n\n```javascript\n$inviteUserID;\n```",
        "tip": "This requires aoi.invite installed.",
        "documentation": "https://aoi.js.org/extensions/aoijs/aoiinvite/invite/inviteuserid",
        "source": "https://github.com/aoijs/aoi.invite",
        "type": "Aoi.Invite"
    },
    {
        "function": "$inviteeInfo",
        "description": "$inviteeInfo returns the invitee's information.",
        "usage": "$inviteeInfo[field[userId];field[guildId];field[options]]",
        "parameters": [],
        "example": "Returns the invitee's information\n\n```javascript\n$inviteeInfo\n//or\n$inviteeInfo[$authorID;$guildId;inviter]\n//or\n$getObjectProperty[name;inviter]\n$createObject[name;$inviteeInfo[$authorID;$guildID;all]]\n```",
        "tip": "This requires aoi.invite installed.",
        "documentation": "https://aoi.js.org/extensions/aoijs/aoiinvite/invite/inviteeinfo",
        "source": "https://github.com/aoijs/aoi.invite",
        "type": "Aoi.Invite"
    },
    {
        "function": "$inviterInfo",
        "description": "$inviterInfo will return the inviter's information",
        "usage": "$inviterInfo[field[userId];field[guildId];field[options]]",
        "parameters": [],
        "example": "Returns the inviter's information\n\n```javascript\n$inviterInfo\n//or\n$inviterInfo[$authorID;$guildId;codes]\n//or\n$getObjectProperty[name;codes]\n$createObject[name;$inviterInfo[$authorID;$guildID;all]]\n```",
        "tip": "This requires aoi.invite installed.",
        "documentation": "https://aoi.js.org/extensions/aoijs/aoiinvite/invite/inviterinfo",
        "source": "https://github.com/aoijs/aoi.invite",
        "type": "Aoi.Invite"
    },
    {
        "function": "$modifyInvite",
        "description": "$modifyInvite will modify an invite.",
        "usage": "$modifyInvite[field[inviter];field[guildId];field[options];field[value]]",
        "parameters": [],
        "example": "Modifies the invite\n\n```javascript\n$modifyInvite[$authorID;$guildID;counts.total;10]\n```",
        "tip": "This requires aoi.invite installed.",
        "documentation": "https://aoi.js.org/extensions/aoijs/aoiinvite/invite/modifyinvite",
        "source": "https://github.com/aoijs/aoi.invite",
        "type": "Aoi.Invite"
    },
    {
        "function": "$resetGuildInvites",
        "description": "$resetGuildInvites will reset the invites of a guild.",
        "usage": "$resetGuildInvites[field[guildId]]",
        "parameters": [],
        "example": "Resets the invites of a guild\n\n```javascript\n$resetGuildInvites;\n//or\n\n$resetGuildInvites[$guildID];\n```",
        "tip": "This requires aoi.invite installed.",
        "documentation": "https://aoi.js.org/extensions/aoijs/aoiinvite/invite/resetguildinvites",
        "source": "https://github.com/aoijs/aoi.invite",
        "type": "Aoi.Invite"
    },
    {
        "function": "$resetInvites",
        "description": "$resetInvites will reset the invites of a user.",
        "usage": "$resetInvites[field[guildId];field[userId]]",
        "parameters": [],
        "example": "Resets the invites of a user\n\n```javascript\n$resetInvites\n//or\n\n$resetInvites[$guildID;$authorID]\n```",
        "tip": "This requires aoi.invite installed.",
        "documentation": "https://aoi.js.org/extensions/aoijs/aoiinvite/invite/resetinvites",
        "source": "https://github.com/aoijs/aoi.invite",
        "type": "Aoi.Invite"
    },
    {
        "function": "$addFilter",
        "description": "$addFilter will add given filters.",
        "usage": "$addFilter[filter]",
        "parameters": [
            {
                "field": "filter",
                "type": "string",
                "description": "JSON format",
                "required": true
            }
        ],
        "example": "This will add `nightCore` and `bassBoost` filters:\n\n```javascript\nclient.command({\n    name: \"addFilter\",\n    code: `\n    $addFilter[{\"nightCore\": \"1\", \"bassBoost\": \"0.3\"}]\n  `\n});\n```",
        "tip": "This requires aoi.music installed.",
        "documentation": "https://aoi.js.org/extensions/aoijs/aoimusic/music/addfilter",
        "source": "https://github.com/aoijs/aoi.music",
        "type": "Aoi.Music"
    },
    {
        "function": "$autoPlay",
        "description": "$autoPlay will autoplay songs.",
        "usage": "$autoPlay[type?]",
        "parameters": [
            {
                "field": "type",
                "type": "string",
                "description": "Type \n1. **relative** (default) \n2. **spotify** \n3. **youtube** \n4. **soundcloud** \n5. **none**",
                "required": false
            }
        ],
        "example": "This will automatically add songs to your queue from the given type:\n\n```javascript\nclient.command({\n    name: \"autoPlay\",\n    code: `\n    $autoPlay[relative]\n  `\n});\n```",
        "tip": "This requires aoi.music installed.",
        "documentation": "https://aoi.js.org/extensions/aoijs/aoimusic/music/autoplay",
        "source": "https://github.com/aoijs/aoi.music",
        "type": "Aoi.Music"
    },
    {
        "function": "$clearQueue",
        "description": "$clearQueue will clear the current player's queue.",
        "usage": "$clearQueue",
        "parameters": [],
        "example": "This will clear the current queue:\n\n```javascript\nclient.command({\n    name: \"clearQueue\",\n    code: `\n    $clearQueue\n  `\n});\n```",
        "tip": "This requires aoi.music installed.",
        "documentation": "https://aoi.js.org/extensions/aoijs/aoimusic/music/clearqueue",
        "source": "https://github.com/aoijs/aoi.music",
        "type": "Aoi.Music"
    },
    {
        "function": "$getCurrentTrackDuration",
        "description": "$getCurrentTrackDuration will return the current track duration.",
        "usage": "$getCurrentTrackDuration",
        "parameters": [],
        "example": "This will return the current track duration in ms:\n\n```javascript\nclient.command({\n    name: \"getCurrentTrackDuration\",\n    code: `\n    $getCurrentTrackDuration\n  `\n});\n```",
        "tip": "This requires aoi.music installed.",
        "documentation": "https://aoi.js.org/extensions/aoijs/aoimusic/music/getcurrenttrackduration",
        "source": "https://github.com/aoijs/aoi.music",
        "type": "Aoi.Music"
    },
    {
        "function": "$getFilters",
        "description": "$getFilters will return all active filters.",
        "usage": "$getFilters",
        "parameters": [],
        "example": "This will return the current applied filters:\n\n```javascript\nclient.command({\n    name: \"getFilters\",\n    code: `\n    $getFilters\n  `\n});\n```",
        "tip": "This requires aoi.music installed.",
        "documentation": "https://aoi.js.org/extensions/aoijs/aoimusic/music/getfilters",
        "source": "https://github.com/aoijs/aoi.music",
        "type": "Aoi.Music"
    },
    {
        "function": "$hasPlayer",
        "description": "$hasPlayer will return either true or false depending on if the current instance has a player in the current guild.",
        "usage": "$hasPlayer",
        "parameters": [],
        "example": "This will return either true or false depending on if your bot has a player in the current guild or not:\n\n```javascript\nclient.command({\n    name: \"hasPlayer\",\n    code: `\n    $hasPlayer\n  `\n});\n```",
        "tip": "This requires aoi.music installed.",
        "documentation": "https://aoi.js.org/extensions/aoijs/aoimusic/music/hasplayer",
        "source": "https://github.com/aoijs/aoi.music",
        "type": "Aoi.Music"
    },
    {
        "function": "$joinVC",
        "description": "$joinVC will make your bot join a specified voice channel.",
        "usage": "$joinVC[voiceID?;selfDeaf?;selfMute?;speaker?;audioPlayerType?;debug?]",
        "parameters": [
            {
                "field": "voiceID",
                "type": "number",
                "description": "voice channel id",
                "required": false
            },
            {
                "field": "selfDeaf",
                "type": "string",
                "description": "deafen when joining Voice Channel \n1. **yes** (default) \n2. **no**",
                "required": false
            },
            {
                "field": "selfMute",
                "type": "string",
                "description": "mute when joining Voice Channel \n1. **no** (default) \n2. **yes**",
                "required": false
            },
            {
                "field": "speaker",
                "type": "string",
                "description": "become speaker when joining Stage Channel \n1. **yes** (default) \n2. **no**",
                "required": false
            },
            {
                "field": "audioPlayerType",
                "type": "string",
                "description": "audio Player Type \n1. **default** (default)",
                "required": false
            },
            {
                "field": "debug",
                "type": "string",
                "description": "enable debug (not recommended) \n1. **no** (default) \n2. **yes**",
                "required": false
            }
        ],
        "example": "This will make your bot join the voice channel you're currently in:\n\n```javascript\nclient.command({\n    name: \"joinVC\",\n    code: `\n    $joinVC[$voiceID;yes;no;yes;default;no]\n  `\n});\n```",
        "tip": "This requires aoi.music installed.",
        "documentation": "https://aoi.js.org/extensions/aoijs/aoimusic/music/joinvc",
        "source": "https://github.com/aoijs/aoi.music",
        "type": "Aoi.Music"
    },
    {
        "function": "$leaveVC",
        "description": "$leaveVC will make your bot leave the current Voice Channel.",
        "usage": "$leaveVC[guildID?]",
        "parameters": [
            {
                "field": "guildID",
                "type": "number",
                "description": "guild ID",
                "required": false
            }
        ],
        "example": "This will make your bot leave the current voice channel in the current guild (if any):\n\n```javascript\nclient.command({\n    name: \"leaveVC\",\n    code: `\n    $leaveVC[$guildID]\n  `\n});\n```",
        "tip": "This requires aoi.music installed.",
        "documentation": "https://aoi.js.org/extensions/aoijs/aoimusic/music/leavevc",
        "source": "https://github.com/aoijs/aoi.music",
        "type": "Aoi.Music"
    },
    {
        "function": "$loopMode",
        "description": "$loopMode will either loop the current track, queue or end the loop.",
        "usage": "$loopMode[mode?]",
        "parameters": [
            {
                "field": "mode",
                "type": "string",
                "description": "loop mode \n1. **queue** (default) \n2. **song** \n3. **none**",
                "required": false
            }
        ],
        "example": "This will set the loop mode to the current track:\n\n```javascript\nclient.command({\n    name: \"loopMode\",\n    code: `\n    $loopMode[song]\n  `\n});\n```",
        "tip": "This requires aoi.music installed.",
        "documentation": "https://aoi.js.org/extensions/aoijs/aoimusic/music/loopmode",
        "source": "https://github.com/aoijs/aoi.music",
        "type": "Aoi.Music"
    },
    {
        "function": "$loopStatus",
        "description": "$loopStatus will return the current loop status.",
        "usage": "$loopStatus",
        "parameters": [],
        "example": "This will return the current loop status:\n\n```javascript\nclient.command({\n    name: \"loopStatus\",\n    code: `\n    $loopStatus\n  `\n});\n```",
        "tip": "This requires aoi.music installed.",
        "documentation": "https://aoi.js.org/extensions/aoijs/aoimusic/music/loopstatus",
        "source": "https://github.com/aoijs/aoi.music",
        "type": "Aoi.Music"
    },
    {
        "function": "$pauseTrack",
        "description": "$pauseTrack will pause the current track.",
        "usage": "$pauseTrack",
        "parameters": [],
        "example": "This will pause the current track:\n\n```javascript\nclient.command({\n    name: \"pauseTrack\",\n    code: `\n    $pauseTrack\n  `\n});\n```",
        "tip": "This requires aoi.music installed.",
        "documentation": "https://aoi.js.org/extensions/aoijs/aoimusic/music/pausetrack",
        "source": "https://github.com/aoijs/aoi.music",
        "type": "Aoi.Music"
    },
    {
        "function": "$playPreviousTrack",
        "description": "$playPreviousTrack will play the previous track.",
        "usage": "$playPreviousTrack",
        "parameters": [],
        "example": "This will play the previous track:\n\n```javascript\nclient.command({\n    name: \"playPreviousTrack\",\n    code: `\n    $playPreviousTrack\n  `\n});\n```",
        "tip": "This requires aoi.music installed.",
        "documentation": "https://aoi.js.org/extensions/aoijs/aoimusic/music/playprevioustrack",
        "source": "https://github.com/aoijs/aoi.music",
        "type": "Aoi.Music"
    },
    {
        "function": "$playTrack",
        "description": "$playTrack will play a track using the specified method.",
        "usage": "$playTrack[track;type]",
        "parameters": [
            {
                "field": "track",
                "type": "string",
                "description": "track to play",
                "required": true
            },
            {
                "field": "type",
                "type": "string",
                "description": "platform type \n1. **youtube** \n2. **soundcloud** \n3. **spotify** \n4. **local** (local file) \n5. **url** (url which emits music or any other kind)",
                "required": true
            }
        ],
        "example": "This will play a youtube video called \"Silly Goose\":\n\n```javascript\nclient.command({\n    name: \"playTrack\",\n    code: `\n    $playTrack[Silly Goose;youtube]\n  `\n});\n```",
        "tip": "This requires aoi.music installed.",
        "documentation": "https://aoi.js.org/extensions/aoijs/aoimusic/music/playtrack",
        "source": "https://github.com/aoijs/aoi.music",
        "type": "Aoi.Music"
    },
    {
        "function": "$playerStatus",
        "description": "$playerStatus will return the current Player Status.",
        "usage": "$playerStatus",
        "parameters": [],
        "example": "This will return the current player status:\n\n```javascript\nclient.command({\n    name: \"playerStatus\",\n    code: `\n    $playerStatus\n  `\n});\n```",
        "tip": "This requires aoi.music installed.",
        "documentation": "https://aoi.js.org/extensions/aoijs/aoimusic/music/playerstatus",
        "source": "https://github.com/aoijs/aoi.music",
        "type": "Aoi.Music"
    },
    {
        "function": "$queue",
        "description": "$queue will return the current song queue.",
        "usage": "$queue[page?;limit?;format?;separator?]",
        "parameters": [
            {
                "field": "page",
                "type": "number",
                "description": "queue page",
                "required": false
            },
            {
                "field": "limit",
                "type": "number",
                "description": "maximum of songs to display",
                "required": false
            },
            {
                "field": "format",
                "type": "string",
                "description": "format to display information about the songs",
                "required": false
            },
            {
                "field": "separator",
                "type": "string",
                "description": "The separator of queue, default = \",\"",
                "required": false
            }
        ],
        "example": "This will return the current queue in the `{position}) {title} - {requester.user.name}` format:\n\n```javascript\nclient.command({\n    name: \"queue\",\n    code: `\n    $queue[1;10;{position}) {title} - {requester.user.name}]\n  `\n});\n```",
        "tip": "This requires aoi.music installed.",
        "documentation": "https://aoi.js.org/extensions/aoijs/aoimusic/music/queue",
        "source": "https://github.com/aoijs/aoi.music",
        "type": "Aoi.Music"
    },
    {
        "function": "$queueLength",
        "description": "$queueLength will return the queue length.",
        "usage": "$queueLength",
        "parameters": [],
        "example": "This will return the current queue length:\n\n```javascript\nclient.command({\n    name: \"queueLength\",\n    code: `\n    $queueLength\n  `\n});\n```",
        "tip": null,
        "documentation": "https://aoi.js.org/extensions/aoijs/aoimusic/music/queuelength",
        "source": "https://github.com/aoijs/aoi.music",
        "type": "Aoi.Music"
    },
    {
        "function": "$removeFilter",
        "description": "$removeFilter will remove given filters.",
        "usage": "$removeFilter[filter]",
        "parameters": [
            {
                "field": "filter",
                "type": "string",
                "description": "JSON format",
                "required": true
            }
        ],
        "example": "This will remove the `NIGHT_CORE` and `BASS_BOOST` filters:\n\n```javascript\nclient.command({\n    name: \"removeFilter\",\n    code: `\n    $removeFilter[{\"NIGHT_CORE\", \"BASS_BOOST\"}]\n  `\n});\n```",
        "tip": "This requires aoi.music installed.",
        "documentation": "https://aoi.js.org/extensions/aoijs/aoimusic/music/removefilter",
        "source": "https://github.com/aoijs/aoi.music",
        "type": "Aoi.Music"
    },
    {
        "function": "$resetFilter",
        "description": "$resetFilter will set all filters.",
        "usage": "$resetFilter",
        "parameters": [],
        "example": "This will reset the current applied filters:\n\n```javascript\nclient.command({\n    name: \"resetFilter\",\n    code: `\n    $resetFilter\n  `\n});\n```",
        "tip": "This requires aoi.music installed.",
        "documentation": "https://aoi.js.org/extensions/aoijs/aoimusic/music/resetfilter",
        "source": "https://github.com/aoijs/aoi.music",
        "type": "Aoi.Music"
    },
    {
        "function": "$resumeTrack",
        "description": "$resumeTrack will resume the current paused track.",
        "usage": "$resumeTrack",
        "parameters": [],
        "example": "This will resume the current track:\n\n```javascript\nclient.command({\n    name: \"resumeTrack\",\n    code: `\n    $resumeTrack\n  `\n});\n```",
        "tip": "This requires aoi.music installed.",
        "documentation": "https://aoi.js.org/extensions/aoijs/aoimusic/music/resumetrack",
        "source": "https://github.com/aoijs/aoi.music",
        "type": "Aoi.Music"
    },
    {
        "function": "$search",
        "description": "$search will search for tracks.",
        "usage": "$search[query;type?;format?;list?;separator?]",
        "parameters": [
            {
                "field": "query",
                "type": "string",
                "description": "The query to search for.",
                "required": true
            },
            {
                "field": "type",
                "type": "string",
                "description": "The platform type. \n1. **youtube** (default) \n2. **spotify** (**requires auth**) \n3. **soundcloud**",
                "required": false
            },
            {
                "field": "format",
                "type": "string",
                "description": "The format in which the songs are returned (read below).",
                "required": false
            },
            {
                "field": "list",
                "type": "number",
                "description": "The maximum amount of songs that will be returned.",
                "required": false
            },
            {
                "field": "separator",
                "type": "string",
                "description": "The separator to separate returned songs.",
                "required": false
            }
        ],
        "example": "This will search for video/song titles with the name of \"aoi.js\":\n\n```javascript\nclient.command({\n    name: \"search\",\n    code: `\n    $search[aoi.js;youtube;{title} by {artist};5]\n  `\n});\n```",
        "tip": null,
        "documentation": "https://aoi.js.org/extensions/aoijs/aoimusic/music/search",
        "source": "https://github.com/aoijs/aoi.music",
        "type": "Aoi.Music"
    },
    {
        "function": "$seek",
        "description": "$seek will seek to a specified position of a song.",
        "usage": "$seek[time]",
        "parameters": [
            {
                "field": "time",
                "type": "number",
                "description": "song position in ms",
                "required": true
            }
        ],
        "example": "This will seek to second 10 of the song>\n\n```javascript\nclient.command({\n    name: \"seek\",\n    code: `\n    $seek[10000]\n  `\n});\n```",
        "tip": "This requires aoi.music installed.",
        "documentation": "https://aoi.js.org/extensions/aoijs/aoimusic/music/seek",
        "source": "https://github.com/aoijs/aoi.music",
        "type": "Aoi.Music"
    },
    {
        "function": "$setFilter",
        "description": "$setFilter will set given filters.",
        "usage": "$setFilter[filter]",
        "parameters": [
            {
                "field": "filter",
                "type": "string",
                "description": "JSON format",
                "required": true
            }
        ],
        "example": "This will set the filter to `nightCore` and `bassBoost` filters:\n\n```javascript\nclient.command({\n    name: \"setFilter\",\n    code: `\n    $setFilter[{\"nightCore\": \"1\", \"bassBoost\": \"0.3\"}]\n  `\n});\n```",
        "tip": "This requires aoi.music installed.",
        "documentation": "https://aoi.js.org/extensions/aoijs/aoimusic/music/setfilter",
        "source": "https://github.com/aoijs/aoi.music",
        "type": "Aoi.Music"
    },
    {
        "function": "$shuffleQueue",
        "description": "$shuffleQueue will shuffle the current queue.",
        "usage": "$shuffleQueue",
        "parameters": [],
        "example": "This will shuffle the current queue:\n\n```javascript\nclient.command({\n    name: \"shuffleQueue\",\n    code: `\n    $shuffleQueue\n  `\n});\n```",
        "tip": "This requires aoi.music installed.",
        "documentation": "https://aoi.js.org/extensions/aoijs/aoimusic/music/shufflequeue",
        "source": "https://github.com/aoijs/aoi.music",
        "type": "Aoi.Music"
    },
    {
        "function": "$skipTo",
        "description": "$skipTo will skip to a specific song in the queue.",
        "usage": "$skipTo[index]",
        "parameters": [
            {
                "field": "index",
                "type": "number",
                "description": "track position",
                "required": true
            }
        ],
        "example": "This will skip to the third song in the queue:\n\n```javascript\nclient.command({\n    name: \"skipTo\",\n    code: `\n    $skipTo[3]\n  `\n});\n```",
        "tip": "This requires aoi.music installed.",
        "documentation": "https://aoi.js.org/extensions/aoijs/aoimusic/music/skipto",
        "source": "https://github.com/aoijs/aoi.music",
        "type": "Aoi.Music"
    },
    {
        "function": "$skipTrack",
        "description": "$skipTrack will skip the current track.",
        "usage": "$skipTrack",
        "parameters": [],
        "example": "This will skip the current track:\n\n```javascript\nclient.command({\n    name: \"skipTrack\",\n    code: `\n    $skipTrack\n  `\n});\n```",
        "tip": "This requires aoi.music installed.",
        "documentation": "https://aoi.js.org/extensions/aoijs/aoimusic/music/skiptrack",
        "source": "https://github.com/aoijs/aoi.music",
        "type": "Aoi.Music"
    },
    {
        "function": "$songInfo",
        "description": "$songInfo will return given song's information.",
        "usage": "$songInfo[type?;position?]",
        "parameters": [
            {
                "field": "type",
                "type": "string",
                "description": "information to retrieve",
                "required": false
            },
            {
                "field": "position",
                "type": "number",
                "description": "track position",
                "required": false
            }
        ],
        "example": "This will return the current track name:\n\n```javascript\nclient.command({\n    name: \"songInfo\",\n    code: `\n    $songInfo[title]\n  `\n});\n```",
        "tip": "This requires aoi.music installed.",
        "documentation": "https://aoi.js.org/extensions/aoijs/aoimusic/music/songinfo",
        "source": "https://github.com/aoijs/aoi.music",
        "type": "Aoi.Music"
    },
    {
        "function": "$stopPlayer",
        "description": "$stopPlayer will destroy the current player.",
        "usage": "$stopPlayer",
        "parameters": [],
        "example": "This will destroy the current player:\n\n```javascript\nclient.command({\n    name: \"stopPlayer\",\n    code: `\n    $stopPlayer\n  `\n});\n```",
        "tip": "This requires aoi.music installed.",
        "documentation": "https://aoi.js.org/extensions/aoijs/aoimusic/music/stopplayer",
        "source": "https://github.com/aoijs/aoi.music",
        "type": "Aoi.Music"
    },
    {
        "function": "$stopTrack",
        "description": "$stopTrack will stop the current track.",
        "usage": "$stopTrack",
        "parameters": [],
        "example": "This will stop the current track:\n\n```javascript\nclient.command({\n    name: \"stopTrack\",\n    code: `\n    $stopTrack\n  `\n});\n```",
        "tip": "This requires aoi.music installed.",
        "documentation": "https://aoi.js.org/extensions/aoijs/aoimusic/music/stoptrack",
        "source": "https://github.com/aoijs/aoi.music",
        "type": "Aoi.Music"
    },
    {
        "function": "$unshuffleQueue",
        "description": "$unshuffleQueue will unshuffle the current queue.",
        "usage": "$unshuffleQueue",
        "parameters": [],
        "example": "This will unshuffle the current queue:\n\n```javascript\nclient.command({\n    name: \"unshuffleQueue\",\n    code: `\n    $unshuffleQueue\n  `\n});\n```",
        "tip": "This requires aoi.music installed.",
        "documentation": "https://aoi.js.org/extensions/aoijs/aoimusic/music/unshufflequeue",
        "source": "https://github.com/aoijs/aoi.music",
        "type": "Aoi.Music"
    },
    {
        "function": "$voicePing",
        "description": "$voicePing will return the voice latency.",
        "usage": "$voicePing[type?]",
        "parameters": [
            {
                "field": "type",
                "type": "string",
                "description": "type to return \n1. **ws** (default) \n2. **upd**",
                "required": false
            }
        ],
        "example": "This will return the current voice latency:\n\n```javascript\nclient.command({\n    name: \"voicePing\",\n    code: `\n    $voicePing[ws]\n  `\n});\n```",
        "tip": "This requires aoi.music installed.",
        "documentation": "https://aoi.js.org/extensions/aoijs/aoimusic/music/voiceping",
        "source": "https://github.com/aoijs/aoi.music",
        "type": "Aoi.Music"
    },
    {
        "function": "$volume",
        "description": "$volume will set or return the current volume.",
        "usage": "$volume[value]",
        "parameters": [
            {
                "field": "value",
                "type": "string",
                "description": "new volume \n1. **number** (any number) \n2. **get** (returns current volume)",
                "required": true
            }
        ],
        "example": "This will return the current volume:\n\n```javascript\nclient.command({\n    name: \"volume\",\n    code: `\n    $volume[get]\n  `\n});\n```\n\nThis will set the current volume to `45`:\n\n```javascript\nclient.command({\n    name: \"volume\",\n    code: `\n    $volume[45]\n  `\n});\n```",
        "tip": "This requires aoi.music installed.",
        "documentation": "https://aoi.js.org/extensions/aoijs/aoimusic/music/volume",
        "source": "https://github.com/aoijs/aoi.music",
        "type": "Aoi.Music"
    }
]